// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.js
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\xcd\x8e\xdb\x36\x10\xbe\xef\x53\x30\x0c\x7a\x14\x69\x77\x93\x22\xd8\xd2\x02\x8a\x6d\x0a\x14\x68\xd1\xa2\x48\x8b\xe6\x48\x8b\xa3\x88\x2e\x45\xaa\xe4\x68\xd7\x86\xa1\x77\x2f\x28\x59\xb6\x2c\x4b\xde\x6c\xb3\x87\xf8\x22\x0d\xf9\xcd\x37\x9c\x5f\xd1\xe2\xd5\x8f\xbf\xdd\x7f\xf8\xf8\xfb\x7b\x52\x60\x69\xd2\x1b\xd1\x3d\x08\x21\x44\x14\x20\x55\xf7\xda\x8a\xa8\xd1\x40\x2a\x78\xf7\x3c\xad\x97\x80\x92\x64\x85\xf4\x01\x70\x45\x6b\xcc\x93\x77\x94\xf0\x01\xc0\x68\xfb\x0f\x29\x3c\xe4\x2b\x5a\x20\x56\xe1\x8e\xf3\x4c\xd9\x4d\x60\x99\x71\xb5\xca\x8d\xf4\xc0\x32\x57\x72\xb9\x91\x5b\x6e\xf4\x3a\xf0\x75\x6d\x4a\xc9\x17\xec\x5b\x76\xcb\xb3\x70\x90\x59\xa9\x2d\xcb\x42\xa0\xc4\x83\x59\xd1\x80\x3b\x03\xa1\x00\x40\x9a\x0a\x1e\x6d\x0c\x4c\x86\xcc\xeb\x0a\x49\xf0\xd9\x67\xdb\xdc\xfc\x5b\x83\xdf\xf1\x5b\xb6\x64\xcb\x83\xd0\x5a\xdc\x84\xc8\xdf\x11\x7e\x99\x85\x42\x5a\x65\x60\x2d\x7d\x60\x9b\xc0\xdf\xb0\x05\xfb\x6e\xb8\xf6\xb2\xc6\xe4\x56\xbb\xc0\x17\x6c\xf9\x96\xdd\x76\xc2\x0b\x1b\x58\x83\xb4\x7c\xc9\xa2\x85\xf6\xfd\x85\xe9\xff\xfc\xe3\xe7\x18\xa5\x25\x5b\xbe\x63\x6f\x5a\xe9\xf9\xfc\xac\x32\x0e\x99\xd9\xf1\xf8\x34\xbb\xc4\x48\x84\x80\x33\x44\x82\x77\xf5\x7e\xd3\x49\x6b\xa7\x76\x03\x0b\x4a\x3f\x90\xcc\xc8\x10\x56\xb4\x00\xef\x88\x0e\x89\xd1\x9f\x0a\xa4\x27\xcc\x14\x2e\x89\x34\x23\xcc\x18\x97\x39\x8b\x52\x5b\xf0\x91\x34\x37\xb5\x56\x13\x0a\xad\xd2\xab\x24\x21\xf7\x85\xf4\x48\x7e\xf0\x20\x49\x92\xcc\xe0\x06\xe4\x6b\xb7\x9d\x61\x3b\x22\xb5\x5a\xd1\xd8\xbe\x63\x5f\xce\x80\x5c\xe9\x87\x19\x6b\xd3\x5b\x13\xcb\xa3\xa5\xb1\x38\x15\x12\x7a\x33\x13\x80\x7b\x67\xd1\x3b\x13\x2e\x82\x20\xac\x3c\xd2\x18\x78\x00\xf3\x44\xf4\x5b\x4c\x62\x20\x9f\x73\xff\x12\xac\x11\xca\x6b\xb1\xaa\x86\x6e\x78\x67\x48\x21\x43\x22\x95\x72\x36\x5c\x51\x6b\x55\xb5\xad\x6a\x6c\x33\x92\x6b\x83\xe0\x69\x4f\xd5\x6e\x50\x82\xbb\x0a\x56\x14\x61\x8b\x94\x54\x46\x66\x50\x38\xa3\xc0\xaf\xe8\x4f\x2d\x9c\x94\x80\x5e\x67\x81\x31\x76\x35\x99\xd5\xb3\x52\xf9\xff\xa2\x10\x2a\x69\x07\x9e\x80\x4a\x32\x57\x5b\xa4\xe9\xdf\x82\xc7\xbd\x94\xb8\x7c\x80\x3a\x9c\xbc\x07\x7d\x3c\x80\xbe\xb0\xe4\xa6\x8f\xee\x27\x3a\xf7\x88\xae\xa6\xdc\x14\xb2\x3d\x24\x6c\x2b\xe7\xf1\x98\x94\x75\x8d\xe8\x2c\x4d\xdf\xb7\xcb\x82\xcb\x74\x3e\xb4\xd7\x68\x33\x03\xd2\x8f\x58\xe3\x30\x50\xd2\x7e\x02\x4f\xd3\xfb\xb8\x3f\x4b\x3f\xd9\x69\x56\x8e\x97\x62\xef\xfc\xda\x05\x99\xfc\xa2\x03\x5e\x76\x4e\x3f\x0c\x0e\xa9\x78\x72\x6c\x99\xba\x9c\xad\xe8\x4b\xe4\x53\x63\xe8\xb3\x06\xd6\xc4\x39\x13\x94\x6b\x03\x71\x9a\xcf\x16\xef\x4c\x94\x9e\xd8\x7a\xfe\x04\x1b\x7e\x86\x4a\x79\xe5\x73\x15\xaf\x2e\x03\xe6\xd7\xed\xf8\x25\xfb\xf3\x23\x3c\x6a\x85\xc5\x1d\x59\x2e\x16\xdf\x7c\x7f\xbe\x53\x40\x2c\xe0\x3b\xf2\x76\xb1\xa8\xb6\x83\xbd\xe6\xf4\x8a\x9e\x1d\xc2\xe3\xdd\x23\xd3\x21\x09\x60\x20\x43\x50\x04\xd5\xd8\x50\xee\x2c\x26\x8f\x07\xce\xb5\x33\x6a\x92\x52\xf0\xc1\xb1\x05\xef\xbe\x8f\x9d\x10\x4b\xeb\x03\x94\x55\xfb\x7d\x3d\xd6\x55\x1f\x8e\x71\xaa\x12\x3c\x40\x87\xe3\x8c\x6f\x93\xd3\x55\xe8\x84\x18\x5e\x3f\xa3\x6e\x5f\x25\x9d\x10\xdd\x42\xaf\x2b\x18\x7f\x31\x05\x9e\xdf\x5d\x4f\xeb\x7e\xa6\x04\xb0\x48\xbb\xe6\x10\x1c\x8b\x79\xcc\x7d\xed\x3d\x58\x24\x7f\x49\x53\xc3\x34\x54\xf0\xb1\x91\x88\xbb\x38\x8e\xc0\xf3\x1b\x46\xff\xdb\xef\x5f\x83\xcc\x0a\xa2\x24\xca\xa6\x99\xf2\xa0\x8f\xc1\x29\xbf\x51\x49\xe7\xa4\x4f\x71\xd3\x0c\xf2\xbd\xdf\x73\x9d\x37\xcd\x5c\x9b\xa2\xea\xe9\xac\x2c\x81\xa6\xfb\x7d\x7c\x36\x8d\xe0\x38\x11\xbf\x91\xca\x43\x8c\x42\xd4\x69\x5f\xe6\x94\x2e\x03\xd2\xf9\xc9\xa3\x9f\x23\x17\x05\x9f\x08\x8b\xc0\xdc\x39\xfc\x8a\xb2\x79\x7e\x1c\xc1\xdb\x6a\xec\x1b\xa3\xef\xf6\x1b\xc1\xbb\xff\x52\xff\x05\x00\x00\xff\xff\x7b\x8d\x49\xb1\x63\x0d\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 3427, mode: os.FileMode(420), modTime: time.Unix(1480955498, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x57\x4b\x8f\xdb\x36\x10\xbe\xeb\x57\x4c\x90\x00\x92\x0c\xaf\xbc\x97\x5e\x16\x70\x80\x36\x69\xd1\x1c\x8a\xb4\xd9\xf6\x14\x04\x0b\x5a\x1a\xdb\x6a\x64\x52\x4b\x8e\xd6\xeb\x66\xfd\xdf\x0b\x3e\x45\xca\x72\x1f\x17\x43\x26\x87\xf3\xf8\xe6\xe3\xcc\x70\xb5\x58\x64\xb0\x80\x1f\x98\x42\xa8\x3b\xa6\x14\x6c\x85\x04\xb1\xf9\x13\x6b\x52\x70\xdc\xb7\xf5\x1e\x98\x44\xc0\x27\xe4\x04\x4a\x0c\xb2\x46\x55\x65\xb0\x58\x65\x56\xfc\xe3\x46\xa1\x7c\x62\x9b\x0e\xe1\x5b\x06\x20\x78\x61\x44\x97\xb0\x67\xbc\xe9\x50\x96\x66\x19\x60\x83\x8c\x57\x82\x17\xb4\x6f\xd5\x12\x26\x32\x19\xc0\x39\xcb\x00\xb6\xad\x44\x7f\xbe\xaa\xaa\x86\x11\x4b\xce\x9b\xfd\x44\x83\x97\x32\x1a\xce\x59\xe6\xe2\xf9\x05\x49\xb6\xf5\x3d\x12\x20\xaf\x59\xaf\x86\x8e\x11\x2a\xa0\x3d\x82\x42\x02\xb1\x05\x85\x1d\xd6\x84\x0d\x1c\x8c\xa8\x02\x12\xb0\x41\xd8\x49\xd6\xef\xb1\xd1\x3a\x18\x6f\xcc\x81\x5a\x74\x4e\x54\x5b\x32\xf8\xd0\x9e\x91\x15\x8d\xa1\x88\x8c\x3e\x13\xf2\xe6\x02\x9c\xd5\x62\x01\x3d\x93\x1a\xc9\x56\x01\x73\x07\x14\xb4\x5c\x11\xe3\x35\x3a\xbc\x75\x80\x91\x32\x23\xaa\x86\x8d\x73\x7c\xb1\xca\x00\x6a\xc1\x15\xc9\xa1\x26\x21\x0b\xab\xd1\xe3\xa4\x86\x1e\x65\x51\x9a\x6f\xad\xa8\x72\x06\xd7\xce\xf2\xb8\xe1\x03\x5f\x03\xc7\x23\xdc\x23\xc5\xa7\x4c\xa8\x6b\xf8\x66\xd2\x92\x68\xd2\x49\xcc\x87\xbe\x61\x84\xf9\x12\x8a\x12\xd6\x6f\x9d\x69\x80\xd5\x0a\xde\xb1\x9e\x06\x89\x06\xab\x5e\xb4\x9c\x2c\xa3\x18\x3f\x5d\x40\xee\x0e\xe9\xed\xa2\x43\x02\xce\x0e\xa8\x23\x8c\xbd\x2b\x83\x6e\xe7\x84\x22\x21\xf1\xc1\x68\x2e\xf4\x81\xd2\x6d\x3b\x47\x9d\x94\x21\xca\xe8\xa5\x5e\xb3\x82\xe7\x32\x0a\x68\x2e\x92\x24\x54\x89\xbc\xd1\x68\xc2\x19\x02\x47\x59\xd3\x14\xd6\x39\xef\x5b\xbb\x85\xe2\x95\x39\xb6\x67\xca\xef\x8d\x8e\xc7\xe1\x54\xd1\xe9\xec\x4a\x54\x33\xdb\x36\x1c\xd6\x34\xf9\x12\xae\x6e\xbb\x48\x5c\x9c\xde\x5d\x89\x07\xf1\x84\x33\x1e\xff\x47\x87\x1b\xec\x90\x70\xe2\x94\x5d\x1c\x99\xf2\xd9\x6e\x7f\xb9\x74\xca\x9a\xff\xff\x6e\xd7\x1d\x32\x0d\xfc\xb7\x0b\xbe\x56\x6e\x6b\x8e\xab\x13\xd5\x46\x32\x2f\xa7\xcb\x91\x45\x63\x2b\x02\xc1\xd9\x93\x48\x83\xe4\xa9\xd9\x48\xca\x1f\x9c\xc9\x9a\x53\xa0\xe9\xec\xd8\xbf\xbe\x84\x09\x5e\x5e\xe0\xb3\x05\xcb\x0a\x55\xfd\xa0\xf6\x45\xc0\xbf\x3d\xa0\x22\x76\xe8\xef\x12\x32\x86\xe5\xa5\x93\x7b\x62\xdd\x80\xa9\x8c\x73\x36\xc9\xc7\x79\x02\x55\xf0\x62\xed\xac\xfb\x70\xfa\x4e\x50\x77\x7a\xd0\x32\xc5\x04\x89\x8f\xa6\x21\x54\x5f\xf1\xa4\x8a\xa0\xa8\xac\x0e\xac\x37\x97\x30\xae\x01\x3a\x74\xc9\x8e\x49\xdc\x5a\xc6\x93\xc3\x69\x1c\xaf\xf5\xf3\x9d\x96\x37\xba\x8c\x3f\x5a\x99\xf9\x18\x23\x2e\x97\x41\xfa\x74\x55\xda\xc0\x11\x49\x1e\x44\x83\x77\x90\x77\x2d\x47\x95\x8f\xcb\xda\x97\x3b\xf3\x1b\x2a\x47\x40\xe9\xb2\x85\xa8\xab\x0d\x84\x75\x5d\xe8\x1d\xae\x55\xb4\x12\x0e\x42\x11\x48\xac\x4d\xa5\x5d\xd8\x14\xa9\x25\x6c\x91\xea\x3d\x36\xb0\x95\xe2\x60\x94\xac\x1a\xdc\x0c\xbb\xd5\x21\x18\x69\x6c\x10\x17\xed\x44\x5d\x6b\x26\x71\x0b\xb8\x5a\xfc\xc7\x1a\x1f\xdf\x0e\x1d\xbc\x5e\x73\x1c\x34\x6b\x01\x6b\xdd\x0f\x86\xae\x8b\xca\x3e\xca\x56\x34\xb0\x86\xef\x6e\x6f\x6f\xe3\xbb\xd4\x11\xca\x51\xda\x50\xc8\xc4\xfb\xef\x97\x29\xe2\xa7\x39\x66\x6f\x64\x08\x83\x3d\xb7\x42\x55\x3b\xa4\x22\x4f\x71\xca\x7d\xfd\xa8\x68\x8f\xbc\x28\xa4\xea\x93\xfe\x73\x11\xb5\x54\xbd\x61\x60\x95\xb6\x9c\x09\x0e\x17\xec\xf6\xcd\x27\x15\x4f\x20\xc2\x23\xbc\x37\x3e\x7b\x16\x4d\x5c\x9b\xf3\xcb\xb7\x93\x74\xf5\x6a\xaf\x0a\xa4\x34\xa5\x86\x49\x1a\xf3\x4c\xa2\x8f\xd3\xdc\x72\xd2\xd4\xe8\x60\x0d\xc7\x96\x37\xe2\x58\x29\xa4\x0f\x6e\xd1\xf9\x62\x04\x3d\xd0\xcb\x38\xb5\x71\x3d\xeb\x8b\x8b\x1e\xe1\x95\x8f\x0d\xc2\xd9\x30\xe5\x35\x58\x49\x65\xd3\x6a\xae\x90\x7e\x32\x74\x29\x2c\x6b\x92\xba\x1e\x88\x64\x3f\xb2\x79\xb8\x14\xd2\xc3\x20\xbb\xa2\x1c\x1b\x9b\xeb\xcd\x63\xc5\x95\xe8\x32\xf3\x09\x77\x3f\x3e\xf7\x45\xac\xfe\xe5\x05\xf2\x6a\xe1\x08\xa4\x85\x47\x92\x8c\x5c\x98\x2d\x68\x33\x25\x2b\xae\x22\xcb\x68\x35\xae\xc8\xf6\x2a\x98\x11\x25\x16\xf1\x43\xd0\x9d\xa6\x0f\xab\xfc\x5f\xd3\x5e\xe2\x79\xc6\xd7\x25\x4d\x02\x17\x83\xbb\x57\xda\x37\x89\x15\x3e\x63\xed\x56\x8c\xf3\xa5\x9b\x6c\xde\x14\xf9\x6b\x17\xdb\x4d\x2d\x06\x4e\x79\x59\x11\x3e\x53\x11\x85\xd9\x21\xdf\xd1\xbe\x0c\xf2\x56\x3f\x36\xe9\x01\xdf\xf9\xbc\xf4\x44\xfd\x0d\xe9\x5a\x94\x97\xd5\x9e\x0e\x5d\x41\x78\xe8\x4d\x8d\x74\x97\xe7\xc1\xec\x3e\xf8\xe5\xd0\xdc\xf4\x6d\xbc\x4b\x26\xc0\xb3\xf7\x5c\x67\xa5\xe5\xfd\xa0\x87\xd5\xd1\x2b\x97\x32\x4d\x47\xb3\xa9\x81\x2d\x4a\x78\xb5\x8e\xd9\x33\x72\x73\x94\x89\xb7\x23\x3a\x9e\xb3\x6c\x3b\xf0\x9a\x5a\xc1\x41\x62\x23\xd9\xd1\x71\xc8\xe4\x43\xf7\x40\x3f\x50\xa4\x09\x4a\xba\x63\x06\xf0\xab\xf9\x5f\x39\x15\xe1\x70\x99\x18\xd0\x2b\x4e\xbd\x93\xe7\x78\xd4\x5f\x45\x5e\xef\x99\xa4\x7c\xf9\x4f\x56\xca\xd8\x2b\x07\x8a\x3d\x56\x7e\xbe\xfd\x92\x18\x0a\xd7\xc3\xd8\xd2\x48\x0e\xee\x2e\xfc\xf1\xe9\x83\xf1\x77\xa8\xec\x2c\xf6\xdb\x80\xf2\x54\xe4\x36\x03\xf9\xcc\x4e\x04\xbb\x06\x3d\xf5\xcf\x73\x42\xb5\x7f\x21\xbc\x85\x5b\x0f\xfc\xa0\x27\xdb\x54\xf5\x12\xbe\x97\x92\x9d\x2a\xdd\xf3\xae\x68\xb1\xed\xb1\x28\x4b\x7b\xab\x23\x83\x5e\x22\x4d\x6f\x6c\xc5\xb9\xe9\x00\x9c\xc8\x3b\x75\xfb\x56\x8f\x68\x27\x33\x5e\xdd\x93\xa1\xe1\x79\x09\x79\xbe\x84\xa1\x22\x71\x4f\xb2\xe5\x3b\x0d\x73\x92\x32\x26\x15\x4e\xb0\x7c\x8c\xb1\xac\x1e\x8d\x03\x24\x07\xf4\x18\x3d\x56\x33\xf3\xf5\xa9\x47\xb1\x8d\xb6\xd6\x6b\xc8\x95\x31\x99\x8f\x74\x4d\x71\xd1\xaf\x83\x70\xc0\x72\x16\xb0\x53\x18\xc4\xc3\x5b\xc9\x95\x02\xb1\x85\xa9\xed\x79\xad\xe9\xf8\x7d\x8e\xee\x83\x8f\x20\x45\x3a\x01\x75\x2c\xdf\x8f\x09\xc0\x31\x6c\xb5\x38\xf4\x6d\x7c\xe1\xad\x79\xe1\x34\xba\x12\xfa\xb3\x79\xf0\x6f\x98\x54\x95\x3b\x50\xbc\x19\x25\x6d\x25\x99\xe4\x83\xc4\x6e\xd7\xe1\x83\xf5\xc5\x96\xc8\x90\x17\x3d\x8a\x4d\xee\xa9\x8b\x47\x21\x8d\x25\x35\xb4\x4d\x24\x47\xf5\x50\x6a\x13\x7c\xf5\xbe\x06\x2b\x6c\x26\x8e\xb4\xbc\xf5\x77\x39\x14\x3b\x3d\x58\x99\xa3\xb3\x45\xef\xee\x12\x95\xb4\x78\xde\xf8\xf5\xdc\x33\xf6\x7d\xf4\x96\x89\x73\xe0\x08\xe8\x66\xc2\x22\x54\x86\xf0\xa6\x8e\xf7\xf5\x5b\x3e\x3e\x5c\x4e\x94\x85\x31\xc0\x4f\xfd\xf6\x2b\x65\x4d\xf2\x38\xb6\x55\xee\xc2\x6a\x2a\xe4\x6a\xd0\x85\x35\x37\xbb\x68\x30\xdf\x14\x8d\xa8\x87\x03\x72\x2a\x2b\x89\xac\x39\x45\x83\x92\xc5\x57\x3b\x12\x4b\x69\x0b\x75\xd7\xd6\x5f\xf3\x25\xe4\x24\x9d\xd2\x1b\x29\x8e\x40\x8d\x69\x67\xfa\xed\x8e\x5d\x34\x6f\xa5\x8c\xc1\xae\x22\x26\x77\x48\xa6\xa9\xbd\x13\x9c\xb4\xde\xcc\x0d\x57\x57\x4d\xbd\xb6\x8f\xc7\xa9\xee\x34\xfc\xf1\x29\x3a\xab\xcc\xf4\x22\xa3\x2c\x14\xab\x19\x6d\x97\xb7\x0c\xbb\xaa\x1e\xa4\x7e\xd0\xfd\x6e\x3d\xb7\x4f\x9b\xd1\x8c\x1d\xc0\x34\x84\xba\x0e\x17\xb6\xef\xe8\x5c\x8e\xb5\x2b\x3b\x97\xd9\xdf\x01\x00\x00\xff\xff\x30\x73\xb8\x3c\xdd\x13\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 5085, mode: os.FileMode(420), modTime: time.Unix(1480965199, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

