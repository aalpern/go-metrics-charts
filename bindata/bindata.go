// Package bindata Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static/index.html
// static/main.js
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdf\x6f\xdb\xb6\x13\x7f\xef\x5f\xc1\xaa\xf8\xbe\x55\xa2\xfd\x4d\xba\x15\x9d\x6c\xa0\x48\xdb\x61\xc0\xba\x15\x6d\x37\xac\x4f\xc3\x59\x3c\x45\x4c\x29\x52\x23\x4f\x89\x8d\xc0\xff\xfb\x40\xfd\xb0\x15\x59\xb2\x93\xd4\x68\xb2\xbc\x48\xa4\x8e\x77\xbc\x0f\x3f\x77\x3e\x5e\xe2\xa7\x6f\x7e\x3f\xfb\xfc\xe5\xc3\x5b\x96\x51\xae\xe6\x4f\xe2\xfa\xc1\x18\x63\x71\x86\x20\xea\xd7\x6a\x48\x92\x14\xce\x63\x5e\x3f\xb7\xf3\x39\x12\xb0\x24\x03\xeb\x90\x66\x41\x49\x69\xf8\x32\x60\xbc\x23\xa0\xa4\xfe\xca\x32\x8b\xe9\x2c\xc8\x88\x0a\xf7\x8a\xf3\x44\xe8\x0b\x17\x25\xca\x94\x22\x55\x60\x31\x4a\x4c\xce\xe1\x02\x96\x5c\xc9\x85\xe3\x8b\x52\xe5\xc0\x27\xd1\xff\xa3\x13\x9e\xb8\x66\x1c\xe5\x52\x47\x89\x73\x01\xb3\xa8\x66\x81\xa3\x95\x42\x97\x21\x52\x30\x8f\xb9\xb7\xf1\x4d\x26\x53\xa3\x29\x84\x2b\x74\x26\x47\x7e\x1a\xfd\x18\x4d\x2a\xcb\xdd\xe9\xbb\x6c\xc0\x25\x56\x16\xc4\x9c\x4d\x6e\xbd\x83\x8b\x7f\x4a\xb4\x2b\x7e\x12\x4d\xa3\x69\x33\xa8\x2c\x5e\x38\xaf\xbf\x56\xf8\x6d\x16\x32\xd0\x42\xe1\x02\xac\x8b\x2e\x1c\x3f\x8d\x26\xd1\x0f\xdd\xb9\xe3\x1a\x83\xa5\x34\x8e\x4f\xa2\xe9\x8b\xe8\xa4\x1e\x1c\xd9\xc0\x02\x41\xf3\x69\xe4\x2d\x54\xef\x47\x56\xff\xc7\xc7\x5f\x3c\x4a\xd3\x68\xfa\x32\x3a\xad\x46\xc7\xd5\xff\x4e\x2a\xfc\x04\x97\x68\x6b\x2b\x27\xd1\x49\x67\xea\xee\xa6\xa2\x42\x19\x8a\xd4\x8a\xfb\xa7\x5a\x85\x0a\x08\x1d\x8d\x28\x8a\x79\x1d\xdb\xf5\x60\x61\xc4\xaa\x79\xaf\xc6\x42\x5e\xb2\x44\x81\x73\xb3\x20\x43\x6b\x98\x74\xa1\x92\xe7\x19\x05\xdb\x5d\x0c\xc9\x85\x5e\x4f\x4f\xa6\x2f\x97\x18\x4d\x20\x35\x5a\xaf\x34\x55\xa5\x14\x03\x0b\xaa\x45\x4f\xc3\x90\x9d\x65\x60\x89\xbd\xb6\x08\x2c\x0c\x47\xe4\x3a\xca\x17\x66\x39\xa2\x6d\x23\x29\xc5\x2c\xf0\xa9\xaa\xef\xcb\x0d\x41\x2e\xe4\xe5\x88\xb5\xe1\x4f\x03\xd3\xbd\xa9\x66\x38\x88\xf1\x06\x93\xe0\xc9\x08\x02\x67\x46\x93\x35\xca\xed\xa0\x10\x6b\xd8\xa8\x51\x78\x89\xea\x00\xfc\x95\x4c\xa8\x30\x1d\xf3\x7f\x57\x58\x12\xe6\xfb\xc0\x2a\xba\x6e\x58\xa3\x58\x06\x2e\x04\x21\x8c\x76\x7b\x96\x55\x4b\xa5\x2e\x4a\xaa\x8e\xa4\x7a\x0b\x53\xa9\x08\x6d\xc0\xaa\x1f\x98\x59\xf0\xae\x1a\xb2\xc5\x8a\xe5\x48\x56\x26\x4c\x43\x8e\xcf\x19\x24\x09\x16\xe4\x98\xc5\xf3\x52\x81\x65\xb8\x2c\x2c\x3a\x27\xbd\xc1\xbd\xf6\x9a\xbf\x66\xbb\x95\xc9\x80\xd1\xaa\xc0\x59\x40\xb8\xa4\x80\x15\x0a\x12\xcc\x8c\x12\x68\x37\xd6\x6b\xd3\x2e\x8a\xa2\x43\xde\xc0\x86\x86\x25\x91\xd1\x41\xe5\xd8\x82\x74\x98\x28\x04\xdb\x3a\xb7\x5f\x49\xa5\xc8\x15\xa0\x37\xbb\x4c\x8c\xf6\xa1\xe2\x72\x50\x43\x87\x3b\x8c\x6b\xbb\x3a\x05\x96\x42\x98\x28\xe3\xd0\x67\x00\x79\x0b\xe3\xdc\x5b\x3f\xe0\x29\x87\x7d\xc1\x53\xdc\x29\x74\xd8\xbd\x48\x57\x41\xe4\xf1\xad\x51\x45\x11\x26\xa6\xd4\x14\xcc\xff\x6a\x1c\x60\x26\xed\x48\x35\x87\xd8\x0a\x7d\xd9\xe7\xe5\xed\x43\x7c\x78\xeb\xb6\xc9\x94\x87\xb2\x9a\x27\x1e\xab\xa9\xb2\x1b\xd7\xf7\x47\xe6\x1b\xc2\xb1\x47\xe0\xaa\xa4\xa3\xb0\x19\x48\x17\x42\x42\xf2\x12\xb7\xbc\x56\x52\x63\x78\x28\x99\x6e\xb4\x1f\x9b\xd5\x5d\xeb\xdf\x87\xda\xec\x10\x48\x5b\x68\xc0\x22\x3c\x1c\x34\x5d\xeb\x8f\x0e\x9a\x05\xd8\x87\x43\xa6\x63\xfc\x71\xa4\xc3\xf1\x2c\xf1\x89\xc0\x12\x77\x64\x0a\x06\x5a\x30\x8b\xa9\x45\x97\xb1\x02\xad\x34\xe2\x51\x26\x8c\xed\x19\x17\x50\xfa\x5f\x9c\xef\x7f\xbe\x8d\xe1\xef\x48\xfa\x7e\x0d\x53\x9f\xcf\xa6\x86\xf9\x78\xe3\xd8\x9e\x33\xa9\x99\xc3\xc4\x68\x71\xff\x5a\x45\x97\xf9\xc2\x57\x49\xb9\xd4\xb3\x60\x1a\xb0\x4b\x50\x25\xce\x82\x17\x7b\x2b\xda\xfb\xb2\xf0\xbd\x74\x09\xf3\x89\xff\x11\xfd\x4a\xb5\x2c\xc3\x65\x61\x2c\x85\x85\x3e\x0f\x7a\x44\x7c\x00\xe6\x09\x73\xa5\x95\x01\x71\x44\xf2\x6d\xf6\x39\xff\xf0\xdb\xcf\xc7\x4a\xd1\x2d\x78\xa6\x40\x1d\x5a\xb8\xea\x43\xd7\x34\x4d\xb8\xc0\x45\x79\xce\x9b\xc2\x29\x60\x04\xf6\x1c\x69\x16\xfc\xbd\x50\xa0\xbf\x3e\x48\x15\x6b\xc4\x31\x23\x7b\xb3\xc7\xf9\x47\xb8\xfa\x8f\x54\xbd\x47\x89\x9a\xfa\x36\x22\x80\x60\x27\x6a\xce\xfc\x27\xf6\x06\x08\xee\xc2\xa4\x4a\x61\x4f\x97\x3f\x6c\x01\xfa\xbc\xbe\xe7\x9b\x92\x7c\xb5\x26\x5a\x0b\xaf\x95\x3a\x2a\x9a\x83\xd7\x6f\x0d\x97\xf3\x3a\x87\xbd\xd5\x62\xe8\x1e\xbd\x7b\xd9\x7e\x5f\xb3\x9d\xfd\x2a\x1d\xed\x5e\xb5\xdb\xf6\x41\x1b\x13\x87\x1a\x1d\xaa\xcc\x47\xcf\x65\x57\xf2\x50\xe3\xe2\x56\x2d\x8e\x81\x7d\x86\x04\x0b\x55\x05\xce\x28\x11\x47\x20\x3c\xf0\x69\xb4\xe7\xb1\x05\x7d\x07\xcf\x7e\x3b\x64\x33\xec\xf6\xb4\x72\xd8\xd3\xfb\xa2\x55\xb7\xf5\xcc\x9e\x55\xc5\x1c\xbb\xbe\xb9\xbb\x2b\x29\x28\x7b\xc5\xa6\x93\xc9\xff\x7e\xba\xf9\x25\x43\x7f\x3b\x7b\xc5\x5e\x4c\x26\xc5\xb2\xf3\x6d\xbd\x7d\x25\x1b\x35\xc8\x59\x73\x15\xf9\xa4\x85\x0a\x13\x42\xc1\x48\xf4\x0d\x55\xcd\xe1\xab\x46\xe7\xc2\x28\x31\xac\xf2\x59\xb7\x34\x18\xd9\xec\x29\xe6\x83\x8b\x63\xde\xf1\x39\xe6\x9d\x56\x5d\x05\xf3\x67\xcc\x8b\xaa\xd3\xb7\xe1\x6b\x8b\x65\x9f\x02\x21\x35\xa2\xdd\x9e\x07\x5f\x86\xdb\xfe\xef\x56\xa2\xdb\xf4\xf7\x6b\x5b\xf6\xd5\x03\x8f\x09\x59\x59\x60\xbf\x77\x17\xd3\xcd\xff\x18\x6c\xe7\xed\x08\xb5\x28\x9b\xd7\x24\x89\x39\x65\xe3\x32\x67\xa5\xb5\xa8\x89\xfd\xe9\x4b\x9d\x61\xd1\x98\xf7\x8d\x78\xb9\x9d\xed\xc4\x54\x23\xd8\x5f\x7e\x7d\xfd\x0c\x21\xc9\x98\xcf\x8b\xeb\xf5\x90\x07\x2d\x06\x5b\x72\xf8\x45\x32\x65\x2d\x3f\xd6\xeb\x0e\x59\xae\xaf\xb9\x4c\xd7\xeb\xb1\xf0\x27\xd1\xaa\xd3\x90\x63\x30\xbf\xbe\xf6\xcf\xf5\x3a\xe6\x34\x80\x5f\x6f\x49\x55\xf0\xf9\x35\xd5\xcb\xd8\xa2\x5d\x40\x6a\x3f\xb9\xf7\xb3\xe7\x62\xcc\x07\x60\x89\x29\x35\x86\x1e\xd1\x69\xde\xdc\x4e\xcc\x2b\x36\xb6\x81\xd1\xa6\x8a\x27\x31\xaf\xff\x83\xf5\x6f\x00\x00\x00\xff\xff\xdf\x71\xbc\xa3\xd9\x1a\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 6873, mode: os.FileMode(420), modTime: time.Unix(1558708178, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x6d\x8f\xdb\x36\xf2\x7f\x5d\x7f\x8a\x29\x5a\x44\xd2\xd6\x96\x1d\xe0\xff\x3f\x1c\xbc\x75\x80\x24\x4d\xd1\x02\x2d\xda\x4b\xd2\x57\x8b\xc5\x82\x96\xc6\x16\x77\x65\x52\x21\xa9\xf5\xba\x89\xbf\xfb\x81\x4f\x12\x29\xcb\xd9\xe4\xb0\x0d\xd0\x46\x21\x87\x33\xbf\x79\xe2\xcc\xd0\xf3\x8b\x8b\x09\x5c\xc0\x2b\x22\x11\x8a\x9a\x48\x09\x1b\x2e\x80\xaf\x6f\xb1\x50\x12\xf6\x15\x2d\x2a\x20\x02\x01\xef\x91\x29\x90\xbc\x15\x05\xca\x7c\x02\x17\xf3\x89\x25\xff\x63\x2d\x51\xdc\x93\x75\x8d\xf0\x71\x02\xc0\x59\x6a\x48\xa7\x50\x11\x56\xd6\x28\x32\xb3\x0c\xb0\x46\xc2\x72\xce\x52\x55\x51\x39\x85\x01\xcd\x04\xe0\x38\x99\x00\x6c\xa8\x40\x7f\x3e\xcf\xf3\x92\x28\x12\x9d\x37\xfb\x11\x07\x4f\x65\x38\x1c\x27\x13\xa7\xcf\xef\xa8\x04\x2d\xde\xa1\x02\x64\x05\x69\x64\x5b\x13\x85\x12\x54\x85\x20\x51\x01\xdf\x80\xc4\x1a\x0b\x85\x25\xec\x0c\xa9\x04\xc5\x61\x8d\xb0\x15\xa4\xa9\xb0\xd4\x3c\x08\x2b\xcd\x81\x82\xd7\x8e\x54\x4b\x32\xf6\x51\x15\x51\x96\x34\x34\x45\x20\xf4\x41\x21\x2b\x4f\x8c\x33\xbf\xb8\x80\x86\x08\x6d\x49\x2a\x81\xb8\x03\x12\x28\x93\x8a\xb0\x02\x9d\xbd\xb5\x82\x01\x33\x43\x2a\xdb\xb5\x03\x7e\x31\x9f\x00\x14\x9c\x49\x25\xda\x42\x71\x91\x5a\x8e\xde\x4e\xb2\x6d\x50\xa4\x99\xf9\xd6\x8c\x72\x27\x70\xe5\x24\xf7\x1b\x5e\xf1\x15\x30\xdc\xc3\x3b\x54\xe1\x29\xa3\xea\x0a\x3e\x1a\xb7\x44\x9c\xb4\x13\x93\xb6\x29\x89\xc2\x64\x0a\x69\x06\xab\x17\x4e\x34\xc0\x7c\x0e\xaf\x49\xa3\x5a\x81\xc6\x56\x0d\xa7\x4c\xd9\x88\x22\xec\x70\x62\x72\x77\x48\x6f\xa7\x35\x2a\x60\x64\x87\x5a\xc3\x10\x5d\xd6\xf1\x76\x20\xa4\xe2\x02\x6f\x0c\xe7\x54\x1f\xc8\xdc\xb6\x03\xea\xa8\x4c\xa0\xf4\x28\xf5\x9a\x25\x3c\x66\x81\x42\x63\x9a\x44\xaa\x0a\x64\xa5\xb6\x26\x1c\xa1\x8b\x51\x52\x96\xa9\x05\xe7\xb1\xd1\x0d\xa4\xdf\x9a\x63\x15\x91\x7e\xaf\x07\x1e\xaa\x93\x07\xa7\x27\x67\xb4\x1a\xd9\xb6\xea\x90\xb2\x4c\xa6\x70\x76\xdb\x69\xe2\xf4\xf4\x70\x05\xee\xf8\x3d\x8e\x20\xfe\x42\xc0\x25\xd6\xa8\x70\x00\xca\x2e\xf6\x91\x72\x65\xb7\xaf\x4f\x41\x59\xf1\x5f\x0f\x5b\xf1\xed\xb6\xfe\x1f\x60\xc7\xea\x5a\x9e\x80\xb5\xc4\x98\x6c\xe8\x86\x4e\x6e\x51\x23\xd1\x0e\xff\x78\x92\x27\xb9\xdb\x1a\xcb\x91\x81\x4a\x86\x32\xc9\x86\xcb\x81\xa6\xbd\xac\x1b\xcd\xa5\x13\xd8\xe5\x82\x15\x7a\x3e\x1b\x4e\x4c\x0f\x2b\xb8\xba\xee\x74\xf9\xac\xdc\xc0\x7a\x8e\x9f\x40\xd5\x0a\x16\xab\x1b\x50\xf9\x83\x23\x51\xea\x18\x68\xc8\x2e\xdb\x57\x23\xd8\x3e\x7d\xf2\xe0\x2c\x51\xde\xb4\xb2\x4a\x3b\x5d\xe8\x0e\xa5\x22\xbb\x66\x19\x25\x5f\xb7\x3c\x75\x74\xf7\xa4\x6e\x31\xa6\x71\x60\xa3\xf8\x3b\x0e\x5c\x14\x58\xc8\x4a\xf7\xea\x34\x35\x57\xf5\x21\x76\x80\xb3\xc4\x1f\xa6\x00\xe6\x77\x78\x90\x69\xc7\x28\xcb\x77\xa4\x31\x97\x4e\x78\xe7\x69\xd5\x05\xd9\x47\x7a\x6b\x1a\x9f\x0c\x8e\x63\x7f\x8d\x3d\x2c\x35\xbd\xe1\x65\xf0\x68\x66\xe6\xa3\xd7\x38\x9b\x76\xd4\x87\xb3\xd4\xc6\x1c\x01\xa5\x3a\x34\xb8\x84\x44\x16\x44\x29\x14\x49\xbf\xa1\xd1\x2c\xcd\xff\xbb\xbb\xb2\xb3\x93\x29\x9a\x9b\x96\x15\x8a\x72\x06\x8d\xe0\x05\x4a\x79\xe3\xcc\x7a\x23\x50\x36\x9c\x49\x4c\x85\x6c\xac\x85\xfa\xd8\x94\x3e\xf4\xbb\x98\xbd\xc3\x83\x0e\xd8\xd0\x76\x42\x36\xd6\x74\x51\x0a\x1f\x1a\xe4\x9b\xf4\x0e\x0f\x19\xac\x56\x2b\x48\xa4\x12\x94\x6d\x13\x1d\x26\x9a\x87\x2f\x87\x7c\x03\xef\xcc\x4e\x16\x19\xdb\xe8\x0d\x2b\xf0\xbc\xaf\xee\xf0\xe0\x8d\x1d\xb0\xb7\xe6\xb1\x02\x58\xbb\x5b\xa3\x48\xc2\x62\xe2\x23\x47\x1f\x86\x95\x65\x1a\x9b\x67\x62\xff\x73\xfe\xf3\x35\x6b\xd8\x63\xc8\xb3\x1d\x06\xa9\xeb\xce\x54\xae\x97\xa0\x02\x76\x5c\x2a\x10\x58\x98\x52\x7c\x61\xe5\xca\x29\x6c\x50\x15\x15\x96\xb0\x11\x7c\x67\x98\xcc\x4b\x5c\xb7\xdb\xf9\xae\x13\x52\x5a\xaf\x9f\xf4\x1b\xf2\x5c\xb7\x11\xf6\x08\x67\xbb\x83\x81\x2f\xdd\xaa\x8e\x15\xd9\xdf\x28\x66\xad\x0b\x4e\xdd\x30\xb4\x75\x1d\xf4\x05\x28\x28\x2f\x61\x05\xff\xbf\x58\x2c\xc2\xcb\xa7\x56\x28\x7a\x6a\x93\x73\x46\xdf\xc7\x6f\x9f\x20\xa1\xcd\x31\x7b\x85\x0d\xb3\x94\x3c\x50\x2e\xf3\x2d\xaa\x34\x89\xcd\x95\xf8\x3a\x93\xab\x0a\x99\x8e\xc2\x30\x63\x01\x7e\x22\x8a\xe4\xbc\xd1\x31\x2f\x73\x77\x0d\xd4\xe4\xc0\x5b\x9d\x83\xaa\x0e\xa3\x2b\x2f\x76\x65\x4d\x19\xe6\xb7\x9c\xb2\x34\x81\x8e\x75\x87\x42\xc8\xc6\x07\x4e\x2c\xf6\x5c\x36\xc5\x54\x9d\x07\x5e\x0c\x5b\x9d\xde\x37\x71\xc3\x34\x70\x52\x98\x6f\xbe\x4e\xc4\x94\x91\xeb\x70\xaf\xd5\xc7\xb4\xa7\x09\x8a\xa7\x6d\x77\xe2\xd3\x67\x7b\xa9\xee\x0a\x31\xa5\x81\x08\xd5\x87\x99\xe2\x4d\x18\x65\x94\x29\x1d\x99\x35\xac\x60\x4f\x59\xc9\xf7\xb9\x44\xf5\xab\x5b\x4c\x6d\xe7\x65\x08\xbd\x9f\xa7\x61\x64\x85\xf5\xa7\x49\x4f\x9a\x01\xcf\xbc\xcf\x6e\x27\xc3\xd4\xd7\x4e\x4a\x4c\x1b\x96\xd1\x00\x5d\x17\xd8\x5d\x43\x20\x51\xdd\x58\x18\xa9\x43\x13\xf6\x06\x5d\xe8\xdb\x8f\x01\x30\x79\x23\x5a\xc6\x28\xdb\xa6\xc3\x36\x25\x30\x50\xb7\x62\x0c\x18\x0b\x0f\x39\xc4\xa1\xff\x8a\xf3\x1a\x09\x3b\xd5\xca\x83\xfe\xd9\x64\x5f\x6a\x93\x30\xc2\xdc\xe5\xa5\xfd\x98\x8c\xbb\x5f\xeb\xdd\x8a\x3a\xcd\xfa\x46\xd2\xf5\xc2\x7d\xc5\x17\xe8\x02\xea\x2d\x6e\xdf\x3c\x34\x69\xc8\xfe\xd3\x27\x48\xf2\x0b\x97\x2d\x71\xd5\xe8\xa3\x77\xb4\xa0\x8e\x94\xcc\xb0\x86\x4d\x83\xd5\xb0\x23\xb0\x37\x8b\x19\x09\x42\x12\x3f\x74\x2c\x6d\xd2\xfb\x7f\x9a\xf6\x26\x9c\x1f\xfc\xb5\xaf\x83\xda\xe9\xe0\xb2\x49\x63\x13\x98\xe3\x03\x16\x6e\xc5\x80\xcf\xdc\x24\xf1\x7d\x9a\x7c\xe7\x74\x9b\x15\xbc\x65\x2a\xc9\x72\x85\x0f\x2a\x0d\xd4\xac\x91\x6d\x55\x95\x75\xf4\x96\x3f\x96\xf1\x01\xdf\x79\x79\xea\x01\xfb\x99\xd2\x57\x7b\x92\xe5\x95\xda\xd5\xa9\xc2\x5d\x63\x4a\x8e\xbb\x26\x6e\xcc\xee\x8d\x5f\xee\x9a\x2b\x7d\x87\x2d\xa3\x0b\xe4\xe8\x91\x6b\xaf\x50\xd6\xb4\x7a\x38\xd4\x62\xcc\xf7\xcc\x62\x73\x8e\xd3\xb1\x6c\x96\xb5\x79\xd3\x0c\xbe\x5d\x85\x31\xd4\x07\x75\x4f\x13\x6e\x07\xc1\x6c\xca\x26\xcc\x9e\xe4\x8f\x66\xfb\x67\xcd\x95\xa2\x6c\xab\xbf\x9f\x86\xab\xae\xab\x7d\x27\x74\xa3\xab\x42\xda\x3f\x40\xb8\x90\xfc\xd3\xd4\x8a\x9c\xe1\x5e\x7f\xa5\x49\x51\x11\xa1\x92\xa9\xb1\xf2\xf4\x33\x65\x65\x74\x2f\x8b\x7b\xaf\x9a\xab\x1b\x5d\x69\x6e\x0c\xd3\x34\x92\x6b\xe1\xc4\x11\x1c\xb5\xaf\x23\xbc\x88\x40\x12\xf1\xd2\xfe\x96\x8a\x14\x77\x58\xbe\x14\xa8\x47\x17\x7f\x20\x55\x82\x14\x28\xa3\xab\xd5\xac\xc0\xb3\x67\x60\xbf\x7c\x54\xf6\xf7\x98\x59\xbe\x5a\x5c\x6b\x6f\xeb\xbb\x33\x51\xfc\x6f\x14\xfc\x90\x44\x04\xf9\x86\x8b\x37\xa4\xa8\x52\x89\x82\xa2\x2d\x73\xf6\x33\x3f\xe4\x02\xef\x51\x48\x4c\xb3\x4b\x70\x6b\x0f\xfd\x9a\xae\x2e\xdf\x98\xf6\x32\xbd\x27\x02\xe8\xea\xf9\x25\xd0\x1f\x23\x34\x97\x40\x7f\xf8\x21\x7a\x22\xb0\xa0\x68\x08\x8a\xe1\x83\x3a\x24\x9a\x55\xcf\xec\x76\xb5\xb8\x84\xdb\x1f\xd3\xdf\x89\xaa\xf2\x1d\xf5\x06\xb8\xa2\xd7\x57\xc9\x21\xb9\x76\xec\xa7\x1d\xbf\xd9\xf3\x68\x23\xcb\x2e\xe1\xd6\x4a\xfe\xe6\x9b\x40\xaa\xa1\xb9\xba\xbd\x86\x1f\x56\x27\x47\xaf\x6e\xaf\x2f\x2d\x88\xa3\xfe\xeb\xf8\x84\x56\x72\x4c\x7d\x1f\x65\x38\x5e\xc6\xed\xab\x0d\xa0\xc0\xfb\x9f\x0d\xa6\x91\x68\x5a\x13\x71\x12\x4c\x6e\x00\xfe\x0c\xa7\x70\x3c\x70\xaa\xf1\x0d\x84\xef\x7a\x4e\x23\xdd\xb4\x6b\x77\xad\x89\x48\xc6\x90\xdb\x47\xbe\xe3\x64\xa2\xbd\x67\x00\x6d\x98\x2e\xbb\x71\xd2\x0c\x40\xc7\x39\xe4\x4e\xa5\xd9\x93\x5f\x46\x7f\xbd\xfd\x0d\x7e\x21\x4c\xf7\x89\xff\xd8\x85\xd4\xd5\xe3\xce\xfa\xad\x2b\xbe\x7f\xbd\xfd\xd5\x18\xba\x75\x8f\x1f\xff\x69\x51\x1c\xd2\xc4\x5e\xf9\xc9\xc8\x4e\x70\xc3\xeb\x4c\x8f\xdd\xe7\x8b\x90\xa4\x7f\x23\xbc\x80\x85\xf7\x53\x9b\x93\xb2\x8c\x59\x4f\xe1\xa5\x10\xe4\x90\xeb\x99\xe5\x0c\x17\x3b\xde\x98\x88\xb2\x4e\xed\x04\x7a\x8a\xb8\x92\x84\x52\x1c\x4c\x77\x75\x0e\xe8\x1d\xbb\x8a\x4a\xc5\xc5\xc1\xbc\x27\xbc\x53\xa6\xee\x1d\xa7\x90\x24\x53\x68\x73\xc5\xed\xf4\x78\x72\x39\x12\x21\x71\x60\xcb\x0f\xa1\x2d\xf3\x0f\x06\x80\x12\x2d\x7a\x1b\x7d\xc8\x47\x5e\xa2\xec\x9c\xd9\x6f\x05\xa3\x6c\x7f\x27\xc5\x76\x21\x65\xd9\x1f\x18\x7b\x9d\x1a\x79\x00\x1a\xca\x1e\xe7\x1a\xbf\xaf\xc5\x23\xac\xd5\x20\xb6\x74\x64\xd4\xbe\x5f\xfc\x10\x19\xf8\xa9\x13\xe5\x1d\xaa\xb6\x81\x67\xf0\xc6\xfc\x9a\xf0\x8b\x7d\xfd\x97\xff\x54\xca\x50\x46\xfd\x15\xd0\x75\x4b\x7a\xd0\x35\xfa\x8f\x76\x4d\x4b\x87\x69\x4d\x84\xcc\x0b\xbe\x6b\x68\x8d\xe9\xb0\x03\x9b\x79\x6a\xdf\x8a\x75\xc1\xfd\x93\x7b\x10\x34\x02\x5c\xad\x5f\x76\x5e\xb3\x17\xe3\x32\xf0\xa2\xac\xf8\xfe\x37\xca\xee\x96\xb0\x21\xb5\x0c\x3a\xdb\x1d\x2f\xf1\x15\x11\xaf\x5a\xa5\x38\x93\xef\xf9\x5b\x93\xbe\x4b\xb8\x4a\x14\xff\x75\x47\xb6\x7a\x0e\x4b\x24\xb2\x52\x4b\x7c\xcf\x5f\xd7\xbc\x2d\x93\xeb\xfe\x7c\x49\x65\x53\x93\x43\xcd\xb7\xdc\xf1\xf6\x71\x31\x8d\xc0\xb8\xee\xa4\xc7\xe4\xe2\x66\x1a\x98\x48\x2e\x4d\x66\xb8\xc7\x86\x34\xd4\xb5\x8b\x40\x97\x3d\xdd\x6f\x16\x51\x8a\x67\x43\xea\xf8\xdd\x5d\x23\x79\x84\xc4\xdd\x7d\x1d\x55\x17\xb6\xdd\xcc\x14\x2d\xfb\x21\x72\x02\x61\xae\xeb\x60\xfe\x3e\x2d\x79\xd1\xee\x90\xa9\x2c\x17\x48\xca\x43\xda\xff\x7e\x61\xa3\x45\x77\xc6\xf3\x39\xbc\x37\xcf\xcf\x3e\x09\x2d\x2a\x1d\x52\xfb\x0a\x19\x14\x35\x2d\xee\x28\xdb\x02\x67\xa0\x2a\xdc\x01\x35\x7f\x07\x4d\xf6\x7c\x0e\x26\x54\x26\xba\x7f\xef\x45\x6a\xa5\xcc\x61\xed\x3e\x25\x1c\xe0\x99\xe0\x7b\x50\xa5\x19\x15\x92\x29\xa4\x18\xfc\xa4\x12\x1b\xc5\x3d\x8a\x63\xae\x88\xd8\xa2\x32\x53\xc3\x6b\xce\x94\x66\x3e\xf1\xbf\x6d\xcc\xe7\x3a\xcd\x42\x40\x50\x53\xa9\xfa\x69\x6f\x88\xc8\xf4\xee\x1a\x51\x3c\x00\x8c\x21\x39\xbd\x2f\x30\x2f\x5a\x21\x90\xa9\xf7\x16\x92\x7d\x75\x1b\x03\x23\x70\x23\x50\x56\xfd\xa4\xfc\x18\x0e\x4b\xf8\x18\x0e\x3f\x9c\x8f\x02\x81\x0b\x78\xbe\x58\x2c\x22\x3c\xaf\x6b\xd4\x0d\x60\x2b\x2d\x2c\xd3\x37\xb8\xfe\xbd\x46\x72\xaf\xfd\xda\xdb\x2e\x70\x3d\x65\x8a\x14\xea\x73\x1e\xfd\x6e\xad\xd8\xcc\x3c\x3a\xcc\x34\xbf\xcf\xfb\x32\x7c\xfc\x3f\x85\xd7\x23\x23\xac\x3c\xc1\xf2\x65\x20\xbe\x40\x7e\x2c\xda\x05\xbd\xe9\xea\xdc\x8f\x9e\x5f\x22\xac\x21\xad\x3c\x09\x5c\x33\x5b\x16\x9c\xb9\xd1\xb2\xa3\x03\x1a\x4c\x96\x91\x2f\xc7\x5f\x4b\x06\xf9\x1e\xbc\x9a\x68\xee\xae\xaf\x79\x5d\x13\x29\xd3\x64\x43\x1c\x96\x88\x84\x94\x65\xb0\x5f\x93\x43\x32\x5a\x78\xcf\x5c\x2c\xe7\x25\xf5\x9c\x46\x05\x05\x40\x8e\xa7\xfe\xfd\xf9\x5c\x32\x8e\x05\xd3\x78\x42\x9e\x4e\xec\x66\xfe\x4e\x9c\xd0\x33\xf9\xca\xda\xba\x8e\x9c\xfe\xe6\xa1\xe1\x3a\xcc\xf4\x64\xa8\x68\x01\x54\x97\x97\x47\x81\xa1\x39\x35\x6b\xd8\x76\x08\xcb\xf6\xdd\xd1\x0b\xe7\xb6\x84\xd5\x8b\xe8\xb5\xd1\x8d\xd1\xae\x98\xa5\xdb\x72\x1a\x3d\xf6\xb8\x46\x68\x47\xd4\x32\x31\x22\x06\x7b\x15\xd2\x6d\xa5\x96\xf0\xaf\xc5\x62\xb8\xb5\xa7\xa5\xaa\x96\xf0\xfc\xff\xdc\x4b\xb4\xff\x73\xcc\x62\x4c\x66\xa0\x30\x45\x25\x7e\x7a\x0a\xc6\x1a\xf7\x8a\x48\x14\x5f\x77\xd4\xb9\x6c\x6a\xaa\xd2\x64\x9a\x64\x57\xcf\xaf\xb3\xe8\xd8\xba\xdd\x80\x2b\x84\xa6\x2f\x7e\xd5\x6e\x36\x28\xcc\xd1\xe8\x01\xc8\xd3\xdf\x53\xdc\xfb\xb6\x93\x32\xf5\x6f\x73\x28\x5d\xb7\x9b\x9e\xcc\x74\x83\x36\x97\x60\x05\x8b\x4b\xa0\xf0\x23\x04\x0c\xcd\xfc\x0b\x59\x64\x3c\xcd\xf6\x8a\x5e\xc3\xca\x12\xea\x5b\xe4\x35\x2f\xf1\xa5\x4a\x69\x06\xcf\x60\xf1\xb0\xd9\x9c\x3c\x79\x39\x05\x6a\xbe\x76\x80\x5e\xd5\x7c\x9d\x5e\x69\x56\xd7\x53\xf8\x68\x7e\x59\x4a\x4c\x64\xcc\xb5\x3f\x8e\x3d\x42\xff\x9c\x4b\xee\xf1\xa5\x4c\x35\x87\x29\x24\x5b\x3e\xf3\x91\xa7\xc9\xe3\xd7\xe2\xae\x2e\xec\xa9\x2a\x2a\x50\x1c\xf4\xfc\x66\x6f\xbb\x47\xe3\x4e\x93\xce\xfc\xa3\xcb\x30\x1d\x8c\xae\x6a\xb6\x36\x5d\x53\x92\xc5\x29\x4b\xe5\x8c\x14\x8a\xde\xfb\xa4\xf4\xb7\x52\xc0\x31\x0b\x52\x78\x48\x7e\x7e\xe4\x8c\x82\x7e\x44\x3b\x22\x90\x7c\xa1\x76\x9a\xf4\x69\xb5\x0b\x38\x7e\x85\x76\xfd\xcb\xd1\xa3\xda\xad\x89\xf8\x42\xe5\xd6\x44\x3c\xad\x6e\x3d\xc3\xaf\x50\xad\x7b\xc6\x38\xa3\xd9\x5b\x2c\x05\xd9\x9b\xfa\xab\x37\x75\x8b\x67\x43\x1c\x04\xea\x91\xd8\xa8\x69\x57\x34\x4c\xbd\x94\xda\x0e\xf6\x98\x4d\xfe\x1b\x00\x00\xff\xff\x73\x6d\x83\xb3\x4d\x25\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 9549, mode: os.FileMode(420), modTime: time.Unix(1558994103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.js":    staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"main.js":    &bintree{staticMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
