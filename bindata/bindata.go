// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.js
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5d\x6f\xdb\x36\x17\xbe\xef\xaf\x60\x55\xbc\x97\x22\xed\x37\xe9\x56\x74\xb2\x81\x21\x6b\x81\x01\x2b\x36\xac\xdd\xb0\x5e\xd2\xe2\x51\xc5\x8c\x22\x35\xf2\xc8\xb1\x61\xf8\xbf\x0f\xa4\x24\x5b\x96\x25\x3b\x4d\xbc\x34\x57\x12\xa9\xf3\xf9\xf0\xe1\xd1\x21\x93\x97\x3f\xfd\x7a\xf3\xe9\xf3\x6f\xef\x48\x8e\x85\x9a\xbf\x48\xea\x07\x21\x84\x24\x39\x70\x51\xbf\x86\x21\x4a\x54\x30\x4f\x58\xfd\xdc\xcf\x17\x80\x9c\xa4\x39\xb7\x0e\x70\x16\x55\x98\xc5\x6f\x22\xc2\x3a\x02\x4a\xea\xbf\x49\x6e\x21\x9b\x45\x39\x62\xe9\xde\x32\x96\x0a\x7d\xeb\x68\xaa\x4c\x25\x32\xc5\x2d\xd0\xd4\x14\x8c\xdf\xf2\x15\x53\x72\xe1\xd8\xa2\x52\x05\x67\x13\xfa\x7f\x7a\xc5\x52\xd7\x8c\x69\x21\x35\x4d\x9d\x8b\x88\x05\x35\x8b\x1c\xae\x15\xb8\x1c\x00\xa3\x79\xc2\xbc\x8f\x47\xb9\xcc\x8c\xc6\x98\xdf\x81\x33\x05\xb0\x6b\xfa\x3d\x9d\x04\xcf\xdd\xe9\xaf\x09\xc0\xa5\x56\x96\x48\x9c\x4d\xef\x1d\xc1\xed\x3f\x15\xd8\x35\xbb\xa2\x53\x3a\x6d\x06\xc1\xe3\xad\xf3\xf6\x6b\x83\x8f\xf3\x90\x73\x2d\x14\x2c\xb8\x75\xf4\xd6\xb1\x6b\x3a\xa1\xdf\x75\xe7\x2e\xeb\x8c\xaf\xa4\x71\x6c\x42\xa7\xaf\xe9\x55\x3d\xb8\xb0\x83\x05\x70\xcd\xa6\xd4\x7b\x08\xef\x17\x36\xff\xc7\xef\x3f\x7b\x94\xa6\x74\xfa\x86\x5e\x87\xd1\x65\xed\xbf\x97\x0a\x3e\xf2\x25\xd8\xda\xcb\x15\xbd\xea\x4c\x7d\xbd\x2b\x5a\x2a\x83\x54\xad\x99\x7f\xaa\x75\xac\x38\x82\xc3\x11\x43\x09\xab\xf7\x76\x3d\x58\x18\xb1\x6e\xde\xc3\x58\xc8\x25\x49\x15\x77\x6e\x16\xe5\x60\x0d\x91\x2e\x56\xf2\x4b\x8e\xd1\x3e\x8a\x21\xb9\xd8\xdb\xe9\xc9\xf4\xe5\x52\xa3\x91\x4b\x0d\xd6\x1b\xcd\x54\x25\xc5\x80\x42\x50\x7a\x19\xc7\xe4\x26\xe7\x16\xc9\x8f\x16\x38\x89\xe3\x11\xb9\x8e\xf1\x85\x59\x8d\x58\xdb\x49\x4a\x31\x8b\x7c\xa9\xea\xe7\x72\x20\xc8\x84\x5c\x8e\x78\x1b\xfe\x34\x30\xdd\x9b\x6a\x86\x83\x18\xef\x30\x89\x5e\x8c\x20\x70\x63\x34\x5a\xa3\xdc\x11\x0a\x89\xe6\x3b\x33\x0a\x96\xa0\xce\xc0\x1f\x64\x62\x05\xd9\x58\xfe\xc7\xc2\x12\xa1\x38\x05\x56\xd9\x4d\xc3\x1a\x45\x72\xee\x62\x2e\x84\xd1\xee\x84\x5a\x50\x95\xba\xac\x30\x2c\x49\x78\x8b\x33\xa9\x10\x6c\xd4\x1a\x0c\x93\x11\xc1\x75\x09\xb3\x08\x61\x85\x11\x29\x15\x4f\x21\x37\x4a\x80\x9d\x45\xef\x83\x38\x29\x00\xad\x4c\x1d\xa5\xf4\x9c\x3f\xbe\x23\x4a\x85\x68\x74\x14\x5c\x2f\x50\xc7\xa9\x02\x6e\x5b\xf7\xa7\x8d\x04\x43\xae\xe4\x7a\x17\x65\x6a\xb4\x27\xb3\x2b\xb8\x1a\x82\x7f\x38\xf3\x56\x3b\xe3\x24\xe3\x71\xaa\x8c\x03\xbf\x47\xe5\x3d\x9c\x33\xef\xfd\x4c\xa6\x8c\x9f\xa2\x77\xf9\x55\xe4\x26\x0f\xa2\x45\x80\xc8\xe3\x5b\xa3\x0a\x22\x4e\x4d\xa5\x31\x9a\xff\xd5\x24\x40\x4c\xd6\x91\x6a\x16\xb1\x15\xfa\x7c\x2a\xcb\xfb\x6f\xc2\xe1\xd0\x6d\x53\xcb\xce\xd5\x1d\x4f\x3c\x52\x53\xe5\x78\xe7\x3d\x1c\x99\x47\x6c\x98\x1e\x81\x43\xd3\x85\x71\x33\x90\x2e\xe6\x29\xca\x25\xec\x79\xad\xa4\x86\xf8\x5c\xb9\xdb\x59\xbf\x34\xab\xbb\xde\x9f\x86\xda\xe4\x1c\x48\x7b\x68\xb8\x05\xfe\xed\xa0\xe9\x7a\x7f\x76\xd0\x2c\xb8\xfd\x76\xc8\x74\x9c\x3f\x8f\x72\x38\x5e\x25\x3e\x22\xb7\xc8\x1c\x9a\x92\x70\x2d\x88\x85\xcc\x82\xcb\x49\x09\x56\x1a\xf1\x2c\x0b\xc6\x7e\x8d\x4b\x5e\xf9\x3f\xce\xd3\xaf\x6f\xe3\xf8\x09\x49\xdf\xef\x32\xea\xf5\x19\xee\x32\x74\x55\x2c\x7c\x07\x52\x48\x3d\x8b\xa6\x11\x59\x72\x55\xc1\x2c\x7a\x7d\xb2\x5b\x7c\x28\x7f\x3e\x48\x97\x12\x5f\xb2\xff\xdb\xff\xcb\x79\x8e\xb4\xa4\x80\x55\x69\x2c\x46\x3d\xce\xdc\x93\x24\xf3\x77\x41\xfb\x52\x85\xea\xa0\x35\xeb\x85\xe4\x39\x28\xb8\xfe\xe2\x9b\xb5\x1b\xff\xfd\xa2\xfd\xce\x60\x33\xaf\xf9\x72\x5e\xaf\xda\x3b\x2d\x86\xba\xf2\xe3\xd6\xfd\x43\xdd\xd2\x90\x5f\xa4\xc3\xe3\xc6\xbd\x3d\x8c\x34\x8d\xcf\xd9\x63\x93\xaa\x8a\xd1\xed\x7e\x2c\x79\xee\x18\x74\xaf\x03\xd3\x40\x9c\x31\xf2\x85\x0a\xdb\x77\xb4\x55\x1c\x81\xf0\xcc\xa7\xd1\x13\xd4\x1e\xf4\x23\x3c\xfb\x87\xab\xdd\xb0\x7b\x42\x2e\xf8\x89\x93\x34\xae\xbb\x17\x59\xe4\x55\xf8\xf1\x90\xcd\x61\x74\x77\x52\x60\xfe\x96\x4c\x27\x93\xff\xfd\x70\xf8\x25\x07\xdf\x49\xbe\x25\xaf\x27\x93\x72\xd5\xf9\xb6\xdd\xbf\xa2\xa5\x0d\x72\xd6\xdc\x51\x5f\x3b\x41\x41\x8a\x20\x08\x8a\xbe\xa3\x70\xd5\x74\xd7\xd8\x5c\x18\x25\x86\x4d\xbe\xea\x96\xb1\x91\x60\xaf\xa1\x18\x54\x4e\x58\x27\xe7\x84\x75\x0e\xfe\x01\xe6\x4f\x50\x94\xe1\xde\x60\xc7\xd7\x16\xcb\x3e\x05\x62\x6c\x44\xbb\xe7\x33\xb6\x8a\xf7\xb7\x49\x7b\x89\xee\x15\xa2\xd7\x6d\xd9\x57\x0f\x3c\x26\x68\x65\x09\xfd\x9b\x80\x04\x0f\xef\x1f\xf7\xf3\x76\x84\x5a\x98\xcf\x6b\x92\x24\x0c\xf3\x71\x99\x9b\xca\x5a\xd0\x48\xfe\xf4\xc5\x7d\x58\x34\x61\x7d\x27\x5e\xee\x28\x9c\x04\x6b\x04\xfb\xea\x9b\xcd\x2b\xe0\x69\x4e\x04\x47\xbe\xdd\x0e\x65\xd0\x62\xb0\x27\x87\x57\x92\x19\x69\xf9\xb1\xdd\x76\xc8\xb2\xd9\x30\x99\x6d\xb7\x63\xdb\x1f\x45\x6b\x4e\xf3\x02\xa2\xf9\x66\xe3\x9f\xdb\x6d\xc2\x70\x00\xbf\x9e\x4a\xf8\xc5\x79\x9d\xf0\x32\xa6\x74\x0c\x48\x9d\x27\xf3\x79\xf6\x52\x4c\xd8\x00\x2c\x09\x66\xc6\xe0\x33\x5a\xcd\xc3\x70\x12\x16\xd8\xd8\x6e\x8c\xb6\x54\xbc\x48\x58\x7d\x1f\xfe\x6f\x00\x00\x00\xff\xff\xb1\x6f\x26\xa0\x27\x17\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 5927, mode: os.FileMode(420), modTime: time.Unix(1481041513, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\x5f\x8f\xdb\x36\x12\x7f\xae\x3f\xc5\x14\x2d\x2a\x69\x63\xcb\x0e\x70\x77\x38\x78\xeb\x00\x49\x9a\xa2\x05\x5a\xb4\x97\xa4\x4f\x8b\xc5\x82\x96\xc6\x16\x37\x32\xa9\x90\xd4\x7a\xdd\x8d\xbf\xfb\x81\xff\x24\x52\x96\xb3\xe9\xdd\x76\x1f\x36\x0a\x39\x1c\xfe\x86\xf3\x7f\x76\x7e\x71\x31\x81\x0b\x78\x45\x24\x42\x51\x13\x29\x61\xc3\x05\xf0\xf5\x2d\x16\x4a\xc2\xbe\xa2\x45\x05\x44\x20\xe0\x1d\x32\x05\x92\xb7\xa2\x40\x99\x4f\xe0\x62\x3e\xb1\xe4\xbf\xad\x25\x8a\x3b\xb2\xae\x11\x1e\x26\x00\x9c\xa5\x86\x74\x0a\x15\x61\x65\x8d\x22\x33\xcb\x00\x6b\x24\x2c\xe7\x2c\x55\x15\x95\x53\x18\xd0\x4c\x00\x8e\x93\x09\xc0\x86\x0a\xf4\xe7\xf3\x3c\x2f\x89\x22\xd1\x79\xb3\x1f\x71\xf0\x54\x86\xc3\x71\x32\x71\xf2\xfc\x8a\x4a\xd0\xe2\x1d\x2a\x40\x56\x90\x46\xb6\x35\x51\x28\x41\x55\x08\x12\x15\xf0\x0d\x48\xac\xb1\x50\x58\xc2\xce\x90\x4a\x50\x1c\xd6\x08\x5b\x41\x9a\x0a\x4b\xcd\x83\xb0\xd2\x1c\x28\x78\xed\x48\xf5\x4d\xe6\x7d\x54\x45\x94\x25\x0d\x9f\x22\xb8\xf4\x5e\x21\x2b\x4f\x1e\x67\x7e\x71\x01\x0d\x11\xfa\x25\xa9\x04\xe2\x0e\x48\xa0\x4c\x2a\xc2\x0a\x74\xef\xad\x05\x0c\x98\x19\x52\xd9\xae\x1d\xf0\x8b\xf9\x04\xa0\xe0\x4c\x2a\xd1\x16\x8a\x8b\xd4\x72\xf4\xef\x24\xdb\x06\x45\x9a\x99\x6f\xcd\x28\x77\x17\xae\xdc\xcd\xfd\x86\x17\x7c\x05\x0c\xf7\xf0\x0e\x55\x78\xca\x88\xba\x82\x07\xa3\x96\x88\x93\x56\x62\xd2\x36\x25\x51\x98\x4c\x21\xcd\x60\xf5\xc2\x5d\x0d\x30\x9f\xc3\x6b\xd2\xa8\x56\xa0\x79\xab\x86\x53\xa6\xac\x45\x11\x76\x38\x79\x72\x77\x48\x6f\xa7\x35\x2a\x60\x64\x87\x5a\xc2\x10\x5d\xd6\xf1\x76\x20\xa4\xe2\x02\x6f\x0c\xe7\x54\x1f\xc8\xdc\xb6\x03\xea\xa8\x8c\xa1\xf4\x28\xf5\x9a\x25\x3c\x66\x81\x40\x63\x92\x44\xa2\x0a\x64\xa5\x7e\x4d\x38\x42\x67\xa3\xa4\x2c\x53\x0b\xce\x63\xa3\x1b\x48\xbf\x36\xc7\x2a\x22\xfd\x5e\x0f\x3c\x14\x27\x0f\x4e\x4f\xce\x48\x35\xb2\x6d\xc5\x21\x65\x99\x4c\xe1\xec\xb6\x93\xc4\xc9\xe9\xe1\x0a\xdc\xf1\x3b\x1c\x41\xfc\x85\x80\x4b\xac\x51\xe1\x00\x94\x5d\xec\x2d\xe5\xca\x6e\x5f\x9f\x82\xb2\xd7\xff\x75\xd8\x8a\x6f\xb7\xf5\xff\x00\x3b\x16\xd7\xf2\x04\xac\x25\xc6\x64\x43\x35\x74\xf7\x16\x35\x12\xad\xf0\x87\x13\x3f\xc9\xdd\xd6\x98\x8f\x0c\x44\x32\x94\x49\x36\x5c\x0e\x24\x35\x77\x05\x52\xb8\xfb\x04\xaa\x56\xb0\xf8\xda\x80\xca\x1f\x1c\xb1\x16\xc7\x40\xbb\x91\xf3\xba\xd5\xa9\x7a\xe0\xd3\x27\xb8\xb2\x4a\xb2\x44\x79\xd3\xca\x2a\xed\x5e\x86\xee\x50\x2a\xb2\x6b\x96\x91\x13\x74\xcb\x53\x47\x77\x47\xea\x16\x63\x1a\x07\x36\xb2\x83\xe3\xe0\xa9\x3a\x14\x2b\x77\xbb\x17\xa7\xa9\xb9\xaa\x0f\x37\x9a\x26\x1d\xbc\xc4\x6f\x26\x11\xe5\x1f\xf0\x20\xd3\x8e\x51\x96\xef\x48\x63\x9c\x3f\x8c\x3d\x5a\x74\x41\xf6\x91\xdc\x9a\xc6\x1b\xa5\xe3\xd8\x87\x93\xfb\xa5\xa6\x37\xbc\x0c\x1e\xcd\xcc\x7c\xf4\x12\x67\xd3\x8e\xfa\x70\x96\xda\x3c\x47\x40\xa9\x0e\x0d\x2e\x21\x91\x05\x51\x0a\x45\xd2\x6f\x68\x34\x4b\xf3\xbb\x8b\x59\xdd\x3b\x9d\x26\x2f\x79\x36\x75\x91\xba\xee\xb2\x96\x4b\x52\x54\xc0\x8e\x4b\x05\x02\x0b\x13\xe3\x2f\xac\x92\xe4\x14\x36\xa8\x8a\x0a\x4b\xd8\x08\xbe\x33\x4c\xe6\x25\xae\xdb\xed\x7c\xd7\x5d\x52\x5a\x31\x4e\x12\x99\x3c\x97\xc6\xc2\xe4\x73\x36\xed\xf4\xd9\x25\xf4\x0f\x2d\xbc\x5e\x73\x56\x68\xd6\xba\xd7\xd6\x99\xa8\xad\xeb\x20\xe1\xa0\xa0\xbc\x84\x15\xfc\x73\xb1\x58\x84\xde\x54\x2b\x14\x3d\xb5\x31\x22\x23\xef\xe3\xee\x14\x58\xa8\x39\x66\x7d\xb2\x13\x83\xdc\x53\x2e\xf3\x2d\xaa\x34\x89\xdf\x29\xf1\x91\x2b\x57\x15\xb2\x34\x15\xb2\x89\x32\xdf\x89\xd4\x42\x36\xc6\x06\xf3\x38\xd9\x8d\xc9\x8c\x7b\xf8\xc1\x80\xe8\x68\xba\x94\x28\x15\x31\x2a\x0f\xfd\x20\xe0\xbc\xd3\xfb\x32\x0b\x93\xa4\x75\x04\xf3\x1a\x31\x0a\x4b\x7b\xa5\x7f\x5f\x07\xd4\x26\xa6\x1e\x1a\xe4\x9b\xd4\x1a\x32\xac\x56\x90\xb0\x76\xb7\x46\x91\xc4\x8c\x2d\x6b\xeb\x77\x90\x6c\x79\xc7\x34\x4f\xe0\x99\x81\x1a\x11\x47\xcf\x6e\x3c\x11\x56\x16\x58\x40\x76\x9c\x9c\x7e\x45\x96\x72\x12\x01\x7c\x61\xe0\x7d\x68\xa0\x98\x31\xad\xf8\x34\x1e\xaf\x9e\xad\x11\x3a\x97\x34\xa1\x96\x08\xd5\x5b\xb9\xe2\x4d\x68\xe4\x94\x29\xed\x18\x35\xac\x60\x4f\x59\xc9\xf7\xb9\x44\xf5\xb3\x5b\x74\x58\x0c\xa1\x37\xb3\x69\x68\xd8\x61\x3c\x6f\xd2\x93\x24\xe7\x99\xf7\x4a\x70\x77\x98\xf4\xd2\xdd\x12\xd3\x86\x49\x2e\x40\xd7\xf9\x55\x97\xe8\x24\xaa\x1b\x0b\x23\x75\x68\xc2\x9c\xd7\x79\x9e\xfd\x18\x00\x93\x37\xa2\x65\x8c\xb2\x6d\x3a\x4c\xbf\xc1\x03\x75\x2b\xe6\x01\xe3\xcb\x43\x0e\xb1\xaf\xbe\xe2\xbc\x46\xc2\x4e\xa5\xf2\xa0\x7f\x34\xce\x9f\xda\x18\x10\x61\xee\xc2\x82\xfd\x98\x8c\xab\x5f\xcb\xdd\x8a\x3a\xcd\xfa\x02\xc9\xd5\x78\x7d\x06\x15\xe8\xdc\xf2\x2d\x6e\xdf\xdc\x37\x69\xc8\xfe\xd3\x27\x48\xf2\x0b\x17\x0e\x34\x71\xef\xf2\xbd\xdd\x8e\x26\xa8\x91\x14\x14\xe6\x84\x69\xb0\x1a\x66\x58\x1b\xd8\x4c\xa9\x1b\x92\xf8\x62\x7a\xa9\x63\x07\xc9\xfd\x7f\x4d\xb9\x10\xd6\xc5\xbd\x63\x1d\x33\x27\x83\x8b\x92\x1a\x9b\xc0\x1c\xef\xb1\x70\x2b\x06\x7c\xe6\x2a\xe4\x6f\xd3\xe4\x1b\x27\xdb\xac\xe0\x2d\x53\x49\x96\x2b\xbc\x57\x69\x20\x66\x8d\x6c\xab\xaa\xac\xa3\xb7\xfc\xb1\x8c\x0f\xf8\x4a\xc6\x53\x0f\xd8\xcf\x94\xce\x2c\x49\x96\x57\x6a\x57\xa7\x0a\x77\x8d\xc9\x78\xce\xd1\x6f\xcc\xee\x8d\x5f\xee\x8a\x15\x1d\xd5\x96\x51\x27\x71\xf4\xc8\xb5\x56\x28\x6b\x5a\xdd\xf4\xe8\x6b\xcc\xf7\xcc\x62\x73\x8a\xd3\xb6\x6c\x96\xf5\xf3\xa6\x19\x7c\xbd\x0a\x6d\xa8\x37\xea\x9e\x26\xdc\x0e\x8c\xd9\x64\x6d\x98\x3d\xc9\x8f\x66\xfb\x7b\xcd\x95\xa2\x6c\xab\xbf\x9f\x86\xab\x4e\xeb\x93\x4d\xcb\x0a\x45\x39\xd3\xf1\xac\xf8\x80\xe5\x4b\x81\x24\x55\x82\x14\xe8\x3a\x2c\xfb\x7d\xb5\xb8\xd6\x32\xea\x88\x91\x28\xfe\x27\x0a\x7e\x48\xba\xcd\x7c\xc3\xc5\x1b\x52\x54\xa9\x44\x41\x75\x6c\x7e\x01\x0f\xf6\x33\x3f\xe4\x02\xef\x50\x48\x4c\xb3\x4b\x70\x6b\xf7\xfd\x9a\x8d\xa7\x1b\x2e\xd2\x3b\x22\x80\xae\x9e\x5f\x02\xfd\xde\x31\xb5\x46\x71\x09\xf4\xd9\xb3\xce\x9b\x2d\x16\x1a\x62\x61\x78\xaf\x0e\xc9\xe4\x2b\xcf\xe4\x76\xb5\xb8\x84\xdb\xef\xd3\x5f\x89\xaa\xf2\x1d\x65\x69\x77\xe8\x2a\x39\x24\xd7\x8e\xed\xb4\xe3\x35\x7b\x1e\x6d\x64\xd9\x25\xdc\xda\x1b\xbf\x0a\x2e\x34\x24\x57\xb7\xd7\xf0\x6c\x75\x72\xf2\xea\xf6\xfa\x72\xf2\x95\xd5\xfa\x53\x3d\x89\x2f\x50\x0c\xb3\x4b\x6d\x4c\x9d\xa2\x74\x51\x7c\x53\x53\x86\x37\x45\xd5\xa7\x20\x6d\xda\xae\xed\x88\xdd\x3e\xaa\xa1\x7b\xce\xbf\x9b\xe5\x9c\xe1\x5e\x7f\xa5\x89\xe1\x95\x4c\x0d\x8f\x29\x3c\x1c\xa7\x96\x0d\x6f\xf4\x9d\xd2\x71\xc9\x4e\x81\x10\x81\xe4\x1c\x90\xd0\xa4\x3e\x03\xea\x6f\x40\xb5\x26\xe2\x09\x40\xf5\xc5\x96\x55\x22\xdf\x40\x38\x78\x72\xba\xd3\x35\x92\x36\xc5\x35\x11\x89\xb3\x81\xff\x5b\x1a\x6d\xc8\x46\x90\x0d\xd3\xa9\x36\xd6\xf8\x40\x58\x27\xa2\xbb\xd3\x9d\x4a\xb3\x27\x0f\x40\x7f\xbc\xfd\x05\x7e\x22\xac\xac\xff\xce\x20\xe4\x73\x70\xa7\xb5\xd6\x25\xdc\x3f\xde\xfe\x6c\xcc\xb7\x75\x8d\xfc\x7f\x5a\x14\x87\x34\xb1\x61\x3e\x19\xd9\x09\xa2\xba\x8e\xe9\xb1\xaa\x7d\xe2\x91\xf4\x4f\x84\x17\xb0\xf0\x2a\x6d\x75\xff\x1f\xb3\x9e\xc2\x4b\x21\xc8\x21\xd7\x6d\xd2\x19\x2e\xb6\xa3\x4a\xb3\x2c\x73\xfa\xef\x2e\xf4\x14\x71\xf6\x08\x6f\x71\x30\x9d\x29\x0c\xe8\x1d\xbb\x8a\xea\xbe\xfe\x60\x7a\xf2\x77\xca\xe4\xba\xe3\x14\x92\x64\x0a\x6d\xae\xf8\x3b\x25\x6c\xc1\x15\xbb\x01\x11\x12\x07\x6f\xf9\x31\x7c\xcb\xfc\xa3\x01\xa0\x44\x8b\xfe\x8d\x3e\xe6\x23\x53\x15\xdb\x01\xf4\x5b\xba\x09\x90\xe6\xca\xa0\x09\x88\xdf\x85\x94\x65\x7f\x60\x6c\xd2\xd2\x39\x96\xab\x37\xf8\x06\x86\x77\x8f\x73\x8d\x67\x45\xc7\x20\xdd\x7a\x09\xe2\x97\x8e\x1e\xb5\xaf\x11\x3f\x46\x0f\xfc\xd4\x8e\xf2\x0e\x55\xdb\xc0\x77\xf0\xc6\x4c\xc6\x7f\xb2\x93\x6c\xf9\x77\xb9\x0c\x65\xd4\x87\x80\xae\x42\xd2\xbd\xb5\x91\x7f\xb4\x52\x5a\x3a\x4c\x6b\x22\x64\x5e\xf0\x5d\x43\x6b\x4c\x87\x55\xd7\xcc\x53\xfb\xf2\xab\x33\xee\x1f\xdc\x70\xcb\x5c\xe0\x62\xd7\xb2\xd3\x9a\x0d\x62\xcb\x40\x8b\xb2\xe2\xfb\x5f\x28\xfb\xb0\x84\x0d\xa9\x65\x50\xcd\xee\x78\x89\xaf\x88\x78\xd5\x2a\xc5\x99\x7c\xcf\xdf\x1a\xf7\x5d\xc2\x55\xa2\xf8\xcf\x3b\xb2\xd5\xbd\x57\x22\x91\x95\xfa\xc6\xf7\xfc\x75\xcd\xdb\x32\xb9\xee\xcf\x97\x54\x36\x35\x39\xd4\x7c\xcb\x1d\xef\xd8\x2e\xa6\xc1\x13\xc8\xa5\xb1\x7c\x37\xbf\x48\x43\x59\x3a\x0b\x73\xde\xd1\xcd\xd7\x23\x17\xce\x86\xd4\xf1\x8c\x58\x8b\xfd\x08\x89\x8b\x6d\x1d\x95\x37\x4b\xdf\x01\x0e\xd7\x7d\x7f\x74\x9c\x4c\xbe\x4d\x4b\x5e\xb4\x3b\x64\x2a\xcb\x05\x92\xf2\x10\x74\xb3\x56\xff\xba\xbe\x9d\xcf\xe1\xbd\x19\x8e\x7a\xb7\xb2\x38\xb4\x91\xec\x2b\x64\x50\xd4\xb4\xf8\x40\xd9\x16\x38\x03\x55\xe1\x0e\xa8\xf9\x37\x28\x95\xe7\x73\x30\xca\x9f\xe8\x2a\xbc\xbf\x52\x8b\x61\x0e\x6b\x85\x28\xe1\x10\xce\x04\xdf\x83\x2a\x4d\xc1\x9f\x4c\x21\xc5\xa0\xc1\x8e\x9f\xc1\x8d\x6c\x31\x57\x44\x6c\x51\x99\xda\xff\x35\x67\x4a\x33\x9f\xf8\xc9\xfb\x7c\xae\x1d\x27\x04\x04\x35\x95\xaa\xef\xd9\x86\x88\x4c\x05\xae\x11\xc5\x65\xfc\x18\x92\xd3\x08\x80\x79\xd1\x0a\x81\x4c\xbd\xb7\x90\xec\x84\x63\x0c\x8c\xc0\x8d\x40\x59\xf5\xfd\xee\x63\x38\x2c\xe1\x63\x38\x7c\x8b\x3d\x0a\x04\x2e\xe0\xf9\x62\xb1\x88\xf0\xbc\xd6\xbd\xbd\xfd\xb3\x93\x2e\x02\xcc\x7c\x6f\xa8\xe7\xcf\xe9\xed\x9b\xb5\x62\x33\x3b\x7f\xfe\xac\xb2\xfa\x61\xf6\x71\x60\x55\xa6\x80\x72\x7f\xf3\xfa\x92\xcb\x1a\xd2\xca\x13\xcb\x30\x2d\x58\xc1\x99\xeb\xc0\x3a\x3a\xa0\x41\x03\x16\x3d\xd6\xf8\x50\x61\xe0\x2a\xc1\x70\x41\x73\x77\xa5\xc0\xeb\x9a\x48\x99\x26\x1b\xe2\xb0\x44\x24\xa4\x2c\x83\xfd\x9a\x1c\x92\xd1\x5c\x35\xea\x93\x9f\xbb\xa9\xe7\x34\x7a\x51\x00\xe4\x78\xaa\xdf\x1f\xcf\x59\xfb\x88\x1e\xcf\x58\xfc\x69\x63\x6b\xda\xd4\xc4\x5d\x7a\xc6\x21\x58\x5b\xd7\x91\xd2\xdf\xdc\x37\x5c\x9b\x99\x19\xdf\xd1\x02\xa8\x8e\xc8\x8f\x02\x43\x73\x6a\x08\xc9\x96\xa9\xd1\x38\x6e\x5b\xc2\xea\x45\x34\x15\x74\xd5\xb2\x8b\xfd\xe9\xb6\x9c\x0e\x66\x8c\xa6\x6e\xd8\x11\xb5\x4c\x1a\xb6\x4d\xa6\x83\xbd\x0a\xe9\xb6\x52\x4b\xf8\xd7\x62\x31\xdc\xda\xd3\x52\x55\x4b\x78\xfe\x0f\x37\x2b\xf6\x3f\xc7\x6c\x30\x22\xd4\x16\x6e\x62\x74\x3c\x9d\x09\xba\x07\x37\x68\x23\x8a\xaf\x3b\xea\x5c\x36\x35\x55\x69\x32\x4d\xb2\xab\xe7\xd7\x59\x74\x6c\xdd\x6e\xc0\xe5\x15\x53\x46\xbe\x6a\x37\x1b\x14\xe6\x68\x34\x23\xf1\xf4\x77\x14\xf7\xbe\x4a\xa3\x4c\xfd\xdb\x1c\x4a\xd7\xed\x66\x30\x02\xb6\x7e\x04\x2b\x58\x5c\x02\x85\xef\x21\x60\x68\x3a\x66\x88\x07\xb4\x9a\xed\x15\xbd\x86\x95\x25\xd4\x11\xe4\x35\x2f\xf1\xa5\x4a\x69\x06\xdf\xc1\xe2\x7e\xb3\x19\x19\xb7\x1a\x01\x6a\xbe\x76\x80\x5e\xd5\x7c\x9d\x5e\x69\x56\xd7\x53\x78\x30\x7f\xcc\x48\x8c\x55\xcc\xb5\x3e\x8e\x3d\x42\x3f\xf1\x24\x77\xf8\x52\xa6\x9a\xc3\x14\x92\x2d\x9f\x79\xab\xd3\xe4\xf1\x40\xb5\x0b\xba\x7b\xaa\x8a\x0a\x14\x07\xdd\xee\xd8\x48\xf7\xa8\xcd\x69\xd2\x99\xef\xad\x86\xae\x60\x64\x55\xb3\xb5\x29\x32\x92\x2c\x76\x57\x2a\x67\xa4\x50\xf4\xce\x3b\xa4\x8f\x48\x01\xc7\x2c\x70\xdf\x21\xf9\xf9\x0e\x2d\x32\xfa\x11\xe9\x74\xd7\xfc\x85\xd2\x69\xd2\xa7\x95\x2e\xe0\xf8\x17\xa4\xeb\x1b\xfd\x47\xa5\x5b\x13\xf1\x85\xc2\xad\x89\x78\x5a\xd9\x7a\x86\x7f\x41\xb4\x6e\x5a\x70\x46\xb2\xb7\x58\x0a\xb2\x37\xb9\x57\x6f\xea\xfa\xc9\x9a\x38\x08\xd4\x1d\xa4\x11\xd3\xae\x68\x98\x7a\x29\xb5\x05\xe1\x04\xc2\x46\x6c\x72\xcc\x26\xff\x0d\x00\x00\xff\xff\x5c\x6e\x5e\x97\x57\x23\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 9047, mode: os.FileMode(420), modTime: time.Unix(1481042521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

