// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.js
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\x60\x55\xec\x51\xa4\xbd\xa4\x5b\x91\xc9\x06\x86\xac\x03\x06\x6c\xd8\x30\x74\xc3\xfa\x78\x96\x4e\x15\x33\x8a\xd4\xc8\x53\x62\xc3\xf0\x77\x1f\x48\x59\x91\x2c\x4b\xf9\xd3\x18\x49\xfd\x22\x91\xfc\xdd\xbf\xdf\xf1\xcc\xa3\x92\x37\x3f\xfd\x7e\xf5\xf1\xd3\x1f\x1f\x58\x41\xa5\x5a\x9e\x25\xcd\x83\x31\xc6\x92\x02\x21\x6b\x5e\xc3\x90\x24\x29\x5c\x26\xa2\x79\x76\xf3\x25\x12\xb0\xb4\x00\xeb\x90\x16\x51\x4d\x79\xfc\x3e\x62\xa2\x07\x50\x52\xff\xcb\x0a\x8b\xf9\x22\x2a\x88\x2a\x77\x29\x44\x9a\xe9\x6b\xc7\x53\x65\xea\x2c\x57\x60\x91\xa7\xa6\x14\x70\x0d\x6b\xa1\xe4\xca\x89\x55\xad\x4a\x10\x33\xfe\x2d\x3f\x17\xa9\xdb\x8f\x79\x29\x35\x4f\x9d\x8b\x98\x45\xb5\x88\x1c\x6d\x14\xba\x02\x91\xa2\x65\x22\xbc\x8d\x67\x99\xcc\x8d\xa6\x18\x6e\xd1\x99\x12\xc5\x05\xff\x9e\xcf\x82\xe5\xfe\xf4\x53\x1c\x70\xa9\x95\x15\x31\x67\xd3\x47\x7b\x70\xfd\x5f\x8d\x76\x23\xce\xf9\x9c\xcf\xf7\x83\x60\xf1\xda\x79\xfd\x8d\xc2\xe7\x59\x28\x40\x67\x0a\x57\x60\x1d\xbf\x76\xe2\x82\xcf\xf8\x77\xfd\xb9\xd3\x1a\x83\xb5\x34\x4e\xcc\xf8\xfc\x1d\x3f\x6f\x06\x27\x36\xb0\x42\xd0\x62\xce\xbd\x85\xf0\x7e\x62\xf5\x7f\xfd\xf9\x8b\x67\x69\xce\xe7\xef\xf9\x45\x18\x3d\x5d\x3f\xaf\x94\x21\xae\x36\xc2\x3f\xd5\x26\x56\x40\xe8\x68\x42\x51\x22\x9a\x82\x3b\x6b\x46\x2b\x93\x6d\x7a\x16\x32\x79\xc3\x52\x05\xce\x2d\xa2\x02\xad\x61\xd2\xc5\x4a\x7e\x2e\x28\xea\x30\x63\xb8\xd8\xab\x19\x60\x86\xb8\xd4\x68\x02\xa9\xd1\x7a\xa5\xb9\xaa\x65\x36\x22\x10\x84\xde\xc4\x31\xbb\x2a\xc0\x12\xfb\xd1\x22\xb0\x38\x9e\xc0\xf5\x94\xaf\xcc\x7a\x42\xdb\x1d\x52\x66\x8b\xc8\xff\x7f\x0c\x63\x39\x00\x8a\x4c\xde\x4c\x58\x1b\x5f\x1a\x99\x1e\x4c\x0d\x87\x63\x94\x44\x67\x13\x04\x5c\x19\x4d\xd6\x28\x77\x44\x42\xa2\xe1\x4e\x8d\xc2\x1b\x54\x0f\xb0\x1f\x30\xb1\xc2\x7c\x2a\xfc\x63\xb0\x24\x2c\xef\xe3\xaa\xea\x87\x61\x8d\x62\x05\xb8\x18\xb2\xcc\x68\x77\x8f\x58\x10\x95\xba\xaa\x29\x64\x24\x97\x8a\xd0\x46\xad\xaa\xb0\x10\x31\xda\x54\xb8\x88\x08\xd7\x14\xb1\x4a\x41\x8a\x85\x51\x19\xda\x45\xf4\x73\x80\xb3\x12\xc9\xca\xd4\x71\xce\xef\x4d\x66\xf5\xa4\x54\x7e\x19\x0b\xae\x02\xdd\x8b\x04\xb3\x38\x35\xb5\xa6\x68\xf9\x4f\x22\xfc\xda\x92\x99\xbc\x87\xda\x7b\xde\x82\x3e\xed\x41\xcf\xdc\x72\xe3\xae\xdb\x91\xca\xfd\xf2\x40\x9f\x91\x6e\xb8\x2b\xd3\x9a\xc8\xe8\x70\x8c\x53\xbc\x1f\x48\x17\x43\x4a\xf2\x06\xa3\x40\xd0\x8a\x74\xac\xa4\xc6\xf8\xa1\x5a\xbd\xd3\x1e\xb8\x6d\xf7\x4f\xda\x68\x74\x25\xa8\xb1\x92\x18\x55\x20\x5b\xe9\x1c\x58\x0e\x07\xd6\x13\x21\x1f\xe1\xc1\x3d\x39\xec\x30\xf0\x0c\x92\x3a\x6a\xc0\x22\xbc\x1e\x35\x7d\xeb\x5f\x1d\x35\x2b\xb0\xaf\xc7\x4c\xcf\xf8\xcb\x10\xf3\x32\xff\x6e\xc3\xa2\x7f\x62\xa5\x77\xc9\xa9\xa0\x76\xf8\x1a\x89\xd9\x1b\x7e\xd1\xdd\xda\x06\x8d\xeb\xca\x58\x8a\x06\x9c\x3c\x92\x84\xe5\x87\x20\x7d\x6a\x9f\x52\x85\x60\x07\x2e\x79\x8e\x33\xd0\x9f\xd1\x46\xcb\x2b\xbf\x7e\xd2\x9d\x37\xda\x22\x69\x18\x4e\xf9\xa6\xe7\xb7\xe6\x74\x64\xbf\x4a\x47\xc7\x2d\x4f\xdb\xc5\xed\xcf\xd0\x07\xfb\x4d\x55\x97\x93\x67\xd3\x31\xf2\xa1\xfe\xf1\x51\x9d\xe6\x88\x9f\x31\xc1\x4a\x85\x1d\x38\x59\x97\x13\x2c\x3d\xb0\xf4\xf4\xd6\xb3\x7f\x7f\x28\xe1\x9e\x7b\x86\xbf\x73\xf6\x34\xbf\x0d\xff\x6c\x6c\x7b\xe8\xc2\xad\xcc\xa8\xb8\x64\xf3\xd9\xec\x9b\x1f\x0e\x57\x0a\xf4\x9d\xc7\x25\x7b\x37\x9b\x55\xeb\xde\xda\xae\x7b\x25\xcb\xf7\xf4\x58\x73\xcb\x7d\x8d\xa3\xc2\x94\x30\x63\x94\x0d\x0d\x85\xdb\xf1\xed\x5e\xe7\xca\xa8\x6c\x54\x65\x22\x7a\x6e\x27\xa2\xb9\xd8\x34\x03\xbf\xb5\x3e\x62\x59\x85\x8b\xd1\xdd\xbe\x6a\xe9\x18\xa6\x2a\xa6\x3d\xb4\xdf\x87\x8a\x75\xdc\xdd\x61\x3b\x44\xff\xc3\x85\x97\x6d\x77\x49\x33\xf0\x61\x91\x95\x15\x0e\xaf\x3a\x09\x1d\x7e\xf5\xe8\xe6\xed\xc4\x16\xa0\x62\xd9\x14\x47\x22\xa8\x98\xc6\x5c\xd5\xd6\xa2\x26\xf6\x37\xa8\x1a\xc7\xa1\x89\x18\x1a\xf1\xb8\x23\x77\x12\x3a\xbc\x1a\xb6\xbf\xed\xf6\x2d\x42\x5a\xb0\x0c\x08\x76\xbb\xb1\x08\x5a\x0e\xba\xfc\x7a\x21\x99\xb3\x36\xc5\xbb\x5d\x2f\xdf\xdb\xad\x90\xf9\x6e\x37\x55\xa6\x94\xb5\xea\x34\x94\x18\x2d\xb7\x5b\xff\xdc\xed\x12\x41\x23\xfc\x0d\x44\x6e\x3c\x0b\x5e\x26\xbc\x4c\x09\x1d\x13\xd2\xc4\x29\x7c\x9c\x83\x10\x13\x31\x42\x4b\x42\xb9\x31\xf4\x15\x65\xf3\xd0\x9d\x44\x84\xdd\xd8\x16\x46\x5b\xed\x67\x89\x68\xbe\xc2\xfd\x1f\x00\x00\xff\xff\x07\x2e\xe8\x94\x9d\x13\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 5021, mode: os.FileMode(420), modTime: time.Unix(1480974421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\xdd\x6f\x1b\x37\x12\x7f\xf6\xfe\x15\x53\x24\xc0\xee\x3a\xd2\xca\x7d\xb8\x17\xb9\x2a\xd0\xa4\x77\xb8\x00\x2d\x7a\x67\xa7\x4f\x86\x61\x50\xbb\x23\x89\xce\x8a\xdc\x90\x5c\xcb\x6a\xa2\xff\xfd\xc0\xcf\x25\x57\xb2\xd3\x14\xee\xe5\x21\x5e\x91\xf3\xf1\x9b\x0f\xce\x0c\x39\x3b\x3f\xcf\xe0\x1c\xde\x12\x89\x50\xb7\x44\x4a\x58\x71\x01\x7c\x79\x8f\xb5\x92\xb0\xdb\xd0\x7a\x03\x44\x20\xe0\x03\x32\x05\x92\xf7\xa2\x46\x59\x65\x70\x3e\xcb\x2c\xf9\x6f\x4b\x89\xe2\x81\x2c\x5b\x84\xcf\x19\x00\x67\x85\x21\x9d\xc0\x86\xb0\xa6\x45\x51\x9a\x65\x80\x25\x12\x56\x71\x56\xa8\x0d\x95\x13\x18\xd1\x64\x00\x87\x2c\x03\x58\x51\x81\x9e\xbf\xaa\xaa\x86\x28\x92\xf0\x9b\xfd\x44\x82\xa7\x32\x12\x0e\x59\xe6\xec\xf9\x15\x95\xa0\xf5\x35\x2a\x40\x56\x93\x4e\xf6\x2d\x51\x28\x41\x6d\x10\x24\x2a\xe0\x2b\x90\xd8\x62\xad\xb0\x81\xad\x21\x95\xa0\x38\x2c\x11\xd6\x82\x74\x1b\x6c\xb4\x0c\xc2\x1a\xc3\x50\xf3\xd6\x91\x6a\x4d\xc6\x3f\x6a\x43\x94\x25\x8d\x5d\x11\x29\x7d\x54\xc8\x9a\x23\xe7\xcc\xce\xcf\xa1\x23\x42\x7b\x92\x4a\x20\x8e\x41\x02\x65\x52\x11\x56\xa3\xf3\xb7\x36\x30\x12\x66\x48\x65\xbf\x74\xc0\xcf\x67\x19\x40\xcd\x99\x54\xa2\xaf\x15\x17\x85\x95\xe8\xfd\x24\xfb\x0e\x45\x51\x9a\x6f\x2d\xa8\x72\x0a\x17\x4e\xf3\xb0\xe1\x0d\x5f\x00\xc3\x1d\x5c\xa3\x8a\xb9\x8c\xa9\x0b\xf8\x6c\xc2\x92\x48\xd2\x41\xcc\xfb\xae\x21\x0a\xf3\x09\x14\x25\x2c\x7e\x74\xaa\x01\x66\x33\x78\x47\x3a\xd5\x0b\x34\xbe\xea\x38\x65\xca\x66\x14\x61\xfb\x23\x97\x3b\x26\xbd\x5d\xb4\xa8\x80\x91\x2d\x6a\x0b\x63\x74\x65\x90\xed\x40\x48\xc5\x05\xde\x19\xc9\x85\x66\x28\xdd\xb6\x03\xea\xa8\x4c\xa2\x0c\x28\xf5\x9a\x25\x3c\x94\x91\x41\xa7\x2c\x49\x4c\x15\xc8\x1a\xed\x4d\x38\x40\xc8\x51\xd2\x34\x85\x05\xe7\xb1\xd1\x15\x14\xdf\x19\xb6\x0d\x91\x7e\x6f\x00\x1e\x9b\x53\x45\xdc\xd9\x13\x56\x9d\xd8\xb6\xe6\x90\xa6\xc9\x27\xf0\xe4\xb6\xb3\xc4\xd9\xe9\xe1\x0a\xdc\xf2\x07\x3c\x81\xf8\x4f\x02\x6e\xb0\x45\x85\x23\x50\x76\x71\xc8\x94\x1b\xbb\x7d\x7b\x0c\xca\xaa\xff\x76\xd8\x8a\xaf\xd7\xed\x5f\x80\x9d\x9a\x6b\x65\x02\xb6\x12\x53\xb2\x71\x18\x82\xde\xba\x45\xa2\x03\xfe\xf9\xe8\x9c\x54\x6e\xeb\xd4\x19\x19\x99\x64\x28\xf3\x72\xbc\x1c\x59\x6a\x74\x45\x56\x38\x7d\x02\x55\x2f\x58\xaa\x36\xa2\xf2\x8c\x27\xb2\xc5\x09\xd0\xc7\xc8\x9d\xba\xc5\x71\x78\xe0\xcb\x17\xb8\xb1\x41\xb2\x44\x55\xd7\xcb\x4d\x11\x3c\x43\xb7\x28\x15\xd9\x76\xf3\xe4\x10\x84\xe5\x89\xa3\x7b\x20\x6d\x8f\x29\x8d\x03\x9b\xe4\xc1\x61\xe4\xaa\x80\x62\xe1\xb4\x7b\x73\xba\x96\xab\x76\x7f\xa7\x69\x8a\x91\x27\x7e\x33\x8d\xa8\xfa\x88\x7b\x59\x04\x41\x65\xb5\x25\x9d\x39\xfc\x71\xed\xd1\xa6\x0b\xb2\x4b\xec\xd6\x34\x3e\x29\x9d\xc4\xa1\x9c\x3c\xce\x35\xbd\x91\x65\xf0\x68\x61\xe6\x63\xb0\xb8\x9c\x04\xea\xfd\x93\xd4\xc6\x1d\x11\xa5\xda\x77\x38\x87\x5c\xd6\x44\x29\x14\xf9\xb0\xa1\xd1\xcc\xcd\xff\xa1\x66\x05\x3f\x1d\x37\x2f\xf9\x64\xeb\x22\x6d\x1b\xba\x96\x6b\x52\x54\xc0\x96\x4b\x05\x02\x6b\x53\xe3\xcf\x6d\x90\xe4\x04\x56\xa8\xea\x0d\x36\xb0\x12\x7c\x6b\x84\xcc\x1a\x5c\xf6\xeb\xd9\x36\x28\x69\xac\x19\x47\x8d\x4c\x3e\xd5\xc6\xe2\xe6\xf3\x64\xdb\x19\xba\x4b\x7c\x3e\xb4\xf1\x7a\xcd\x65\xa1\x59\x0b\xde\xd6\x9d\xa8\x6f\xdb\xa8\xe1\xa0\xa0\xbc\x81\x05\xfc\xe3\xe2\xe2\x22\x3e\x4d\xad\x42\x31\x50\x9b\x24\x32\xf6\x7e\xfd\x38\x45\x19\x6a\xd8\xec\x99\x0c\x66\x90\x47\xca\x65\xb5\x46\x55\xe4\xa9\x9f\x72\x5f\xb9\x2a\xb5\x41\x56\x14\x42\x76\x49\xe7\x3b\xb2\x5a\xc8\xce\xe4\x60\x95\x36\xbb\x91\x1f\x8e\xf2\xdb\xb7\xbd\x94\x3c\x71\x11\xee\xe0\x67\x83\xd9\x67\xd1\x08\xda\x29\x5c\xbe\x91\xa5\xab\x4f\x76\xc9\x90\x94\xa6\xd8\x10\xa1\x86\x38\x2b\xde\xc5\x61\xa6\x4c\xe9\xd4\x68\x61\x01\x3b\xca\x1a\xbe\xab\x24\xaa\xf7\x6e\xd1\x61\x31\x84\xde\xd1\x93\x38\xb4\x71\x45\xeb\x8a\xa3\x32\xef\x85\x0f\x35\xde\xe9\x30\x05\x36\x68\x49\x69\xe3\x32\x1f\xa1\x0b\x99\x15\x4a\x3d\x95\x77\xa2\x67\x8c\xb2\xf5\xb8\xea\xbc\xe5\xbc\x45\xc2\x8e\x05\x5b\xac\xa8\xfe\x65\x32\xb0\xb0\x89\x98\x34\x8b\x90\x9b\xf6\x23\x3b\x1d\x01\x89\xea\xae\x17\x6d\x51\x0e\x5d\xda\x0d\x1a\x43\x19\x17\xe8\x82\x7d\x85\xeb\x7f\x3e\x76\x45\x2c\xfe\xcb\x17\xc8\xab\x73\x97\x93\x9a\x78\xc8\xbb\x21\xbd\x4e\x56\xc9\x13\x75\x30\x2e\x4c\x93\x68\x35\x2e\xf3\xf6\x74\x99\x79\x2b\x26\xf1\x13\xdd\x5c\x67\x24\xa9\xfc\x4f\xd3\xb3\xe2\xe1\xcc\x97\x3a\x9d\x57\xce\x06\x77\x54\x35\x36\x81\x15\x3e\x62\xed\x56\x0c\xf8\xd2\x8d\x69\xaf\x8b\xfc\x95\xb3\x6d\x5a\xf3\x9e\xa9\xbc\xac\x14\x3e\xaa\x22\x32\xb3\x45\xb6\x56\x9b\x32\xd0\x5b\xf9\xd8\xa4\x0c\xbe\x9d\x7a\xea\x91\xf8\xa9\xd2\xe5\x2d\x2f\xab\x8d\xda\xb6\x85\xc2\x6d\x67\xca\xae\x3b\x8f\x77\x66\xf7\xce\x2f\x87\x8e\xa9\x0f\xf8\x3c\x19\x67\x0f\x1e\xb9\x8e\x0a\x65\x5d\xaf\x27\xef\x01\x95\x0b\x99\xce\x70\xb3\xa9\x1d\x5b\x94\xf0\xdd\x22\xce\x9e\x21\xdd\x07\x9a\x78\x3b\x4a\x63\xd3\x34\x60\xfa\x22\xff\xb4\xd8\xff\xb4\x5c\x29\xca\xd6\xfa\xfb\x65\xa4\xea\xae\x92\xad\x7a\x56\x2b\xca\x99\x69\xf5\x77\x2d\x65\x78\x57\x6f\x86\xb2\xa2\x7d\xe5\x86\xa9\x34\x8f\x92\xc9\x20\xb3\xf0\xda\x7d\xc5\x70\xa7\xbf\x8a\xdc\x08\xc9\x27\x86\x79\x02\x9f\x0f\x13\xcb\xcf\x3b\xad\x4c\x3a\x76\xcd\x68\x96\xf5\x4f\x17\x0d\xcb\x58\xde\x5c\xdc\x6a\x17\xa6\xf0\x88\x40\x72\x04\x4f\x2a\x52\x7f\xc4\xe6\x27\x81\x1a\xa5\x67\x28\x94\x20\x35\x86\x4b\x8a\xfd\x75\x73\x71\xab\x23\xa5\x8b\x4e\xae\xf8\x1f\x28\xf8\x3e\xcf\xce\x56\x5c\x14\x0f\x44\x00\x5d\x7c\x7f\x09\xf4\x07\x4b\xea\xb2\xf1\x12\xe8\x9b\x37\xd1\x20\x6b\xc5\xd0\x58\x0c\xc3\x47\xa5\xc5\x98\xeb\x92\x11\x74\xbf\xb8\xb8\x84\xfb\x1f\x8a\x5f\x89\xda\x54\x5b\xea\xb1\xdc\xd0\xdb\x9b\x7c\x9f\xdf\x3a\xd1\x93\x20\x6d\xfa\x7d\xb2\x51\x96\x97\x70\x6f\xb5\x9e\x9d\xa5\xac\x37\xf7\xb7\xf0\x66\x71\xc4\x78\x73\x7f\x7b\xa9\x01\x1c\xb2\xb3\x43\x76\xe6\x7b\xab\x21\xba\xcc\x6c\x42\x46\x81\x8c\x1c\x56\x3c\x13\xd4\xff\x5b\x54\x97\x44\xfc\xb5\x9c\x0b\xd7\x53\x89\x82\xa2\xd4\x03\x58\xfc\x2e\x61\x57\x2b\x3d\xf4\xe9\x48\x2d\x89\xc8\x9d\x33\xfe\x26\xb3\x74\xec\x8d\x45\x2b\xa6\x27\xe9\xf4\x40\x8d\xac\x76\xb6\x3a\xf2\xa2\x7c\xf1\x7a\xf1\xfb\xd5\x2f\xf0\x6f\xc2\x9a\xf6\x6f\xac\x19\xa1\x59\x86\xb8\xf5\xae\x33\xfe\x7e\xf5\xde\x84\xa8\x77\xd7\xbe\xff\xf6\x28\xf6\x45\x6e\xeb\x71\x7e\x62\x27\x2a\xc2\xba\x04\xa7\x81\xf7\x1d\x42\xd2\x3f\x10\x7e\x84\x0b\x1f\xe1\x5e\xdf\x16\x53\xd1\x13\xf8\x49\x08\xb2\xaf\xf4\x50\xfd\x84\x14\x3b\x7f\x17\x65\x59\xba\x74\x08\x0a\x3d\x45\x5a\xec\x63\x2d\x0e\xa6\x4b\x90\x11\xbd\x13\xb7\xa1\xfa\x16\xb8\x37\x37\xb8\x6b\x65\x9a\xd2\x61\x02\x79\x3e\x81\xbe\x52\xfc\x5a\x09\x33\xd7\x94\xe9\x41\x20\x42\xe2\xc8\x97\x9f\x62\x5f\x56\x9f\x0c\x00\x25\x7a\xf4\x3e\xfa\x54\x9d\xb8\x83\xef\x3b\xe4\xab\x68\x6b\xb1\x80\x5c\x1a\x95\xf9\x50\xc6\x52\xbf\xe8\x1b\x77\x60\x38\x75\x2f\x0f\xe7\xcc\x0d\x06\x7c\x05\x63\xdd\xa7\xa5\xa6\x2f\x0b\x87\xa8\x3b\x7a\x0b\x52\x4f\x27\x4e\x1d\x86\xb9\x4f\x89\x83\x63\xb7\x51\x46\xfd\x49\x0a\x83\x81\xbe\xd7\x18\x69\x27\x07\x84\xb9\x3d\x14\xb8\x24\x42\x56\x35\xdf\x76\xb4\xc5\x62\x3c\x6c\x4c\x3d\xb5\x9f\x3a\x42\xaa\xfc\xec\x1e\x16\x8c\x02\x57\x1f\xe6\xc1\x07\xb6\x50\xcc\x23\x9f\xc8\x0d\xdf\xfd\x42\xd9\xc7\x39\xac\x48\x2b\xa3\x21\x6e\xcb\x1b\x7c\x4b\xc4\xdb\x5e\x29\xce\xe4\x07\x7e\x65\x0e\xc3\x1c\x6e\x72\xc5\xdf\x6f\xc9\x5a\x4f\xfd\xb9\x44\xd6\x68\x8d\x1f\xf8\xbb\x96\xf7\x4d\x7e\x3b\xf0\x37\x54\x76\x2d\xd9\xb7\x7c\xcd\x9d\xec\xd4\xcb\x93\xc8\x05\x72\x6e\xf2\xc8\xdd\x1d\x8b\xd8\x96\x10\x2f\x97\x6b\xe1\x6d\x33\x39\x10\xe5\x98\x3a\x7d\x9f\xd3\x66\x7f\x85\xc4\x55\x8a\x40\xe5\x83\xec\xef\x1e\xe3\x75\x77\xb5\xd1\xc1\x7e\x5d\x34\xbc\xee\xb7\xc8\x54\x59\x09\x24\xcd\x3e\xba\x47\xd9\xf8\xeb\xb1\x6e\x36\x83\x0f\xe6\x61\x2a\x0c\xdc\xbb\x0d\x32\xa8\x5b\x5a\x7f\xa4\x6c\x0d\x5c\x5f\x36\x71\x0b\xd4\xfc\x1d\x9e\x96\x75\xb8\x33\x3d\x6e\x0e\x4a\x34\x70\xc3\xa7\x43\xa0\x84\xc3\x34\x15\x7c\x07\xaa\x31\x93\x6d\x3e\x81\x02\xa3\xcb\x5c\x6a\xb8\x7b\x20\xc3\x4a\x11\xb1\x46\x65\x86\xdc\x77\x9c\x29\x2d\x3c\xf3\xef\x9c\xb3\x19\x5c\xa3\x32\x58\xdc\xcd\xc1\xa4\xb3\x9e\x4a\x15\x37\xcb\x9a\x0d\x96\xfc\xf1\x04\x3a\x43\xa7\xd1\xbd\x0a\xf5\xe8\x18\xcf\xf1\x39\xc2\xaa\xee\x85\x40\xa6\x3e\x58\x60\xf6\x79\x24\x86\x64\xd3\xd1\x3f\xfe\xcb\xec\x39\xcf\xbc\x5a\x2a\x36\xb5\xef\x69\xcf\xba\x63\x78\x9c\xb3\x6a\x9e\x17\xd8\x91\x5e\x1e\xf9\xd7\x4c\xec\x35\x67\xae\xeb\x06\x3a\xa0\xd1\xd4\x9e\x18\x1d\xdf\x20\x47\x75\x6f\x48\xb1\x70\x5f\x06\x23\xdd\x35\xa4\x77\x2d\x91\xb2\xc8\x57\xc4\x61\x49\x48\x48\xd3\x44\xfb\x2d\xd9\xe7\x27\x2b\xe6\xc9\x5c\x7e\x4e\xd3\x20\xe9\xa4\xa2\x08\xc8\xe1\x4f\x3a\x52\x4f\x1e\x53\x3f\xd8\x24\xde\x7c\x5d\xe4\x95\xd9\x98\x2e\x4d\xb8\xf3\x32\xc5\x43\xe5\x94\xd4\x8a\x3e\x78\x8d\xde\xe5\x91\xc4\x32\xc2\x37\x26\x7f\x7a\x02\xf2\xbb\x3e\x19\xbe\x66\x82\x1e\xf7\x5f\xd6\x84\x48\xe2\x37\x98\x30\x5c\x3b\xbe\xd9\x84\x25\x11\x2f\x6b\xc1\x20\xf0\x1b\x0c\x08\x13\xf6\x11\x7e\x7b\xec\xaf\xb0\x11\x64\x67\xaa\x8e\x19\x6e\x39\x73\xcf\x39\x20\x50\xcf\x5c\xc6\x4c\xbb\xa2\x61\xea\xa5\xc2\x16\x7d\x3d\xc2\x0e\xa3\x4b\x76\x28\xb3\xff\x05\x00\x00\xff\xff\x30\xa2\xde\x16\xb7\x1c\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 7351, mode: os.FileMode(420), modTime: time.Unix(1480975928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

