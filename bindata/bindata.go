// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.js
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\x60\x55\xec\x51\xa4\xbd\xa4\x5b\x91\xc9\x06\x86\xac\x03\x06\x6c\xd8\x30\x74\xc3\xfa\x78\x96\x4e\x15\x33\x8a\xd4\xc8\x53\x62\xc3\xf0\x77\x1f\x48\x59\x91\x2c\x4b\xf9\xd3\x18\x49\xfd\x22\x91\xfc\xdd\xbf\xdf\xf1\xcc\xa3\x92\x37\x3f\xfd\x7e\xf5\xf1\xd3\x1f\x1f\x58\x41\xa5\x5a\x9e\x25\xcd\x83\x31\xc6\x92\x02\x21\x6b\x5e\xc3\x90\x24\x29\x5c\x26\xa2\x79\x76\xf3\x25\x12\xb0\xb4\x00\xeb\x90\x16\x51\x4d\x79\xfc\x3e\x62\xa2\x07\x50\x52\xff\xcb\x0a\x8b\xf9\x22\x2a\x88\x2a\x77\x29\x44\x9a\xe9\x6b\xc7\x53\x65\xea\x2c\x57\x60\x91\xa7\xa6\x14\x70\x0d\x6b\xa1\xe4\xca\x89\x55\xad\x4a\x10\x33\xfe\x2d\x3f\x17\xa9\xdb\x8f\x79\x29\x35\x4f\x9d\x8b\x98\x45\xb5\x88\x1c\x6d\x14\xba\x02\x91\xa2\x65\x22\xbc\x8d\x67\x99\xcc\x8d\xa6\x18\x6e\xd1\x99\x12\xc5\x05\xff\x9e\xcf\x82\xe5\xfe\xf4\x53\x1c\x70\xa9\x95\x15\x31\x67\xd3\x47\x7b\x70\xfd\x5f\x8d\x76\x23\xce\xf9\x9c\xcf\xf7\x83\x60\xf1\xda\x79\xfd\x8d\xc2\xe7\x59\x28\x40\x67\x0a\x57\x60\x1d\xbf\x76\xe2\x82\xcf\xf8\x77\xfd\xb9\xd3\x1a\x83\xb5\x34\x4e\xcc\xf8\xfc\x1d\x3f\x6f\x06\x27\x36\xb0\x42\xd0\x62\xce\xbd\x85\xf0\x7e\x62\xf5\x7f\xfd\xf9\x8b\x67\x69\xce\xe7\xef\xf9\x45\x18\x3d\x5d\x3f\xaf\x94\x21\xae\x36\xc2\x3f\xd5\x26\x56\x40\xe8\x68\x42\x51\x22\x9a\x82\x3b\x6b\x46\x2b\x93\x6d\x7a\x16\x32\x79\xc3\x52\x05\xce\x2d\xa2\x02\xad\x61\xd2\xc5\x4a\x7e\x2e\x28\xea\x30\x63\xb8\xd8\xab\x19\x60\x86\xb8\xd4\x68\x02\xa9\xd1\x7a\xa5\xb9\xaa\x65\x36\x22\x10\x84\xde\xc4\x31\xbb\x2a\xc0\x12\xfb\xd1\x22\xb0\x38\x9e\xc0\xf5\x94\xaf\xcc\x7a\x42\xdb\x1d\x52\x66\x8b\xc8\xff\x7f\x0c\x63\x39\x00\x8a\x4c\xde\x4c\x58\x1b\x5f\x1a\x99\x1e\x4c\x0d\x87\x63\x94\x44\x67\x13\x04\x5c\x19\x4d\xd6\x28\x77\x44\x42\xa2\xe1\x4e\x8d\xc2\x1b\x54\x0f\xb0\x1f\x30\xb1\xc2\x7c\x2a\xfc\x63\xb0\x24\x2c\xef\xe3\xaa\xea\x87\x61\x8d\x62\x05\xb8\x18\xb2\xcc\x68\x77\x8f\x58\x10\x95\xba\xaa\x29\x64\x24\x97\x8a\xd0\x46\xad\xaa\xb0\x10\x31\xda\x54\xb8\x88\x08\xd7\x14\xb1\x4a\x41\x8a\x85\x51\x19\xda\x45\xf4\x73\x80\xb3\x12\xc9\xca\xd4\x71\xce\xef\x4d\x66\xf5\xa4\x54\x7e\x19\x0b\xae\x02\xdd\x8b\x04\xb3\x38\x35\xb5\xa6\x68\xf9\x4f\x22\xfc\xda\x92\x99\xbc\x87\xda\x7b\xde\x82\x3e\xed\x41\xcf\xdc\x72\xe3\xae\xdb\x91\xca\xfd\xf2\x40\x9f\x91\x6e\xb8\x2b\xd3\x9a\xc8\xe8\x70\x8c\x53\xbc\x1f\x48\x17\x43\x4a\xf2\x06\xa3\x40\xd0\x8a\x74\xac\xa4\xc6\xf8\xa1\x5a\xbd\xd3\x1e\xb8\x6d\xf7\x4f\xda\x68\x74\x25\xa8\xb1\x92\x18\x55\x20\x5b\xe9\x1c\x58\x0e\x07\xd6\x13\x21\x1f\xe1\xc1\x3d\x39\xec\x30\xf0\x0c\x92\x3a\x6a\xc0\x22\xbc\x1e\x35\x7d\xeb\x5f\x1d\x35\x2b\xb0\xaf\xc7\x4c\xcf\xf8\xcb\x10\xf3\x32\xff\x6e\xc3\xa2\x7f\x62\xa5\x77\xc9\xa9\xa0\x76\xf8\x1a\x89\xd9\x1b\x7e\xd1\xdd\xda\x06\x8d\xeb\xca\x58\x8a\x06\x9c\x3c\x92\x84\xe5\x87\x20\x7d\x6a\x9f\x52\x85\x60\x07\x2e\x79\x8e\x33\xd0\x9f\xd1\x46\xcb\x2b\xbf\x7e\xd2\x9d\x37\xda\x22\x69\x18\x4e\xf9\xa6\xe7\xb7\xe6\x74\x64\xbf\x4a\x47\xc7\x2d\x4f\xdb\xc5\xed\xcf\xd0\x07\xfb\x4d\x55\x97\x93\x67\xd3\x31\xf2\xa1\xfe\xf1\x51\x9d\xe6\x88\x9f\x31\xc1\x4a\x85\x1d\x38\x59\x97\x13\x2c\x3d\xb0\xf4\xf4\xd6\xb3\x7f\x7f\x28\xe1\x9e\x7b\x86\xbf\x73\xf6\x34\xbf\x0d\xff\x6c\x6c\x7b\xe8\xc2\xad\xcc\xa8\xb8\x64\xf3\xd9\xec\x9b\x1f\x0e\x57\x0a\xf4\x9d\xc7\x25\x7b\x37\x9b\x55\xeb\xde\xda\xae\x7b\x25\xcb\xf7\xf4\x58\x73\xcb\x7d\x8d\xa3\xc2\x94\x30\x63\x94\x0d\x0d\x85\xdb\xf1\xed\x5e\xe7\xca\xa8\x6c\x54\x65\x22\x7a\x6e\x27\xa2\xb9\xd8\x34\x03\xbf\xb5\x3e\x62\x59\x85\x8b\xd1\xdd\xbe\x6a\xe9\x18\xa6\x2a\xa6\x3d\xb4\xdf\x87\x8a\x75\xdc\xdd\x61\x3b\x44\xff\xc3\x85\x97\x6d\x77\x49\x33\xf0\x61\x91\x95\x15\x0e\xaf\x3a\x09\x1d\x7e\xf5\xe8\xe6\xed\xc4\x16\xa0\x62\xd9\x14\x47\x22\xa8\x98\xc6\x5c\xd5\xd6\xa2\x26\xf6\x37\xa8\x1a\xc7\xa1\x89\x18\x1a\xf1\xb8\x23\x77\x12\x3a\xbc\x1a\xb6\xbf\xed\xf6\x2d\x42\x5a\xb0\x0c\x08\x76\xbb\xb1\x08\x5a\x0e\xba\xfc\x7a\x21\x99\xb3\x36\xc5\xbb\x5d\x2f\xdf\xdb\xad\x90\xf9\x6e\x37\x55\xa6\x94\xb5\xea\x34\x94\x18\x2d\xb7\x5b\xff\xdc\xed\x12\x41\x23\xfc\x0d\x44\x6e\x3c\x0b\x5e\x26\xbc\x4c\x09\x1d\x13\xd2\xc4\x29\x7c\x9c\x83\x10\x13\x31\x42\x4b\x42\xb9\x31\xf4\x15\x65\xf3\xd0\x9d\x44\x84\xdd\xd8\x16\x46\x5b\xed\x67\x89\x68\xbe\xc2\xfd\x1f\x00\x00\xff\xff\x07\x2e\xe8\x94\x9d\x13\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 5021, mode: os.FileMode(420), modTime: time.Unix(1480974421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x59\x5d\x73\xdb\xb6\xd2\xbe\x0e\x7f\xc5\x76\x92\x79\x49\x3a\x32\xe5\x5e\xbc\x37\x72\x95\x99\x26\xcd\x99\x66\xa6\x9d\x9e\x93\xa4\x57\x1e\x8f\x07\x22\x57\x12\x1d\x0a\x60\x00\xd0\xb2\x9a\xe8\xbf\x9f\xc1\xe2\x83\x80\x24\x27\x4d\xc7\x39\xb9\x70\x68\x60\xb1\xfb\xec\xf7\x02\x9e\x9e\x9d\x65\x70\x06\x2f\x99\x42\xa8\x3b\xa6\x14\x2c\x85\x04\xb1\xb8\xc5\x5a\x2b\xd8\xae\xdb\x7a\x0d\x4c\x22\xe0\x1d\x72\x0d\x4a\x0c\xb2\x46\x55\x65\x70\x36\xcd\x2c\xf9\x1f\x0b\x85\xf2\x8e\x2d\x3a\x84\x4f\x19\x80\xe0\x05\x91\x4e\x60\xcd\x78\xd3\xa1\x2c\x69\x19\x60\x81\x8c\x57\x82\x17\x7a\xdd\xaa\x09\x1c\xd0\x64\x00\xfb\x2c\x03\x58\xb6\x12\xfd\xf9\xaa\xaa\x1a\xa6\x59\x72\x9e\xf6\x13\x0e\x9e\x8a\x38\xec\xb3\xcc\xe9\xf3\x3b\x6a\xd9\xd6\xef\x50\x03\xf2\x9a\xf5\x6a\xe8\x98\x46\x05\x7a\x8d\xa0\x50\x83\x58\x82\xc2\x0e\x6b\x8d\x0d\x6c\x88\x54\x81\x16\xb0\x40\x58\x49\xd6\xaf\xb1\x31\x3c\x18\x6f\xe8\x40\x2d\x3a\x47\x6a\x24\x91\x7d\xf4\x9a\x69\x4b\x1a\x9b\x22\x12\x7a\xaf\x91\x37\x47\xc6\x99\x9e\x9d\x41\xcf\xa4\xb1\x64\xab\x80\xb9\x03\x0a\x5a\xae\x34\xe3\x35\x3a\x7b\x1b\x05\x23\x66\x44\xaa\x86\x85\x03\x7e\x36\xcd\x00\x6a\xc1\x95\x96\x43\xad\x85\x2c\x2c\x47\x6f\x27\x35\xf4\x28\x8b\x92\xbe\x0d\xa3\xca\x09\x9c\x3b\xc9\xe3\x86\x57\x7c\x0e\x1c\xb7\xf0\x0e\x75\x7c\x8a\x54\x9d\xc3\x27\x72\x4b\xc2\xc9\x38\x31\x1f\xfa\x86\x69\xcc\x27\x50\x94\x30\x7f\xe1\x44\x03\x4c\xa7\xf0\x8a\xf5\x7a\x90\x48\xb6\xea\x45\xcb\xb5\x8d\x28\xc6\x77\x47\x26\x77\x87\xcc\x76\xd1\xa1\x06\xce\x36\x68\x34\x8c\xd1\x95\x81\xb7\x03\xa1\xb4\x90\x78\x43\x9c\x0b\x73\xa0\x74\xdb\x0e\xa8\xa3\xa2\x40\x19\x51\x9a\x35\x4b\xb8\x2f\x23\x85\x4e\x69\x92\xa8\x2a\x91\x37\xc6\x9a\xb0\x87\x10\xa3\xac\x69\x0a\x0b\xce\x63\x6b\x97\x50\xfc\x40\xc7\xd6\x4c\xf9\xbd\x11\x78\xac\x4e\x15\x9d\xce\x1e\xd0\xea\xc4\xb6\x55\x87\x35\x4d\x3e\x81\x07\xb7\x9d\x26\x4e\x4f\x0f\x57\xe2\x46\xdc\xe1\x09\xc4\x7f\x13\x70\x83\x1d\x6a\x3c\x00\x65\x17\xc7\x48\xb9\xb2\xdb\xd7\xc7\xa0\xac\xf8\x6f\x87\xad\xc5\x6a\xd5\xfd\x03\xd8\xa9\xba\x96\x27\x60\xa7\x30\x25\x3b\x74\x43\x90\x5b\x77\xc8\x8c\xc3\x3f\x1d\xe5\x49\xe5\xb6\x4e\xe5\xc8\x81\x4a\x44\x99\x97\x87\xcb\x91\xa6\x24\x2b\xd2\xc2\xc9\x93\xa8\x07\xc9\x53\xb1\x11\x95\x3f\x78\x22\x5a\x1c\x03\x93\x46\x2e\xeb\xe6\xc7\xee\x81\xcf\x9f\xe1\xca\x3a\xc9\x12\x55\xfd\xa0\xd6\x45\xb0\x4c\xbb\x41\xa5\xd9\xa6\x9f\x25\x49\x10\x96\x27\x8e\xee\x8e\x75\x03\xa6\x34\x0e\x6c\x12\x07\xfb\x03\x53\x05\x14\x73\x27\xdd\xab\xd3\x77\x42\x77\xbb\x1b\x43\x53\x1c\x58\xe2\x0f\x6a\x44\xd5\x07\xdc\xa9\x22\x30\x2a\xab\x0d\xeb\x29\xf9\xe3\xda\x63\x54\x97\x6c\x9b\xe8\x6d\x68\x7c\x50\x3a\x8e\x63\x39\xb9\x9f\x19\x7a\xe2\x45\x78\x0c\x33\xfa\x18\x35\x2e\x27\x81\x7a\xf7\x20\x35\x99\x23\xa2\xd4\xbb\x1e\x67\x90\xab\x9a\x69\x8d\x32\x1f\x37\x0c\x9a\x19\xfd\x0c\x35\x2b\xd8\xe9\xb8\x79\xa9\x07\x5b\x17\xeb\xba\xd0\xb5\x5c\x93\x6a\x25\x6c\x84\xd2\x20\xb1\xa6\x1a\x7f\x66\x9d\xa4\x26\xb0\x44\x5d\xaf\xb1\x81\xa5\x14\x1b\x62\x32\x6d\x70\x31\xac\xa6\x9b\x20\xa4\xb1\x6a\x1c\x35\x32\xf5\x50\x1b\x8b\x9b\xcf\x83\x6d\x67\xec\x2e\x71\x7e\x18\xe5\xcd\x9a\x8b\x42\x5a\x0b\xd6\x36\x9d\x68\xe8\xba\xa8\xe1\xa0\x6c\x45\x03\x73\xf8\xff\x8b\x8b\x8b\x38\x9b\x3a\x8d\x72\xa4\xa6\x20\x22\x7d\xbf\x9e\x4e\x51\x84\xd2\x31\x9b\x93\x41\x0d\x76\xdf\x0a\x55\xad\x50\x17\x79\x6a\xa7\xdc\x57\xae\x4a\xaf\x91\x17\x85\x54\x7d\xd2\xf9\x8e\xb4\x96\xaa\xa7\x18\xac\xd2\x66\x77\x4a\x67\xdc\xc2\x2f\x04\x22\xd0\x84\x96\xa8\x34\x23\x97\xc7\x79\x10\x71\xde\x98\x7d\x55\xc6\x4d\xd2\x26\x02\x59\x23\x45\x61\x69\xaf\xcc\xcf\xeb\x88\x9a\x6a\xea\xae\x47\xb1\x2c\x6c\x20\xc3\x7c\x0e\x39\x1f\x36\x0b\x94\x79\xca\xd8\xb2\xb6\x79\x07\xf9\x4a\x04\xa6\x55\x0e\xcf\x09\x6a\x42\x9c\x98\x9d\x32\x11\xe6\x16\x58\x44\xb6\xcf\x8e\xbf\x92\x48\x39\xaa\x00\x7e\x30\xf0\x39\x74\xe0\x98\x53\x5e\xf1\x6d\x3c\x5d\x7d\x70\x46\x08\x29\x49\xa5\x96\x49\x3d\x46\xb9\x16\x7d\x1c\xe4\x2d\xd7\x26\x31\x3a\x98\xc3\xb6\xe5\x8d\xd8\x56\x0a\xf5\x1b\xb7\xe8\xb0\x10\xa1\x0f\xb3\x49\x1c\xd8\x71\x3d\xef\x8b\xa3\x26\xe7\x99\x8f\x4e\x70\x32\xa8\xbd\x04\x29\x29\x6d\xdc\xe4\x22\x74\x21\xaf\x42\xa3\x6b\xd5\x8d\x1c\x38\x6f\xf9\xea\xb0\xe6\xbe\x14\xa2\x43\xc6\x8f\x19\x5b\xac\xa8\xff\x45\xf9\x57\xd8\x34\x4c\x5a\x65\xc8\x4c\xfb\x91\x9d\xf6\x80\x42\x7d\x33\xc8\xae\x28\xc7\x19\xc5\x8d\x59\x63\x13\x93\xe8\x32\xe3\x2d\xae\x5e\xdf\xf7\x45\xcc\xfe\xf3\x67\xc8\xab\x33\x97\x91\x86\x78\xcc\xba\x31\x74\x4e\xf6\x88\x13\x5d\x20\x2e\xcb\x93\x68\x35\x6e\x72\xb6\xb6\xd0\xb4\x19\x93\xf8\x79\x76\x66\xd2\x97\x55\xfe\x57\xea\xd8\xf1\x68\x3a\xc6\xf6\xbe\x74\x3a\xb8\x42\x65\xb0\x49\xac\xf0\x1e\x6b\xb7\x42\xe0\x4b\x37\xa4\x3e\x2b\xf2\xa7\x4e\xb7\xf3\x5a\x0c\x5c\xe7\x65\xa5\xf1\x5e\x17\x91\x9a\x1d\xf2\x95\x5e\x97\x81\xde\xf2\xc7\x26\x3d\xe0\x87\x09\x4f\x7d\xc0\xfe\x5c\x9b\xe2\x9e\x97\xd5\x5a\x6f\xba\x42\xe3\xa6\xa7\xa6\xe3\x72\xed\x86\x76\x6f\xfc\x72\x98\x17\x4c\x61\x99\x25\xc3\xfc\xde\x23\x37\x5e\x69\x79\x3f\x98\x7b\xc7\x88\xca\xb9\xcc\x44\x38\x6d\x1a\xc3\x16\x25\xfc\x30\x8f\xa3\x67\x0c\xf7\x91\x26\xde\x8e\xc2\x98\x5a\x26\x9c\x3f\xca\x3f\xc3\xf6\xdf\x9d\xd0\xba\xe5\x2b\xf3\xfd\x38\x5c\x4d\x4f\xcd\x96\x03\xaf\x75\x2b\x38\x0d\x3a\x37\x5d\xcb\xf1\xa6\x5e\x8f\x65\xc5\xd8\xca\x8d\x92\x69\x1c\x25\x73\x51\x66\xe1\x75\xbb\x8a\xe3\xd6\x7c\x15\x39\x31\xc9\x27\x74\x78\x02\x9f\xf6\x13\x7b\x5e\xf4\x46\x98\x72\xc7\xcd\x41\x5a\x36\xbf\x3a\x6f\xd8\x83\xe5\xd5\xc5\xb5\x31\x61\x0a\x8f\x49\x64\x47\xf0\x94\x66\xf5\x07\x6c\x7e\x96\x68\x50\xfa\x03\x85\x96\xac\xc6\x70\x45\xb3\xbf\x5d\x5d\x5c\x1b\x4f\x99\xa2\x93\x6b\xf1\x17\x4a\xb1\xcb\xa3\xed\x6a\x29\xe4\x6b\x56\xaf\x0b\x85\xb2\x35\x05\xfe\x05\x7c\xb2\x9f\xd5\xae\x92\x78\x87\x52\x61\x51\x5e\x82\x5b\xbb\x1f\xd7\x4c\x51\x7e\xb2\x14\xb2\xb8\x63\x12\xda\xf9\x8f\x97\xd0\xfe\xe4\x78\xda\xa8\xbe\x84\xf6\xf9\xf3\xe8\x3a\x60\xe1\xb4\x31\x1c\x8e\xf7\x7a\x97\x67\x4f\xa8\xc3\x12\xa3\xdb\xf9\xc5\x25\xdc\xfe\x54\xfc\xce\xf4\xba\xda\xb4\x5e\xa7\xab\xf6\xfa\x2a\xdf\xe5\xd7\x8e\xf5\x24\x70\x3b\xff\x31\xd9\x28\xcb\x4b\xb8\xb5\x52\x9f\x3c\x49\x8f\x5e\xdd\x5e\xc3\xf3\xf9\xd1\xc1\xab\xdb\xeb\x4b\x03\x60\x9f\x3d\xd9\x3f\x9e\x5d\xfc\xa4\x43\xbc\x2e\x33\x9b\x20\x51\x60\x45\x0e\x2c\xbe\x10\x64\xff\xb3\x28\x5b\x30\xf9\xcf\x72\x60\x9c\x8c\xac\x9d\xc4\x12\xe2\x57\x22\x67\x1e\x33\xd0\x18\x8f\x2f\x98\xcc\x9d\x31\xbe\x93\x5a\x26\x86\x48\xa3\x25\x37\xf7\x9a\x34\xc1\x0f\xb4\x76\xba\x3a\xf2\xa2\x7c\xf4\xfa\xf5\xe7\xdb\xdf\xe0\x57\xc6\x9b\xee\x3b\xd6\xb0\xd0\xbc\x83\xdf\x06\xd7\xa9\xff\x7c\xfb\x86\x5c\x34\xb8\x4b\xf8\x7f\x06\x94\xbb\x22\xb7\xfd\x21\x3f\xb1\x13\x35\x05\xd3\x12\x52\xc7\xfb\x8e\xa5\xda\xbf\x10\x5e\xc0\x85\xf7\xf0\x60\xee\xee\x29\xeb\x09\xfc\x2c\x25\xdb\x55\xe6\x8a\xf3\x00\x17\x7b\x1b\x2a\xca\xb2\x74\xe1\x10\x04\x7a\x8a\xb4\xf9\xc4\x52\x1c\x4c\x17\x20\x07\xf4\x8e\xdd\xba\x35\x77\xf2\x1d\xdd\xa7\xdf\x69\x6a\x92\xfb\x09\xe4\xf9\x04\x86\x4a\x8b\x77\x5a\xd2\x9c\x55\xa6\x89\xc0\xa4\xc2\x03\x5b\x7e\x8c\x6d\x59\x7d\x24\x00\x5a\x0e\xe8\x6d\xf4\xb1\x3a\xf1\x22\x62\xa7\xf7\x71\xcb\x0c\xf0\x8a\x44\x46\x03\x7c\x6a\x17\xd6\x34\xe3\x81\x53\xaf\x24\x21\xcf\xdc\xa0\x22\x96\x70\x28\xfb\x34\xd7\xf4\x9d\x67\x1f\x75\x6b\xaf\x41\x6a\xe9\xc4\xa8\xe3\x70\xf9\x31\x31\xf0\x63\x27\xca\x3b\xd4\x43\x0f\xff\x07\xaf\xe9\x55\xfb\x57\xfb\x0a\xad\xbe\x57\xca\xb4\xbc\xf5\xb9\x1f\x46\x2b\x73\x2f\x26\xfd\x4f\x8e\x58\x33\x87\x69\xc1\xa4\xaa\x6a\xb1\xe9\xdb\x0e\x8b\xc3\x71\xed\xdc\x53\xfb\xb9\x2d\x04\xf7\x2f\xee\x61\x8a\x04\xb8\x8a\x36\x0b\x5e\xb3\xa5\x6d\x16\x79\x51\xad\xc5\xf6\xb7\x96\x7f\x98\xc1\x92\x75\x2a\x1a\x83\x37\xa2\xc1\x97\x4c\xbe\x1c\xb4\x16\x5c\xbd\x17\x6f\x29\x7d\x67\x70\x95\x6b\xf1\x66\xc3\x56\xe6\xde\x94\x2b\xe4\x8d\x91\xf8\x5e\xbc\xea\xc4\xd0\xe4\xd7\xe3\xf9\xa6\x55\x7d\xc7\x76\x9d\x58\x09\xc7\x3b\x8d\x8b\x49\x64\x02\x35\xa3\xc8\x77\x6f\x0f\x45\xac\x4b\x88\x30\x97\x1d\xe1\x6d\x3c\x49\xe1\xf2\x90\x3a\x7d\xdf\x35\x6a\x7f\x85\xc4\xd5\xb6\x40\xe5\xc3\xd2\xdf\xde\x0e\xd7\xdd\xe5\xd0\x84\xe7\xb3\xa2\x11\xf5\xb0\x41\xae\xcb\x4a\x22\x6b\x76\xd1\x4d\xd4\xfa\xdf\x0c\xc6\xd3\x29\xbc\xa7\x87\xcd\x70\x65\xd9\xae\x91\x43\xdd\xb5\xf5\x87\x96\xaf\x40\x70\xd0\x6b\xdc\x40\x4b\xff\x8f\x7f\x9a\x30\xee\xce\xcc\xc0\x3e\x0a\x31\xc0\xe9\x9c\x71\x81\x96\x0e\xd3\xb9\x14\x5b\xd0\x0d\xdd\x0d\xf2\x09\x14\x18\x5d\x87\x53\xc5\xdd\x03\x2b\x56\x9a\xc9\x15\x6a\xba\x26\xbc\x12\x5c\x1b\xe6\x99\x7f\x27\x9f\x4e\x4d\xaa\x10\x16\x77\xf7\xa2\x70\x36\x73\xbd\x16\xb4\x6c\x8e\xc1\x42\xdc\x9f\x40\x47\x74\x06\xdd\xd3\x50\x41\x8f\xf1\x1c\x67\x3e\x56\xf5\x20\x25\x72\xfd\xde\x02\xb3\xaf\x12\x31\x24\x1b\x8e\xfe\x8f\x47\x2a\xfb\x92\x65\x9e\x2e\x34\x3f\xb7\xef\xb1\x5f\x34\xc7\xf8\xb8\x6b\xc5\x7c\x99\x61\xcf\x06\x75\x64\x5f\xba\xf3\xd4\x82\xbb\x39\x21\xd0\x41\x1b\xdd\x7b\x12\xa5\xe3\x3b\xf8\x41\xa5\x1e\x43\x2c\xbc\x38\x00\x71\x77\x2d\xf4\x55\xc7\x94\x2a\xf2\x25\x73\x58\x12\x12\xd6\x34\xd1\x7e\xc7\x76\xf9\xc9\x1a\x7f\x32\x96\xbf\x24\x69\xe4\x74\x52\x50\x04\x64\xff\x37\x0d\x69\x66\xa5\x73\x3f\x8a\x25\xd6\x7c\x56\xe4\x15\x6d\x9c\x2f\xc8\xdd\x79\x99\xe2\x69\xd5\x39\xab\x75\x7b\xe7\x25\x7a\x93\x47\x1c\xcb\x08\xdf\x21\xf9\xc3\x33\x9b\xdf\xf5\xc1\xf0\x35\x15\xcc\x85\xe9\x71\x55\x88\x38\x7e\x83\x0a\xe3\xc5\xed\x9b\x55\x58\x30\xf9\xb8\x1a\x8c\x0c\xbf\x41\x81\x70\x27\x38\xc2\x6f\xd3\xfe\x2d\x36\x92\x6d\xa9\xea\xd0\x38\x2e\xb8\x7b\x10\x03\x89\x66\x4a\x24\x35\xed\x8a\x81\x69\x96\x0a\x5b\xf4\xcd\xd0\x3d\x0e\x5b\xd9\xbe\xcc\xfe\x1b\x00\x00\xff\xff\xf5\xce\xa0\x7b\xf7\x1e\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 7927, mode: os.FileMode(420), modTime: time.Unix(1480977332, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

