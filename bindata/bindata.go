// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.js
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\x60\x55\xec\x51\xa4\xbd\xa4\x5b\x91\xc9\x06\x86\xac\x03\x06\x6c\xd8\x30\x74\xc3\xfa\x78\x16\x4f\x15\x33\x8a\xd4\xc8\x53\x62\xc3\xf0\x77\x1f\x28\x59\xb6\x2c\x4b\xf9\x53\x1b\x49\xfd\x22\x91\xfc\xdd\xbf\xdf\xf1\xc4\xa3\x93\x37\x3f\xfd\x7e\xf3\xf1\xd3\x1f\x1f\x58\x4e\x85\x9e\x5f\x24\xcd\x83\x31\xc6\x92\x1c\x41\x36\xaf\xf5\x90\x14\x69\x9c\x27\xa2\x79\xee\xe7\x0b\x24\x60\x69\x0e\xce\x23\xcd\xa2\x8a\xb2\xf8\x7d\xc4\x44\x07\xa0\x95\xf9\x97\xe5\x0e\xb3\x59\x94\x13\x95\xfe\x5a\x88\x54\x9a\x5b\xcf\x53\x6d\x2b\x99\x69\x70\xc8\x53\x5b\x08\xb8\x85\xa5\xd0\x6a\xe1\xc5\xa2\xd2\x05\x88\x09\xff\x96\x5f\x8a\xd4\x6f\xc7\xbc\x50\x86\xa7\xde\x47\xcc\xa1\x9e\x45\x9e\x56\x1a\x7d\x8e\x48\xd1\x3c\x11\xc1\xc6\x49\x26\x33\x6b\x28\x86\x7b\xf4\xb6\x40\x71\xc5\xbf\xe7\x93\xda\x72\x77\xfa\x39\x0e\xf8\xd4\xa9\x92\x98\x77\xe9\x93\x3d\xb8\xfd\xaf\x42\xb7\x12\x97\x7c\xca\xa7\xdb\x41\x6d\xf1\xd6\x07\xfd\x8d\xc2\xd3\x2c\xe4\x60\xa4\xc6\x05\x38\xcf\x6f\xbd\xb8\xe2\x13\xfe\x5d\x77\xee\xbc\xc6\x60\xa9\xac\x17\x13\x3e\x7d\xc7\x2f\x9b\xc1\x99\x0d\x2c\x10\x8c\x98\xf2\x60\xa1\x7e\x3f\xb3\xfa\xbf\xfe\xfc\x25\xb0\x34\xe5\xd3\xf7\xfc\xaa\x1e\x3d\x5f\x3f\x2f\xb5\x25\xae\x57\x22\x3c\xf5\x2a\xd6\x40\xe8\x69\x44\x51\x22\x9a\x82\xbb\x68\x46\x0b\x2b\x57\x1d\x0b\x52\xdd\xb1\x54\x83\xf7\xb3\x28\x47\x67\x99\xf2\xb1\x56\x9f\x73\x8a\xf6\x98\x21\x5c\x1c\xd4\xf4\x30\x7d\x5c\x6a\x0d\x81\x32\xe8\x82\xd2\x4c\x57\x4a\x0e\x08\xd4\x42\x6f\xe2\x98\xdd\xe4\xe0\x88\xfd\xe8\x10\x58\x1c\x8f\xe0\x3a\xca\x17\x76\x39\xa2\x6d\x87\x54\x72\x16\x85\xef\x47\x3f\x96\x03\xa0\x90\xea\x6e\xc4\xda\xf0\xd2\xc0\x74\x6f\xaa\x3f\x1c\xa2\x24\xba\x18\x21\xe0\xc6\x1a\x72\x56\xfb\x23\x12\x12\x03\x3b\x35\x1a\xef\x50\x3f\xc2\x7e\x8d\x89\x35\x66\x63\xe1\x1f\x83\x15\x61\xf1\x10\x57\x65\x37\x0c\x67\x35\xcb\xc1\xc7\x20\xa5\x35\xfe\x01\xb1\x5a\x54\x99\xb2\xa2\x3a\x23\x99\xd2\x84\x2e\x6a\x55\xd5\x0b\x11\xa3\x55\x89\xb3\x88\x70\x49\x11\x2b\x35\xa4\x98\x5b\x2d\xd1\xcd\xa2\x9f\x6b\x38\x2b\x90\x9c\x4a\x3d\xe7\xfc\xc1\x64\x96\xcf\x4a\xe5\x97\xb1\xe0\x4b\x30\x9d\x48\x50\xc6\xa9\xad\x0c\x45\xf3\x7f\x12\x11\xd6\xe6\xcc\x66\x1d\xd4\xd6\xf3\x16\xf4\x69\x0b\x3a\x71\xcb\x0d\xbb\xee\x06\x2a\xf7\xcb\x03\x3d\x21\xdd\xb0\x2b\xd3\x8a\xc8\x9a\xfa\x18\xa7\x78\x3b\x50\x3e\x86\x94\xd4\x1d\x46\x35\x41\x0b\x32\xb1\x56\x06\xe3\xc7\x6a\x75\xa7\xbd\xe6\xb6\xdd\x3f\x69\xa3\xd1\x17\xa0\x87\x4a\x62\x50\x81\x6a\xa5\x33\x60\x19\x1c\x58\x4f\x84\x7a\x82\x07\x0f\xe4\x70\x8f\x81\x13\x48\xda\x53\x03\x0e\xe1\xf5\xa8\xe9\x5a\xff\xea\xa8\x59\x80\x7b\x3d\x66\x3a\xc6\x5f\x86\x98\x97\xf9\xba\xf5\x8b\xfe\x99\x95\xbe\x4f\x4e\x09\x95\xc7\xd7\x48\xcc\xd6\xf0\x8b\xee\xd6\x36\x68\x5c\x96\xd6\x51\xd4\xe3\xe4\x15\x48\x90\xf6\xde\x68\x0b\xf2\x8c\x3c\xec\xfc\x9c\x7f\xa8\xa3\x3c\x37\x77\xa9\x46\x70\x3d\xea\x02\x0d\x12\xcc\x67\x74\xd1\xfc\x26\xac\x9f\xb5\x42\x06\x5b\x39\x03\xfd\xa9\xd0\x9c\xfd\xd6\x9c\xe2\xec\x57\xe5\xe9\xb8\x35\x6b\xbb\xcd\xed\x59\xff\x68\x5f\xac\xab\x62\xf4\x0c\x3d\x46\x3e\xd6\xe7\x3e\xa9\x23\x1e\xf0\x33\x26\x58\xe8\xba\x52\x46\xbf\x1f\x23\x2c\x3d\xb2\xf4\xfc\x16\xb9\x7b\xcf\x29\xe0\x81\xfb\x50\xb8\x1b\x77\x34\xbf\xad\xbf\xc0\x6c\x7d\xe8\xc2\xbd\x92\x94\x5f\xb3\xe9\x64\xf2\xcd\x0f\x87\x2b\x39\x86\x0e\xe9\x9a\xbd\x9b\x4c\xca\x65\x67\x6d\xb3\x7f\x25\xc7\xb7\xf4\x38\x7b\xcf\x43\x19\xa2\xc6\x94\x50\x32\x92\x7d\x43\xf5\x2d\xfe\x7e\xab\x73\x61\xb5\x1c\x54\x99\x88\x8e\xdb\x89\x68\x2e\x60\xcd\x20\x6c\xad\x8f\x58\x94\xf5\x05\x6e\xb7\xaf\x5a\x3a\xfa\xa9\x8a\x69\x0b\xed\xf6\xcb\x62\x19\xef\xef\xda\x7b\x44\xf7\x0f\x96\x20\xdb\xee\x92\x66\x10\xc2\x22\xa7\x4a\xec\x5f\xc9\x12\x3a\xfc\x77\x66\x3f\xef\x46\xb6\x00\xe5\xf3\xa6\x38\x12\x41\xf9\x38\xe6\xa6\x72\x0e\x0d\xb1\xbf\x41\x57\x38\x0c\x4d\x44\xdf\x48\xc0\x1d\xb9\x93\xd0\xe1\x15\xb6\xfd\xad\xd7\x6f\x11\xd2\x9c\x49\x20\xd8\x6c\x86\x22\x68\x39\xd8\xe7\x37\x08\xa9\x8c\xb5\x29\xde\x6c\x3a\xf9\x5e\xaf\x85\xca\x36\x9b\xb1\x32\x25\xd9\xaa\x33\x50\x60\x34\x5f\xaf\xc3\x73\xb3\x49\x04\x0d\xf0\xd7\x13\xb9\x0b\x2c\x04\x99\xfa\x65\x4c\xe8\x98\x90\x26\x4e\x11\xe2\xec\x85\x98\x88\x01\x5a\x12\xca\xac\xa5\xaf\x28\x9b\x87\xee\x24\xa2\xde\x8d\x6d\x61\xb4\xd5\x7e\x91\x88\xe6\xdf\xc2\xff\x03\x00\x00\xff\xff\x62\xed\x17\x25\x45\x14\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 5189, mode: os.FileMode(420), modTime: time.Unix(1480974337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\xdf\x6f\xdb\x38\xf2\x7f\xae\xfe\x8a\x59\xb4\x80\xa4\xd4\x56\xb2\x0f\xdf\x17\x67\xbd\xc0\xb6\xfb\x3d\x5c\x81\x5b\xec\x5d\xd3\x7b\x0a\x82\x80\x96\xc6\xb6\x52\x99\x54\xc9\x51\x12\x6f\xeb\xff\xfd\xc0\x9f\x22\x65\x7b\xaf\x3d\xf4\xae\x0f\x85\x43\x0e\x3f\x33\xf3\x99\xe1\xcc\x50\x97\x17\x17\x19\x5c\xc0\x1b\xa6\x10\xea\x8e\x29\x05\x6b\x21\x41\xac\x1e\xb0\x26\x05\x4f\xdb\xb6\xde\x02\x93\x08\xf8\x88\x9c\x40\x89\x41\xd6\xa8\xaa\x0c\x2e\x2e\x33\x2b\xfe\xfb\x4a\xa1\x7c\x64\xab\x0e\xe1\x73\x06\x20\x78\x61\x44\x67\xb0\x65\xbc\xe9\x50\x96\x66\x19\x60\x85\x8c\x57\x82\x17\xb4\x6d\xd5\x0c\x26\x32\x19\xc0\x21\xcb\x00\xd6\xad\x44\x7f\xbe\xaa\xaa\x86\x11\x4b\xce\x9b\xfd\x04\xc1\x4b\x19\x84\x43\x96\x39\x7f\x7e\x43\x92\x6d\x7d\x83\x04\xc8\x6b\xd6\xab\xa1\x63\x84\x0a\x68\x8b\xa0\x90\x40\xac\x41\x61\x87\x35\x61\x03\x3b\x23\xaa\x80\x04\xac\x10\x36\x92\xf5\x5b\x6c\x34\x06\xe3\x8d\x39\x50\x8b\xce\x89\x6a\x4d\x86\x1f\xda\x32\xb2\xa2\x31\x15\x91\xd2\x67\x42\xde\x1c\x91\x73\x79\x71\x01\x3d\x93\x9a\xc9\x56\x01\x73\x07\x14\xb4\x5c\x11\xe3\x35\x3a\xbe\xb5\x83\x11\x98\x11\x55\xc3\xca\x19\x7e\x71\x99\x01\xd4\x82\x2b\x92\x43\x4d\x42\x16\x16\xd1\xf3\xa4\x86\x1e\x65\x51\x9a\xdf\x1a\xa8\x72\x0a\x97\x4e\xf3\xb8\xe1\x1d\x5f\x02\xc7\x27\xb8\x41\x8a\x4f\x19\x57\x97\xf0\xd9\x84\x25\x41\xd2\x41\xcc\x87\xbe\x61\x84\xf9\x0c\x8a\x12\x96\x3f\x3b\xd5\x00\x97\x97\xf0\x96\xf5\x34\x48\x34\x5c\xf5\xa2\xe5\x64\x33\x8a\xf1\xfd\x11\xe5\xee\x90\xde\x2e\x3a\x24\xe0\x6c\x87\xda\xc3\xd8\xba\x32\x60\x3b\x23\x14\x09\x89\xf7\x06\xb9\xd0\x07\x4a\xb7\xed\x0c\x75\x52\x26\x51\x46\x2b\xf5\x9a\x15\x3c\x94\x91\x43\xa7\x3c\x49\x5c\x95\xc8\x1b\xcd\x26\x1c\x20\xe4\x28\x6b\x9a\xc2\x1a\xe7\x6d\x6b\xd7\x50\xfc\x60\x8e\x6d\x99\xf2\x7b\xa3\xe1\xb1\x3b\x55\x74\x3a\x3b\xe3\xd5\x89\x6d\xeb\x0e\x6b\x9a\x7c\x06\x67\xb7\x9d\x27\xce\x4f\x6f\xae\xc4\x9d\x78\xc4\x13\x16\x7f\xa5\xc1\x0d\x76\x48\x38\x31\xca\x2e\x8e\x99\x72\x6b\xb7\xef\x8e\x8d\xb2\xea\xbf\xdd\xec\xba\x43\xa6\x89\xff\x7c\x94\xaf\x95\xdb\x3a\x95\xab\x13\x68\x23\x99\x97\xd3\xe5\x48\xa3\xd1\x15\x91\xe0\xf4\x49\xa4\x41\xf2\x54\x6d\x24\xe5\x0f\x9e\x88\x9a\x03\xd0\xe9\xec\xb2\x7f\x79\x4c\x13\x7c\xf9\x02\xb7\x96\x2c\x2b\x54\xf5\x83\xda\x16\x81\xff\x76\x87\x8a\xd8\xae\x5f\x24\xc9\x18\x96\x67\x4e\xee\x91\x75\x03\xa6\x32\xce\xd8\x24\x1e\x87\x09\x55\xc1\x8a\xa5\xd3\xee\xdd\xe9\x3b\x41\xdd\xfe\x5e\xcb\x14\x13\x26\x7e\x37\x0d\xa1\xfa\x88\x7b\x55\x04\xa0\xb2\xda\xb1\xde\x5c\xc2\xb8\x06\x68\xd7\x25\x7b\x4a\xfc\xd6\x32\x3e\x39\x1c\xe2\x78\xad\x9f\x17\x5a\xde\x60\x19\x7b\x34\x98\xf9\x31\x7a\x5c\xce\x82\xf4\xfe\xac\xb4\xa1\x23\x92\xa4\x7d\x8f\x0b\xc8\x55\xcd\x88\x50\xe6\xe3\x86\xb6\x66\x61\xfe\x0f\xb5\x23\xf0\x74\xdc\x44\xd4\xd9\x16\xc2\xba\x2e\x74\x0f\xd7\x2c\x5a\x09\x3b\xa1\x08\x24\xd6\xa6\xd6\x5e\xd8\x20\xa9\x19\xac\x91\xea\x2d\x36\xb0\x96\x62\x67\x40\x2e\x1b\x5c\x0d\x9b\xcb\x5d\x50\xd2\x58\x37\x8e\x1a\x8a\x3a\xd7\x4e\xe2\x26\x70\xb6\xfc\x8f\x55\x3e\xbe\x1f\xda\x79\xbd\xe6\xb2\xd0\xac\x05\xb6\x75\x47\x18\xba\x2e\x2a\xfc\x28\x5b\xd1\xc0\x12\xfe\xef\xea\xea\x2a\xbe\x4d\x1d\xa1\x1c\xa5\x4d\x12\x19\x7f\xff\xfd\x75\x8a\x32\xd4\x1c\xb3\x77\x32\xb8\xc1\x9e\x5b\xa1\xaa\x0d\x52\x91\xa7\x3c\xe5\xbe\x82\x54\xb4\x45\x5e\x14\x52\xf5\x49\x07\x3a\xf2\x5a\xaa\xde\xe4\x60\x95\x36\x9d\x09\x0f\x47\xf9\xed\xdb\x4f\x2a\x9e\x50\x84\x4f\xf0\xab\xb1\xd9\x67\xd1\xc4\xb4\x53\x76\xf9\x86\x92\xae\x9e\xed\x56\x21\x29\x4d\xb1\x61\x92\xc6\x38\x93\xe8\xe3\x30\xb7\x9c\x74\x6a\x74\xb0\x84\xa7\x96\x37\xe2\xa9\x52\x48\xef\xdc\xa2\xb3\xc5\x08\x7a\xa2\x67\x71\x68\xe3\x8a\xd6\x17\x47\x5d\xc2\x83\x8f\x2d\xc2\xe9\x30\x05\x36\x68\x49\x65\xe3\x4a\x1f\x59\x17\x32\x2b\x94\xfa\x56\xdd\xcb\x81\xf3\x96\x6f\xa6\x55\xe7\x8d\x10\x1d\x32\x7e\x0c\x6c\x6d\x45\xfa\x8b\xc9\xc0\xc2\x26\x62\xd2\x2c\x42\x6e\xda\x1f\xd9\xe9\x08\x28\xa4\xfb\x41\x76\x45\x39\x76\x4b\xd7\xf0\xc7\x32\x2e\xd1\x05\xfb\x3d\x6e\xfe\xff\xb9\x2f\x62\xf8\x2f\x5f\x20\xaf\x2e\x5c\x4e\x6a\xe1\x31\xef\xc6\xf4\x3a\x59\x25\x4f\xd4\xc1\xb8\x30\xcd\xa2\xd5\xb8\xcc\xdb\xdb\x65\xe6\x9e\x58\xc4\x4f\x56\x0b\x9d\x91\xac\xf2\x7f\x9a\x9e\x15\x0f\x49\xbe\xd4\xe9\xbc\x72\x3e\xb8\xab\xaa\x6d\x93\x58\xe1\x33\xd6\x6e\xc5\x18\x5f\xba\x71\xe9\x55\x91\xbf\x74\xbe\xcd\x6b\x31\x70\xca\xcb\x8a\xf0\x99\x8a\xc8\xcd\x0e\xf9\x86\xb6\x65\x90\xb7\xf8\xd8\xa4\x07\x7c\x3b\xf5\xd2\x13\xf8\x39\xe9\xf2\x96\x97\xd5\x96\x76\x5d\x41\xb8\xeb\x4d\xd9\x75\xf7\xf1\xde\xec\xde\xfb\xe5\xd0\x31\xf5\x05\x5f\x24\x63\xe5\xc1\x5b\xae\xa3\xd2\xf2\x7e\xd0\x13\xf0\x68\x95\x0b\x99\xce\x70\xb3\xa9\x89\x2d\x4a\xf8\x61\x19\x67\xcf\x98\xee\xa3\x4c\xbc\x1d\xa5\xb1\x69\x1a\x30\xff\x2e\xff\x34\xec\xdf\x3b\x41\xd4\xf2\x8d\xfe\xfd\x7d\x50\x75\x57\xc9\xd6\x03\xaf\xa9\x15\xdc\xb4\xfa\xfb\xae\xe5\x78\x5f\x6f\xc7\xb2\xa2\xb9\x72\xc3\x54\x9a\x47\xc9\x64\x90\x59\xf3\xba\x7d\xc5\xf1\x49\xff\x2a\x72\x03\x92\xcf\xcc\xe1\x19\x7c\x3e\xcc\xec\x79\xd1\x6b\x65\xca\x1d\xd7\x07\xcd\xb2\xfe\xd3\x45\xc3\x1e\x2c\x6f\xaf\xee\x34\x85\xa9\x79\x4c\x22\x3b\x32\x4f\x11\xab\x3f\x62\xf3\x8b\x44\x6d\xa5\x3f\x50\x90\x64\x35\x86\xc7\x82\xfd\xeb\xf6\xea\x4e\x47\x4a\x17\x9d\x9c\xc4\x1f\x28\xc5\x3e\xcf\x5e\xac\x85\x2c\x1e\x99\x84\x76\xf9\xe3\x35\xb4\x3f\x59\x51\x97\x8d\xd7\xd0\xbe\x7e\x1d\xcd\xc1\x16\xa6\x8d\x61\x38\x3e\x93\x86\x31\xcf\x16\x03\xf4\xb0\xbc\xba\x86\x87\x9f\x8a\xdf\x18\x6d\xab\x5d\xeb\x6d\xb9\x6d\xef\x6e\xf3\x7d\x7e\xe7\xa0\x67\x01\x6d\xfe\x63\xb2\x51\x96\xd7\xf0\x60\xb5\xbe\x78\x91\x1e\xbd\x7d\xb8\x83\xd7\xcb\xa3\x83\xb7\x0f\x77\xd7\xda\x80\x43\xf6\xe2\x90\xbd\xf0\xbd\xd5\x08\x5d\x67\x36\x21\xa3\x40\x46\x84\x15\x7f\x12\xd4\xff\x59\x54\x57\x4c\xfe\x67\x39\x17\x9e\x89\x0a\x65\x8b\x4a\x0f\x60\xf1\xf7\x01\xbb\x5a\xe9\xa1\x4f\x47\x6a\xc5\x64\xee\xc8\xf8\x2f\xb9\xa5\x63\x6f\x3c\x5a\x73\x3d\x49\xa7\x17\x6a\xe2\xb5\xf3\xd5\x89\x17\x65\x42\x4b\x68\x42\x81\x8f\xc1\x75\x9c\x7f\xbe\x7f\x67\x5c\x1f\x2a\xfb\x8c\xfa\xc7\x80\x72\x5f\xe4\xb6\xce\xe5\x27\x76\xa2\xe2\xa6\x4b\x5b\x4a\xa8\xaf\xbc\xaa\xfd\x03\xe1\x67\xb8\xf2\xcc\x0d\xfa\x51\x9a\x42\xcf\xe0\x17\x29\xd9\xbe\xd2\xc3\xea\x19\x14\x3b\xd7\x16\x65\x59\x3a\x9a\x83\x42\x2f\x91\x16\xd1\x58\x8b\x33\xd3\x11\x3f\x91\x77\x70\xdb\x56\xbf\xae\xf6\xe6\x65\x74\x43\xa6\xd8\x1f\x66\x90\xe7\x33\x18\x2a\x12\x37\x24\xcd\xbc\x90\x32\xd9\x33\xa9\x70\xc2\xe5\xa7\x98\xcb\xea\x93\x31\x80\xe4\x80\x9e\xa3\x4f\xd5\x89\xa7\xf1\xbe\x47\xb1\x8e\xb6\x96\x4b\xc8\x95\x51\x99\x8f\xe5\x21\xe5\x45\x3f\xec\xc3\x01\xdb\x19\x00\x3b\x85\x41\x3c\xe4\xaf\x6b\xb8\x62\x0d\x53\xdd\xa7\x51\xd3\x97\xf3\x21\xea\x3a\xde\x83\x94\xe9\x84\xd4\x71\x48\xfa\x94\x10\x1c\xd3\x56\x8b\x5d\xdf\xc6\x6d\xd5\xaa\x17\x0e\xd1\x55\x98\xbf\x9a\x6f\x75\x2b\x26\x55\xe5\x0e\x14\xaf\x46\x49\xdb\xaf\x27\xf1\x20\xb1\xd9\x74\x78\x6f\x6d\xb1\x83\xc8\x58\xc8\x91\xa6\x57\xde\xf9\xa3\x90\xc6\xc1\x65\xbc\xde\xe4\x52\x3d\x0c\x34\x09\xbf\x7a\x5f\x93\x15\x36\x13\x43\x5a\xde\xfa\x3b\x18\x46\x0a\xfd\x22\x32\x47\x4f\x8e\x16\x8b\x63\x56\xd2\x11\x65\xee\xd7\x73\x9f\xb1\xbf\xba\xcf\x10\x06\xd4\x55\x93\x45\x88\xac\x2d\x2b\x8b\x28\xd2\x6a\x2b\x9e\xfe\xd6\xf2\x8f\x0b\x58\xb3\x4e\x45\x23\xdf\x4e\x34\xf8\x86\xc9\x37\x03\x91\xe0\xea\x83\x78\x6f\xfc\x5e\xc0\x6d\x4e\xe2\xdd\x8e\x6d\xf4\x1b\x21\x57\xc8\x1b\xad\xf1\x83\x78\xdb\x89\xa1\xc9\xef\xc6\xf3\x4d\xab\xfa\x8e\xed\x3b\xb1\x11\x0e\xfb\x64\xee\xc4\x79\xe2\x2e\x89\x7b\x70\x16\xa1\xfa\x85\x4f\x76\xf1\xfe\x0d\x52\x72\xd3\xcb\x09\x58\x78\x63\xf8\x8f\x0a\xf6\x57\x9a\xd9\xc9\xb7\x37\x2d\x74\xa4\x33\x15\x71\x55\xf2\x48\x97\x7b\x16\xe9\x70\xbf\x2a\x1a\x51\x0f\x3b\xe4\x54\x56\x12\x59\xb3\x8f\xde\x60\x36\x03\xb4\x19\xb1\x94\xd6\x50\x77\x6d\xfd\x51\x33\x4a\xd2\x81\xce\xa5\x78\x02\x6a\xcc\x58\x9b\xcf\xa0\xc0\xe8\x25\x97\xa6\x34\x56\xc4\xe4\x06\xc9\x8c\xb6\x6f\x05\x27\x8d\x9a\xb9\x57\xdb\x54\x91\x19\x22\xb5\xa2\x97\xa1\xfe\x25\xd0\x67\xee\x2d\x56\xf5\x20\x25\x72\xfa\x60\x55\xd9\xcf\x1c\xe7\x94\x04\x6f\x5e\xae\x88\xcf\xed\x07\xb0\x53\x7a\x02\xc9\xe3\xd7\xb4\xaf\xc0\xeb\xd9\xa0\x8e\x28\x31\x13\x76\x2d\xb8\xeb\x92\x41\x0e\xda\x68\xca\x4e\x9c\x8b\x5f\x7c\x93\x7a\x3a\x86\x35\xbc\x6f\xc1\xa0\xbb\xdb\xff\xb6\x63\x4a\x15\xf9\x9a\x39\x5b\x12\x11\xd6\x34\xd1\x7e\xc7\xf6\xf9\xc9\x4a\x7c\x32\x7f\xfe\x4c\xd3\x88\x74\x52\x51\x64\xc8\xe1\xeb\x78\xd4\x83\xc2\xdc\xcf\x21\x09\x99\xaf\x8a\xbc\x32\x1b\xf3\x95\xb9\xfe\x79\x99\x9a\xd3\xaa\x39\xab\xa9\x7d\xf4\x0a\x3d\xe3\x11\x62\x19\x99\x37\x15\x3f\x3f\xb0\xf8\xdd\xaf\x4d\x05\x3d\x9d\x7f\x5f\x17\x22\xc4\x6f\x70\x61\x7c\x25\x7c\xb3\x0b\x2b\x26\xbf\xaf\x07\x23\xe0\x37\x38\x10\x06\xe2\x93\xf6\xdb\x0f\x2d\x5a\xbf\x1e\xdb\x0a\x5b\x28\x75\x59\x1d\x47\x9d\xec\x50\x66\xff\x0a\x00\x00\xff\xff\x6c\x32\xdc\xab\xc7\x1b\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 7111, mode: os.FileMode(420), modTime: time.Unix(1480973980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

