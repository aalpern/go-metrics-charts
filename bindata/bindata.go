// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.js
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\xc1\x8e\xdb\x36\x10\xbd\xef\x57\x30\x0c\x7a\x14\x69\x77\x9b\xa2\xd8\xd2\x06\x0a\x37\x3d\xb5\x68\x0f\x41\x81\x1e\x29\x71\x14\xd2\xa5\x48\x95\x1c\xed\xda\x30\xf4\xef\x05\x25\x6b\x2d\xcb\xd2\x6e\xda\xe4\x90\xbd\x48\x43\xbd\x79\xc3\x79\x33\x43\x7a\xc5\x9b\x9f\x7f\xdf\x7d\xf8\xeb\x8f\xf7\x44\x63\x65\xb7\x77\xa2\x7f\x10\x42\x88\xd0\x20\x55\xff\xda\x99\x68\xd0\xc2\x56\xf0\xfe\x79\x59\xaf\x00\x25\x29\xb4\x0c\x11\x70\x43\x1b\x2c\xb3\x1f\x28\xe1\x23\x80\x35\xee\x6f\xa2\x03\x94\x1b\xaa\x11\xeb\xf8\xc0\x79\xa1\xdc\x3e\xb2\xc2\xfa\x46\x95\x56\x06\x60\x85\xaf\xb8\xdc\xcb\x03\xb7\x26\x8f\x3c\x6f\x6c\x25\xf9\x8a\x7d\xcb\xee\x79\x11\xcf\x36\xab\x8c\x63\x45\x8c\x94\x04\xb0\x1b\x1a\xf1\x68\x21\x6a\x00\xa4\x5b\xc1\x53\x8c\x51\xc8\x58\x04\x53\x23\x89\xa1\xf8\xe4\x98\xfb\x7f\x1a\x08\x47\x7e\xcf\xd6\x6c\x7d\x36\xba\x88\xfb\x98\xf8\x7b\xc2\xcf\x8b\xa0\xa5\x53\x16\x72\x19\x22\xdb\x47\xfe\x1d\x5b\xb1\xef\xc7\x6b\x5f\x36\x98\x3c\x18\x1f\xf9\x8a\xad\xdf\xb1\xfb\xde\xf8\xc2\x01\x72\x90\x8e\xaf\x59\x8a\xd0\xbd\xff\x0f\x7a\x56\x5b\x8f\xcc\x1e\x79\x7a\xda\x63\x66\x25\x42\xc4\x05\x22\xc1\xfb\x7e\xbc\xeb\xad\xdc\xab\xe3\x28\x82\x32\x8f\xa4\xb0\x32\xc6\x0d\xd5\x10\x3c\x31\x31\xb3\xe6\xa3\x46\x7a\xc1\xcc\xe1\xb2\x44\x33\xc1\x4c\x71\x85\x77\x28\x8d\x83\x90\x48\x4b\xdb\x18\x35\xe3\xd0\x39\xbd\xc9\x32\xb2\xd3\x32\x20\xf9\x29\x80\x24\x59\xb6\x80\x1b\x91\xe7\xfe\xb0\xc0\xf6\x8c\x34\x6a\x43\xd3\x78\x4d\x73\xb9\x02\x72\x65\x1e\x17\xa2\xcd\x7f\x9a\x59\x9e\x2c\x4d\xcd\x39\x49\xe8\xdd\x82\x00\x3b\xef\x30\x78\x1b\x6f\x44\x10\x4e\x3e\xd3\x58\x78\x04\xfb\x8a\xfa\x1d\x26\xb3\x50\x2e\xa5\x7f\x0b\x36\x08\xd5\x4b\x5a\xd5\xe3\x34\x82\xb7\x44\xcb\x98\x49\xa5\xbc\x8b\x2f\xb8\x75\xae\xc6\xd5\x0d\x0e\xee\x9d\x41\x09\x1e\x6b\xd8\x50\x84\x03\x52\x52\x5b\x59\x80\xf6\x56\x41\xd8\xd0\x5f\x8c\x45\x08\xa4\x02\x0c\xa6\x88\x8c\xb1\x17\x0b\x58\x7f\x6e\xf9\xe6\xc5\x08\x33\x53\x70\xab\xc4\x58\x38\x21\x9f\x9b\xb3\x41\xf4\x8e\x6e\xdf\x1f\x6a\x1f\x50\x70\xb9\x5d\xde\xe6\x12\x55\xd7\xbd\x16\x64\xc8\xce\x6c\xd7\xe4\x69\xa6\x94\x74\x1f\x21\xd0\xed\x2e\xc1\x16\xa3\xcc\x36\xac\x93\xd3\xa5\xd4\x82\xbf\xf5\x8a\x93\x5f\x4d\xc4\xdb\x06\x1c\x66\xea\x5c\x97\x57\xa7\xdf\x36\xd5\x62\x63\xdc\x22\x5f\x9b\xe6\x4f\x9a\xfb\x99\x7d\x66\x28\x73\x0b\xe9\x50\x5c\x9c\xf4\x05\x95\x5e\xf9\xf4\xdf\x0f\x82\xf1\x69\x5e\xc9\x17\x4e\xfd\x74\x43\x8f\x98\xdf\x76\xa7\x18\x39\x5d\x6f\xe1\xc9\x28\xd4\x0f\x64\xbd\x5a\x7d\xf3\xe3\xf5\x17\x0d\xa9\x77\x1f\xc8\xbb\xd5\xaa\x3e\x8c\xbe\xb5\x97\x57\x0c\xec\x2c\x4f\xf0\x4f\xcc\xc4\x2c\x82\x85\x02\x41\x11\x54\xd3\x40\xa5\x77\x98\x3d\x9d\x39\x73\x6f\xd5\x2c\xa5\xe0\xa3\x6d\x0b\xde\x5f\x33\xbd\x91\x5a\xeb\x03\x54\x75\x77\x4d\x3d\xf7\xd5\x20\xc7\xb4\x54\x19\x9e\xa1\xe3\x13\x82\x1f\xb2\xcb\x8d\x7f\x41\x8c\x7f\x65\x25\xdf\xa1\x4b\x7a\x23\xa5\x85\xc1\xd4\x30\xbd\x78\x04\x5e\xff\x44\xbb\xac\x87\x85\x16\x40\xbd\xed\x87\x43\x70\xd4\xcb\x98\x5d\x13\x02\x38\x24\x7f\x4a\xdb\xc0\x3c\x54\xf0\x69\x90\x84\xbb\xd9\x8e\xc0\xeb\x8b\x7a\xf8\x3b\x9d\xde\x82\x2c\x34\x51\x12\x65\xdb\xce\x65\x30\x68\x70\xa9\x6f\x72\x32\x25\x19\x4a\xdc\xb6\xa3\x7a\x9f\x4e\xdc\x94\x6d\xbb\x34\xa6\xa8\x06\x3a\x27\x2b\xa0\xdb\xd3\x29\x3d\xdb\x56\x70\x9c\xd1\x6f\xe2\xf2\x98\x54\x48\x3e\xdd\xcb\x92\xd3\xad\x20\x7d\x9e\x3c\xe5\x39\x49\x51\xf0\x19\x59\x04\x96\xde\xe3\x57\x54\xcd\xeb\xed\x08\xde\x75\xe3\x30\x18\xc3\xb4\xdf\x09\xde\xff\xcb\xf0\x6f\x00\x00\x00\xff\xff\xeb\x53\xca\x2d\x4a\x0c\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 3146, mode: os.FileMode(420), modTime: time.Unix(1480888617, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x57\x4b\x8f\xdb\x36\x10\xbe\xeb\x57\x4c\x91\x00\x92\x0c\xaf\xbc\x97\x5e\x0c\xb8\x87\x26\x87\xf6\x50\xa4\x40\xd0\xd3\x22\x58\xd0\xd2\xd8\x52\x23\x91\x02\x39\x5a\xef\x22\xf1\x7f\x2f\x38\x24\x25\xd2\x8f\xb4\xbd\x24\xda\xe1\x3c\xbf\x79\x7a\xb3\x5a\x65\xb0\x82\x5f\x85\x41\xa8\x7b\x61\x0c\x1c\x94\x06\xb5\xff\x1b\x6b\x32\x70\x6a\xbb\xba\x05\xa1\x11\xf0\x05\x25\x81\x51\x93\xae\xd1\x54\x19\xac\x36\x99\x63\xff\xb4\x37\xa8\x5f\xc4\xbe\x47\xf8\x96\x01\x28\x59\x30\xeb\x1a\x5a\x21\x9b\x1e\x75\xc9\x64\x80\x3d\x0a\x59\x29\x59\x50\xdb\x99\x35\x5c\xf0\x64\x00\xe7\x2c\x03\x38\x74\x1a\x83\x7c\x55\x55\x8d\x20\x91\xc8\xf3\x7b\xa2\x21\x70\xb1\x86\x73\x96\xf9\x78\xfe\x40\xd2\x5d\xfd\x19\x09\x50\xd6\x62\x34\x53\x2f\x08\x0d\x50\x8b\x60\x90\x40\x1d\xc0\x60\x8f\x35\x61\x03\x03\xb3\x1a\x20\x05\x7b\x84\xa3\x16\x63\x8b\x8d\xd5\x21\x64\xc3\x02\xb5\xea\x3d\xab\xb5\xc4\xf8\x50\x2b\xc8\xb1\xc6\x50\x44\x46\x5f\x09\x65\x73\x05\xce\x66\xb5\x82\x51\x68\x8b\x64\x67\x40\x78\x01\x03\x9d\x34\x24\x64\x8d\x1e\x6f\x1b\x60\xa4\x8c\x59\xcd\xb4\xf7\x8e\xaf\x36\x19\x40\xad\xa4\x21\x3d\xd5\xa4\x74\xe1\x34\x06\x9c\xcc\x34\xa2\x2e\x4a\xfe\xb6\x8a\x2a\x6f\x70\xe7\x2d\x2f\x0f\x21\xf0\x1d\x48\x3c\xc1\x67\xa4\x58\x8a\x43\xdd\xc1\x37\x4e\x4b\xa2\xc9\x26\x31\x9f\xc6\x46\x10\xe6\x6b\x28\x4a\xd8\xfd\xe2\x4d\x03\x6c\x36\xf0\x17\xbf\x30\x70\xc1\x40\xdf\x19\xea\xe4\x11\xc8\x02\xe1\x39\x59\xa1\x46\xd9\xb0\xb3\x8b\xf8\x07\x31\xd2\xa4\x91\xa1\x1e\x55\x27\xc9\x15\xa4\x90\x6f\x57\x19\xf3\x42\xf6\xb9\xe8\x91\x40\x8a\x01\x2d\x40\x71\x70\xe5\xec\x9a\x37\x69\x48\x69\x7c\x66\xcd\x85\x15\x28\xfd\xf3\x39\x8b\x1d\xe3\x3a\x5b\x82\xb4\x34\xc7\x78\x2e\x23\x3c\x6e\x01\x91\x06\x06\x67\x98\x6b\x7b\xa6\x39\x8f\xde\x17\xf9\x3b\xe7\xe4\x03\xe3\x92\x97\x55\x4b\x43\x5f\x10\x0e\x23\x17\xab\x0f\xe1\x99\x5f\x9f\x03\xb9\x08\xf1\x58\x80\xb6\x49\x5e\x6c\x38\xa6\x1a\xc4\xc8\x81\xc5\x69\xb1\xc6\x69\xd2\x32\x22\x00\xc3\xb5\xe5\x7f\xd7\x11\xf5\x45\xf4\x13\xa6\x7a\x99\xe4\xc0\x8a\x39\x43\x3a\xb6\xf0\x51\x90\xa8\xc2\x9f\x55\x2b\x4c\x82\xac\x0d\xdf\xff\x1f\x30\x9c\x31\x11\x4d\x53\xb8\x30\x03\x2c\xdd\x01\x8a\x9f\xd8\xba\xd5\xe3\xdf\x96\x2c\xc6\xb9\xad\x22\xe9\xec\x4e\x8a\x6f\x3c\xbb\xdc\x8a\xa6\xc9\xd7\x70\xf7\xd9\xa7\xd5\x3b\xbc\xa4\x70\x50\x2f\x78\xc3\xe3\xff\xe8\x70\x83\x3d\x12\x5e\x38\xe5\x88\x4b\xd7\x3d\xb9\xe7\x2f\xd7\x4e\x39\xf3\xff\xdf\xed\xba\x47\xb1\x14\x5e\xe2\x91\x7f\xba\xd5\xf7\x17\xaa\x99\x33\x2f\x2f\xc9\x91\x45\xb6\x15\x81\xe0\xed\xf9\xd2\x4b\xcc\x46\x5c\x41\xf0\x46\xd6\xbc\x02\xdb\xdb\x7e\x14\xec\xae\x61\x82\xef\xdf\xe1\xc9\x81\xe5\x98\xaa\x71\x32\xed\xdc\x26\xd4\x0d\x68\x48\x0c\x63\x5a\xd3\x33\x39\x54\xf4\x8d\xba\xf7\xce\x26\xf9\x38\x5f\x40\x35\x7b\xb1\xf3\xd6\x43\x38\x63\xaf\xa8\x7f\x7b\xb6\x3c\xc5\x05\x12\x9f\x78\xb9\x56\x5f\xf1\xcd\x14\xb3\xa2\xf2\x66\xe3\xda\xd0\xb5\x38\x25\x71\x5b\x9e\x50\x1c\x57\x6d\xfd\xba\xb5\xfc\xac\x8b\xfd\xb1\xca\xf8\x63\x89\x38\x6a\xe2\xb7\xbb\xdc\x0c\x47\xc4\x39\xa8\x06\xb7\x90\xf7\x9d\x44\x93\x2f\xe4\x65\x86\x64\x71\xab\x9f\x6f\xaf\x63\x73\x77\x19\x8b\xbe\x9f\xb7\x85\x5f\xbb\x9d\x86\x41\x19\x02\x8d\x35\x6f\xad\x95\x4b\x91\x59\xc3\x01\xa9\x6e\xb1\x81\x83\x56\x03\x2b\xd9\x34\xb8\x9f\x8e\x9b\x61\x36\xd2\xb8\x20\xae\x56\xb3\xb9\xb7\x98\xe3\x75\x7a\x77\x91\x2e\xfb\x32\xee\x0e\x9e\xba\xb0\x0b\x35\xc8\xb4\x19\x6b\xbb\x5b\xa7\xbe\x8f\x56\x28\xea\x4e\x35\xb0\x83\x9f\x1f\x1f\x1f\x43\xad\xb8\x01\xfb\xaf\x5d\x13\x15\x22\x8b\xb9\xd6\x9b\xfd\x15\xaf\x9d\x32\xd5\x11\xa9\xc8\x53\x40\xf2\x30\x28\x2a\x6a\x51\x16\x85\x36\x63\x99\x6e\x87\x8b\xf0\xb4\x19\xb9\xd4\xaa\x74\xd1\x5e\x04\x7c\x55\xc6\x61\xe5\xa6\xec\x09\x16\x78\xb2\xcb\x02\x8b\x32\xdd\x08\xb3\x6b\xb7\xfc\xba\xbb\x8b\xe7\x3a\xe3\xe9\x21\x34\x2d\xa9\x23\x35\xc6\x99\xeb\x24\xd9\x6c\xf7\xb0\x83\x53\x27\x1b\x75\xaa\x0c\xd2\xef\x9e\xe8\xad\x32\x63\x80\x74\x1d\x67\x2b\x1e\x51\x63\x71\x35\xf6\x83\xf2\x65\xe6\x7b\x1b\x3c\x31\x67\x2b\x29\x6f\x34\xa0\xcf\x59\x76\x98\x64\x4d\x9d\x92\xa0\xb1\xd1\xe2\x34\xdb\xe0\xc5\x6a\x27\x49\x18\xcb\xe9\xa6\x4d\x66\x0c\x0b\xfc\xc9\x94\xca\xab\x99\xc5\xcb\xc4\x48\xad\x86\xb1\x8b\x4f\x0a\xa7\x50\xf9\x53\xdd\x57\xde\x6f\x7c\x9a\xef\x85\x36\x95\x17\x28\xde\x2f\x9c\xee\x56\x29\x53\xc5\xa4\x8e\xc7\x1e\x9f\x5d\x1d\xb8\x1b\x80\x35\xda\x29\x66\x1b\xfd\xc2\xff\xcc\x81\x68\x90\x96\x9b\x61\xce\x20\x52\xe5\xb7\x6d\xb8\x25\xce\x80\xbd\xc1\xe8\xdd\xae\xff\xf9\x31\x71\xa4\x93\x5d\x28\x86\xf9\x9c\xb2\x6d\xcb\xa2\x37\xcf\xaa\xed\x35\x2a\xe9\x79\xf6\x10\xe8\x7e\xd5\xb9\xe4\x84\x59\xf0\x31\xea\x16\x5f\xe7\x7e\xe2\x70\x62\x92\xb0\x93\x77\x7b\x75\xc7\xc2\xe5\x85\xb2\xb9\x22\x6d\xfd\xf9\xec\x4a\x3c\xd9\xaf\x22\xaf\x5b\xa1\x29\x5f\xff\xa8\x2a\x66\x7d\x96\x0a\x3b\xbe\x3a\x9d\x58\xf9\xf4\xf8\xe5\xd2\xb5\xf4\xa2\x75\x55\x74\xe5\x91\x6f\x35\x0b\xf8\xfb\xa2\x51\xf5\x34\xd8\x5f\x1f\x95\x46\xd1\xbc\x45\x1d\xec\x72\x60\xdd\x8e\xb9\xac\x81\xba\xef\xea\xaf\xf9\x1a\x72\xd2\x5e\xe9\x83\x56\x27\xa0\x86\x47\x8b\x3d\xa5\xb1\x8f\x06\x81\xad\x1e\xc7\x06\x3b\xc0\xbe\x22\xa1\x8f\x48\x15\xe1\x2b\x7d\x50\x92\xe6\x9f\x34\x49\xf1\x45\xc7\x45\xf9\x23\x17\xde\x71\x93\x3e\xec\x27\x22\x25\xaf\x4c\xa7\xe0\x2c\xb7\xd2\xb9\xcc\xce\x65\xf6\x4f\x00\x00\x00\xff\xff\x6f\xec\x0d\x67\x3b\x0f\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 3899, mode: os.FileMode(420), modTime: time.Unix(1480888930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

