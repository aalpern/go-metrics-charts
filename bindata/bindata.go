// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.js
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5d\x8f\xa3\x36\x17\xbe\x9f\x5f\xe1\x65\xf5\x5e\x62\x27\xef\xcc\xb4\xab\x29\x89\x54\x4d\xa7\x52\xa5\xae\x5a\xb5\xdb\xaa\x7b\xe9\xc0\x61\xf1\xd4\xd8\xd4\x3e\x64\x12\x45\xf9\xef\x95\x0d\x04\x42\x20\x99\x8f\x74\x76\xae\xc0\xe6\x7c\x3e\x7e\x7c\x38\x76\xf4\xee\x87\x5f\x6e\x3f\x7d\xfe\xf5\x8e\x64\x98\xcb\xf9\x45\x54\x3d\x08\x21\x24\xca\x80\x27\xd5\xab\x1f\xa2\x40\x09\xf3\x88\x55\xcf\x76\x3e\x07\xe4\x24\xce\xb8\xb1\x80\xb3\xa0\xc4\x34\xfc\x10\x10\xd6\x11\x90\x42\xfd\x4d\x32\x03\xe9\x2c\xc8\x10\x0b\x7b\xc3\x58\x9c\xa8\x7b\x4b\x63\xa9\xcb\x24\x95\xdc\x00\x8d\x75\xce\xf8\x3d\x5f\x31\x29\x16\x96\x2d\x4a\x99\x73\x36\xa1\xff\xa7\x97\x2c\xb6\xf5\x98\xe6\x42\xd1\xd8\xda\x80\x18\x90\xb3\xc0\xe2\x5a\x82\xcd\x00\x30\x98\x47\xcc\xf9\x78\x91\xcb\x54\x2b\x0c\xf9\x03\x58\x9d\x03\xbb\xa2\xdf\xd2\x89\xf7\xdc\x9d\x7e\x4a\x00\x36\x36\xa2\x40\x62\x4d\xfc\xe8\x08\xee\xff\x29\xc1\xac\xd9\x25\x9d\xd2\x69\x3d\xf0\x1e\xef\xad\xb3\x5f\x19\x7c\x99\x87\x8c\xab\x44\xc2\x82\x1b\x4b\xef\x2d\xbb\xa2\x13\xfa\x4d\x77\xee\xbc\xce\xf8\x4a\x68\xcb\x26\x74\x7a\x4d\x2f\xab\xc1\x99\x1d\x2c\x80\x2b\x36\xa5\xce\x83\x7f\x3f\xb3\xf9\x3f\x7e\xfb\xc9\xa1\x34\xa5\xd3\x0f\xf4\xca\x8f\x9e\x6e\x9f\x16\x52\x23\x95\x6b\xe6\x9e\x72\x1d\x4a\x8e\x60\x71\xc4\x50\xc4\xaa\x0d\x77\x51\x8d\x16\x3a\x59\xcf\x2f\x5a\x17\x89\x58\x92\x58\x72\x6b\x67\x41\x06\x46\x13\x61\x43\x29\xbe\x64\x18\xb4\x61\x0c\xc9\x85\xce\x4e\x4f\xa6\x2f\x17\x6b\x85\x5c\x28\x30\xce\x68\x2a\x4b\x91\x0c\x28\x78\xa5\x77\x61\x48\x6e\x33\x6e\x90\x7c\x6f\x80\x93\x30\x1c\x91\xeb\x18\x5f\xe8\xd5\x88\xb5\x9d\xa4\x48\x66\x81\x2b\x20\xfd\x5c\xf6\x04\x59\x22\x96\x23\xde\x86\x3f\x0d\x4c\xf7\xa6\xea\xe1\x20\xc6\x3b\x4c\x82\x8b\x11\x04\x6e\xb5\x42\xa3\xa5\x3d\x40\x21\x52\x7c\x67\x46\xc2\x12\xe4\x09\xf8\xbd\x4c\x28\x21\x1d\xcb\xff\x50\x58\x20\xe4\xc7\xc0\x2a\xba\x69\x18\x2d\x49\xc6\x6d\xc8\x93\x44\x2b\x7b\x44\xcd\xab\x0a\x55\x94\xe8\x97\xc4\xbf\x85\xa9\x90\x08\x26\x68\x0c\xfa\xc9\x80\xe0\xba\x80\x59\x80\xb0\xc2\x80\x14\x92\xc7\x90\x69\x99\x80\x99\x05\x3f\x7a\x71\x92\x03\x1a\x11\x5b\x4a\xe9\x29\x7f\x7c\x47\x94\x12\x51\xab\xc0\xbb\x5e\xa0\x0a\x63\x09\xdc\x34\xee\x8f\x1b\xf1\x86\x6c\xc1\xd5\x2e\xca\x58\x2b\x47\x66\x9b\x73\x39\x04\xff\x70\xe6\x8d\x76\xca\x49\xca\xc3\x58\x6a\x0b\x6e\x93\x8a\x47\x38\x67\xce\xfb\x89\x4c\x19\x3f\x46\xef\xe2\x49\xe4\x26\xcf\xa2\x85\x87\xc8\xe1\x5b\xa1\x0a\x49\x18\xeb\x52\x61\x30\xff\xab\x4e\x80\xe8\xb4\x23\x55\x2f\x62\x23\xf4\xf9\x58\x96\x8f\xdf\x84\xc3\xa1\x9b\xba\x96\x9d\xaa\x3b\x8e\x78\xa4\xa2\xca\xe1\xce\x7b\x3e\x32\x2f\xd8\x30\x3d\x02\xfb\x56\x08\xc3\x7a\x20\x6c\xc8\x63\x14\x4b\x68\x79\x2d\x85\x82\xf0\x54\xb9\xdb\x59\x3f\x37\xab\xbb\xde\x5f\x87\xda\xe4\x14\x48\x2d\x34\xdc\x00\xff\x7a\xd0\x74\xbd\xbf\x39\x68\x16\xdc\x7c\x3d\x64\x3a\xce\xdf\x46\x39\x1c\xaf\x12\xbf\x23\x37\xc8\x2c\xea\x82\x70\x95\x10\x03\xa9\x01\x9b\x91\x02\x8c\xd0\xc9\x9b\x2c\x18\xed\x1a\x17\xbc\x74\x7f\x9c\xd7\x5f\xdf\xda\xf1\x2b\x92\xbe\xdf\x65\x54\xeb\x33\xdc\x65\xa8\x32\x5f\xb8\x0e\x24\x17\x6a\x16\x4c\x03\xb2\xe4\xb2\x84\x59\x70\x7d\xb4\x5b\x7c\x2e\x7f\x3e\x0a\x1b\x13\x57\xb2\xff\xdb\xff\xcb\x69\x8e\x34\xa4\x80\x55\xa1\x0d\x06\x3d\xce\x3c\x92\x24\xf3\x3b\xaf\x7d\xae\x42\xb5\xd7\x9a\xf5\x42\x72\x1c\x4c\xb8\xfa\xe2\x9a\xb5\x5b\xf7\xfd\xac\xfd\xce\x60\x33\xaf\xf8\x72\x5e\xad\xda\x9d\x4a\x86\xba\xf2\xc3\xd6\xfd\x63\xd5\xd2\x90\x9f\x85\xc5\xc3\xc6\xbd\x39\x8c\xd4\x8d\xcf\xc9\x63\x93\x2c\xf3\xd1\xed\x7e\x28\x79\xea\x18\xf4\xa8\x03\xd3\x40\x9c\x21\xf2\x85\xf4\xdb\x77\xb4\x55\x1c\x81\xf0\xc4\xa7\xd1\x13\x54\x0b\xfa\x01\x9e\xfd\xc3\xd5\x6e\xd8\x3d\x22\xe7\xfc\xc8\x51\x1a\xd7\xdd\xeb\x25\xf2\xde\xff\x78\xc8\x66\x3f\xba\x07\x91\x60\x76\x43\xa6\x93\xc9\xff\xbe\xdb\xff\x92\x81\xeb\x24\x6f\xc8\xf5\x64\x52\xac\x3a\xdf\xb6\xed\x2b\x1a\x5a\x23\x67\xf4\x03\x75\xb5\x13\x24\xc4\x08\x09\xc1\xa4\xef\xc8\x5f\x00\x3d\xd4\x36\x17\x5a\x26\xc3\x26\xdf\x77\xcb\xd8\x48\xb0\x57\x90\x0f\x2a\x47\xac\x93\x73\xc4\x3a\x07\x7f\x0f\xf3\x27\xc8\x0b\x7f\x71\xb0\xe3\x6b\x83\x65\x9f\x02\x21\xd6\xa2\xdd\xf3\x19\x5b\x85\xed\x1d\x4f\x2b\xd1\xbd\xd8\x73\xba\x0d\xfb\xaa\x81\xc3\x04\x8d\x28\xa0\x7f\x13\x10\xe1\xfe\xad\x60\x3b\x6f\x46\xa8\x85\xd9\xbc\x22\x49\xc4\x30\x1b\x97\xb9\x2d\x8d\x01\x85\xe4\x4f\x57\xdc\x87\x45\x23\xd6\x77\xe2\xe4\x0e\xc2\x89\xb0\x42\xb0\xaf\xbe\xd9\xbc\x07\x1e\x67\x24\xe1\xc8\xb7\xdb\xa1\x0c\x1a\x0c\x5a\x72\x38\x25\x91\x92\x86\x1f\xdb\x6d\x87\x2c\x9b\x0d\x13\xe9\x76\x3b\xb6\xfd\x31\x69\xcc\x29\x9e\x43\x30\xdf\x6c\xdc\x73\xbb\x8d\x18\x0e\xe0\xd7\x53\xf1\xbf\x38\xa7\xe3\x5f\xc6\x94\x0e\x01\xa9\xf2\x64\x2e\xcf\x5e\x8a\x11\x1b\x80\x25\xc2\x54\x6b\x7c\x43\xab\xb9\x1f\x4e\xc4\x3c\x1b\x9b\x8d\xd1\x94\x8a\x8b\x88\x55\xb7\xd4\xff\x06\x00\x00\xff\xff\x61\x5e\xee\x85\xbd\x16\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 5821, mode: os.FileMode(420), modTime: time.Unix(1480984299, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x59\x5d\x73\xdb\xb6\xd2\xbe\x0e\x7f\xc5\x76\xda\x79\x49\x3a\x12\xe5\x5c\xbc\x37\x72\x95\x99\x26\xcd\x99\x66\xa6\x9d\x9e\x93\xa4\x57\x1e\x8f\x07\x22\x57\x12\x1d\x0a\x60\x00\xd0\xb2\x9a\xe8\xbf\x9f\xc1\x02\x20\x01\x89\xca\x47\xc7\x39\xb9\x70\x68\x60\xb1\xfb\xec\x17\x76\x17\x9e\x5d\x5c\x24\x70\x01\x2f\x98\x42\x28\x1b\xa6\x14\xac\x84\x04\xb1\xbc\xc3\x52\x2b\xd8\x6d\xea\x72\x03\x4c\x22\xe0\x3d\x72\x0d\x4a\x74\xb2\x44\x55\x24\x70\x31\x4b\x2c\xf9\x9f\x4b\x85\xf2\x9e\x2d\x1b\x84\x8f\x09\x80\xe0\x19\x91\x4e\x60\xc3\x78\xd5\xa0\xcc\x69\x19\x60\x89\x8c\x17\x82\x67\x7a\x53\xab\x09\x1c\xd1\x24\x00\x87\x24\x01\x58\xd5\x12\xfd\xf9\xa2\x28\x2a\xa6\x59\x74\x9e\xf6\x23\x0e\x9e\x8a\x38\x1c\x92\xc4\xe9\xf3\x07\x6a\x59\x97\x6f\x51\x03\xf2\x92\xb5\xaa\x6b\x98\x46\x05\x7a\x83\xa0\x50\x83\x58\x81\xc2\x06\x4b\x8d\x15\x6c\x89\x54\x81\x16\xb0\x44\x58\x4b\xd6\x6e\xb0\x32\x3c\x18\xaf\xe8\x40\x29\x1a\x47\x6a\x24\x91\x7d\xf4\x86\x69\x4b\x1a\x9a\x22\x10\xfa\xa0\x91\x57\x27\xc6\x99\x5d\x5c\x40\xcb\xa4\xb1\x64\xad\x80\xb9\x03\x0a\x6a\xae\x34\xe3\x25\x3a\x7b\x1b\x05\x03\x66\x44\xaa\xba\xa5\x03\x7e\x31\x4b\x00\x4a\xc1\x95\x96\x5d\xa9\x85\xcc\x2c\x47\x6f\x27\xd5\xb5\x28\xb3\x9c\xbe\x0d\xa3\xc2\x09\x5c\x38\xc9\xc3\x86\x57\x7c\x01\x1c\x77\xf0\x16\x75\x78\x8a\x54\x5d\xc0\x47\x72\x4b\xc4\xc9\x38\x31\xed\xda\x8a\x69\x4c\x27\x90\xe5\xb0\x78\xee\x44\x03\xcc\x66\xf0\x92\xb5\xba\x93\x48\xb6\x6a\x45\xcd\xb5\x8d\x28\xc6\xf7\x27\x26\x77\x87\xcc\x76\xd6\xa0\x06\xce\xb6\x68\x34\x0c\xd1\xe5\x3d\x6f\x07\x42\x69\x21\xf1\x96\x38\x67\xe6\x40\xee\xb6\x1d\x50\x47\x45\x81\x32\xa0\x34\x6b\x96\xf0\x90\x07\x0a\x8d\x69\x12\xa9\x2a\x91\x57\xc6\x9a\x70\x80\x3e\x46\x59\x55\x65\x16\x9c\xc7\x56\xaf\x20\xfb\x81\x8e\x6d\x98\xf2\x7b\x03\xf0\x50\x9d\x22\x38\x9d\x9c\xd1\x6a\x64\xdb\xaa\xc3\xaa\x2a\x9d\xc0\xd9\x6d\xa7\x89\xd3\xd3\xc3\x95\xb8\x15\xf7\x38\x82\xf8\x2b\x01\x57\xd8\xa0\xc6\x23\x50\x76\x71\x88\x94\x6b\xbb\x7d\x73\x0a\xca\x8a\xff\x76\xd8\x5a\xac\xd7\xcd\x3f\x80\x1d\xab\x6b\x79\x02\x36\x0a\x63\xb2\x63\x37\xf4\x72\xcb\x06\x99\x71\xf8\xc7\x93\x3c\x29\xdc\xd6\x58\x8e\x1c\xa9\x44\x94\x69\x7e\xbc\x1c\x68\x4a\xb2\x02\x2d\x9c\x3c\x89\xba\x93\x3c\x16\x1b\x50\xf9\x83\x23\xd1\xe2\x18\x98\x34\x72\x59\xb7\x38\x75\x0f\x7c\xfa\x04\xd7\xd6\x49\x96\xa8\x68\x3b\xb5\xc9\x7a\xcb\xd4\x5b\x54\x9a\x6d\xdb\x79\x94\x04\xfd\xf2\xc4\xd1\xdd\xb3\xa6\xc3\x98\xc6\x81\x8d\xe2\xe0\x70\x64\xaa\x1e\xc5\xc2\x49\xf7\xea\xb4\x8d\xd0\xcd\xfe\xd6\xd0\x64\x47\x96\xf8\x93\x0a\x51\xf1\x1e\xf7\x2a\xeb\x19\xe5\xc5\x96\xb5\x94\xfc\xe1\xdd\x63\x54\x97\x6c\x17\xe9\x6d\x68\x7c\x50\x3a\x8e\xc3\x75\xf2\x30\x37\xf4\xc4\x8b\xf0\x18\x66\xf4\x31\x68\x9c\x4f\x7a\xea\xfd\x59\x6a\x32\x47\x40\xa9\xf7\x2d\xce\x21\x55\x25\xd3\x1a\x65\x3a\x6c\x18\x34\x73\xfa\xd9\xdf\x59\xbd\x9d\x4e\x8b\x97\x3a\x5b\xba\x58\xd3\xf4\x55\xcb\x15\xa9\x5a\xc2\x56\x28\x0d\x12\x4b\xba\xe3\x2f\xac\x93\xd4\x04\x56\xa8\xcb\x0d\x56\xb0\x92\x62\x4b\x4c\x66\x15\x2e\xbb\xf5\x6c\xdb\x0b\xa9\xac\x1a\x27\x85\x4c\x9d\x2b\x63\x61\xf1\x39\x5b\x76\x86\xea\x12\xe6\x87\x51\xde\xac\xb9\x28\xa4\xb5\xde\xda\xa6\x12\x75\x4d\x13\x14\x1c\x94\xb5\xa8\x60\x01\xff\x7f\x79\x79\x19\x66\x53\xa3\x51\x0e\xd4\x14\x44\xa4\xef\x97\xd3\x29\x88\x50\x3a\x66\x73\xb2\x57\x83\x3d\xd4\x42\x15\x6b\xd4\x59\x1a\xdb\x29\xf5\x37\x57\xa1\x37\xc8\xb3\x4c\xaa\x36\xaa\x7c\x27\x5a\x4b\xd5\x52\x0c\x16\x71\xb1\x1b\xd3\x19\x77\xf0\x2b\x81\xe8\x69\xfa\x92\xa8\x34\x23\x97\x87\x79\x10\x70\xde\x9a\x7d\x95\x87\x45\xd2\x26\x02\x59\x23\x46\x61\x69\xaf\xcd\xcf\x9b\x80\x9a\xee\xd4\x7d\x8b\x62\x95\xd9\x40\x86\xc5\x02\x52\xde\x6d\x97\x28\xd3\x98\xb1\x65\x6d\xf3\x0e\xd2\xb5\xe8\x99\x16\x29\x3c\x25\xa8\x11\x71\x64\x76\xca\x44\x58\x58\x60\x01\xd9\x21\x39\xfd\x8a\x22\xe5\xe4\x06\xf0\x8d\x81\xcf\xa1\x23\xc7\x8c\x79\xc5\x97\xf1\x78\xf5\x6c\x8f\xd0\xa7\x24\x5d\xb5\x4c\xea\x21\xca\xb5\x68\xc3\x20\xaf\xb9\x36\x89\xd1\xc0\x02\x76\x35\xaf\xc4\xae\x50\xa8\x5f\xbb\x45\x87\x85\x08\x7d\x98\x4d\xc2\xc0\x0e\xef\xf3\x36\x3b\x29\x72\x9e\xf9\xe0\x04\x27\x83\xca\x4b\x2f\x25\xa6\x0d\x8b\x5c\x80\xae\xcf\xab\xbe\xd0\x29\xd4\xb7\x16\x46\xe6\xd0\x84\x35\xaf\xcf\x3c\xfb\x71\x04\x4c\xdd\xca\x8e\xf3\x9a\xaf\xb3\xe3\xf2\x1b\x18\xa8\x5f\x21\x03\xc6\xc2\x43\x0e\x71\xae\xbe\x10\xa2\x41\xc6\x4f\xb5\xf2\xa0\xff\x45\xc9\x9f\xd9\x3b\x20\xc2\xdc\x5f\x0b\xf6\x23\x19\x77\xbf\xd1\xbb\x93\x4d\x96\x0f\x0d\x92\xeb\xf1\x86\x0a\x2a\xd1\xa5\xe5\x1b\x5c\xbf\x7a\x68\xb3\x90\xfd\xa7\x4f\x90\x16\x17\xee\x3a\x30\xc4\x43\xca\x0f\x71\x3b\x5a\xa0\x46\x4a\x50\x58\x13\x26\xc1\x6a\x58\x61\xed\xc5\x46\xad\x6e\x48\xe2\x9b\xe9\xb9\xb9\x3b\x58\xe1\x7f\xa5\x76\x21\xec\x8b\x87\xc4\x3a\xe4\x4e\x07\x77\x4b\x1a\x6c\x12\x0b\x7c\xc0\xd2\xad\x10\xf8\xdc\x75\xc8\x3f\x65\xe9\x8f\x4e\xb7\x69\x29\x3a\xae\xd3\xbc\xd0\xf8\xa0\xb3\x40\xcd\x06\xf9\x5a\x6f\xf2\x9e\xde\xf2\xc7\x2a\x3e\xe0\x3b\x19\x4f\x7d\xc4\x7e\xaa\x4d\x65\x49\xf3\x62\xa3\xb7\x4d\xa6\x71\xdb\x52\xc5\x73\x89\x7e\x4b\xbb\xb7\x7e\xb9\x6f\x56\xcc\xad\x36\x8f\x26\x89\x83\x47\x6e\xbc\x52\xf3\xb6\x33\x43\x8f\x11\x43\xdf\x53\x8b\xcd\x39\xce\xc4\x32\x2d\x1b\xf3\x66\x39\xfc\xb0\x08\x63\x68\x08\xea\x81\x26\xdc\x0e\x82\x99\xaa\x36\x4c\x1f\xe5\x9f\x61\xfb\xef\x46\x68\x5d\xf3\xb5\xf9\x7e\x1c\xae\xa6\xac\x27\xab\x8e\x97\xba\x16\x9c\x7a\xad\xdb\xa6\xe6\x78\x5b\x6e\x86\x9b\xcd\x58\xcc\x75\xb3\x71\x34\x45\xad\x59\x62\xe1\x35\xfb\x82\xe3\xce\x7c\x65\x29\x31\x49\x27\x74\x78\x02\x1f\x0f\x13\x7b\x5e\xb4\x46\x98\x72\xc7\xcd\x41\x5a\x36\xbf\x3a\x9f\xd8\x83\xf9\xf5\xe5\x8d\x31\x61\x0c\x8f\x49\x64\x27\xf0\x94\x66\xe5\x7b\xac\x7e\x91\x68\x50\xfa\x03\x99\x96\xac\xc4\x7e\x4a\xb4\xbf\x5d\x5f\xde\x18\x4f\x99\x7b\x2f\xd5\xe2\x6f\x94\x62\x9f\x06\xdb\xc5\x4a\xc8\x57\xac\xdc\x64\x0a\x65\x6d\x6a\xcc\x73\xf8\x68\x3f\x8b\x7d\x21\xf1\x1e\xa5\xc2\x2c\xbf\x02\xb7\xf6\x30\xac\x99\xba\xf0\x64\x25\x64\x76\xcf\x24\xd4\x8b\x67\x57\x50\xff\xec\x78\xda\xd8\xbe\x82\xfa\xe9\xd3\xe0\x4a\xb4\x70\xea\x10\x0e\xc7\x07\xbd\x4f\x93\x27\x54\xe4\x89\xd1\xdd\xe2\xf2\x0a\xee\x7e\xce\xfe\x60\x7a\x53\x6c\x6b\xaf\xd3\x75\x7d\x73\x9d\xee\xd3\x1b\xc7\x7a\xd2\x73\x9b\x3e\x8b\x36\xf2\xfc\x0a\xee\xac\xd4\x27\x4f\xe2\xa3\xd7\x77\x37\xf0\x74\x71\x72\xf0\xfa\xee\xe6\xca\x00\x38\x24\x4f\x0e\x8f\x67\x17\xdf\x6c\x11\xaf\xab\xc4\x26\x48\x10\x58\x81\x03\xb3\xcf\x04\xd9\xff\x2c\xca\x96\x4c\xfe\xb3\x1c\x18\x9a\x33\x6b\x27\xb1\x82\xf0\xa1\xca\x99\xc7\xf4\x54\xc6\xe3\x4b\x26\x53\x67\x8c\xef\xa4\x96\x89\x21\xd2\x68\xc5\x4d\xc1\x8e\x13\xfc\x48\x6b\xa7\xab\x23\xcf\xf2\x47\xbf\xbf\xfe\x7a\xf3\x3b\xfc\xc6\x78\xd5\x7c\xc7\x3b\xac\x2f\xe1\xbd\xdf\x3a\x57\xaf\xff\x7a\xf3\x9a\x5c\xd4\xb9\x77\x80\xff\x74\x28\xf7\x59\x6a\xab\x44\x3a\xb2\x13\x14\x05\x53\x12\x62\xc7\xfb\xba\xa5\xea\xbf\x11\x9e\xc3\xa5\xf7\x70\x57\xb0\xaa\x8a\x59\x4f\xe0\x17\x29\xd9\xbe\x30\x53\xd6\x19\x2e\x76\x20\xcb\xf2\x3c\x77\xe1\xd0\x0b\xf4\x14\x71\xf1\x09\xa5\x38\x98\x2e\x40\x8e\xe8\x1d\xbb\x4d\xad\xb4\x90\x7b\x1a\xe9\xdf\x6a\x2a\x95\x87\x09\xa4\xe9\x04\xba\x42\x8b\xb7\x5a\xda\x7e\x2d\x4e\x04\x26\x15\x1e\xd9\xf2\x43\x68\xcb\xe2\x03\x01\xd0\xb2\x43\x6f\xa3\x0f\xc5\xc8\xa3\x8c\x1d\x20\x86\x2d\x33\x43\x28\x12\x19\xcc\x10\xb1\x5d\x58\x55\x0d\x07\xc6\x1e\x6a\xfa\x3c\x73\xed\x8a\x58\xc1\xb1\xec\x71\xae\xf1\x53\xd3\x21\xa8\xd6\x5e\x83\xd8\xd2\x91\x51\x87\x16\xf3\x43\x64\xe0\xc7\x4e\x94\xb7\xa8\xbb\x16\xfe\x0f\x5e\xd1\xc3\xfa\x6f\xf6\x21\x5c\x7d\xaf\x94\xa9\x79\xed\x73\xbf\x6f\xb0\xcc\x68\x4e\xfa\x8f\x36\x5a\x73\x87\x69\xc9\xa4\x2a\x4a\xb1\x6d\xeb\x06\xb3\xe3\xa6\x6d\xea\xa9\x7d\xf7\xd6\x07\xf7\xaf\xee\x6d\x8c\x04\xb8\x1b\x6d\xde\x7b\xcd\x5e\x6d\xf3\xc0\x8b\x6a\x23\x76\xbf\xd7\xfc\xfd\x1c\x56\xac\x51\x41\x33\xbc\x15\x15\xbe\x60\xf2\x45\xa7\xb5\xe0\xea\x9d\x78\x43\xe9\x3b\x87\xeb\x54\x8b\xd7\x5b\xb6\x36\xa3\x5b\xaa\x90\x57\x46\xe2\x3b\xf1\xb2\x11\x5d\x95\xde\x0c\xe7\xab\x5a\xb5\x0d\xdb\x37\x62\x2d\x1c\xef\x38\x2e\x26\x81\x09\xd4\x9c\x22\xdf\x3d\x7f\x64\xa1\x2e\x7d\x84\xb9\xec\xe8\x9f\xe7\xa3\x14\xce\x8f\xa9\xe3\x27\x66\xa3\xf6\x17\x48\xdc\xdd\xd6\x53\xf9\xb0\xf4\x03\xe4\xf1\xba\x1f\xaf\x0e\x49\xf2\x53\x56\x89\xb2\xdb\x22\xd7\x79\x21\x91\x55\xfb\x60\x18\xb6\xfe\x37\xed\xf1\x6c\x06\xef\xe8\x6d\xb5\x1f\x5c\x76\x1b\xe4\x50\x36\x75\xf9\xbe\xe6\x6b\x10\x1c\xf4\x06\xb7\x50\xd3\xff\xc3\x5f\x47\x8c\xbb\x13\xd3\xb6\x0f\x42\x0c\x70\x3a\x67\x5c\xa0\xa5\xc3\x34\x95\x62\x07\xba\xa2\x09\x21\x9d\x40\x86\xc1\x44\x1e\x2b\xee\xde\x78\xb1\xd0\x4c\xae\x51\xd3\xb0\xf0\x52\x70\x6d\x98\x27\xfe\xa9\x7e\x36\x33\xa9\x42\x58\xdc\x04\x46\xe1\x6c\xba\x7b\x2d\x68\xd9\x1c\x83\xa5\x78\x18\x41\x47\x74\x06\x5d\x3c\x03\x8c\xa1\x3a\xcd\x7f\x2c\xca\x4e\x4a\xe4\xfa\x9d\x85\x67\x9f\x47\xc6\x80\x49\x5c\x49\x54\x9b\x61\x58\xfe\x12\x0e\x4b\xf8\x25\x1c\x7e\x3e\x1f\x05\x02\x17\xf0\xec\xf2\xf2\x32\xc2\x63\x93\xc4\xff\x55\x4d\x25\x9f\xf3\xd7\x8f\x4b\xcd\xa7\xf6\xa1\xfa\xb3\x4e\x1a\x5e\xbd\xad\x98\xcf\x33\x6c\x59\xa7\x4e\xbc\x4e\xf3\x58\x29\xb8\xeb\x5e\x7a\x3a\xa8\x83\x69\x2c\x52\x7e\xfc\x85\xe1\x28\xf0\x83\x97\x06\xc3\xdd\x15\xf6\x97\x0d\x53\x2a\x4b\x57\xcc\x61\x89\x48\x58\x55\x05\xfb\x0d\xdb\xa7\xa3\x95\x67\x34\xc3\x3e\x27\x69\xe0\x34\x2a\x28\x00\x72\xf8\x4a\x43\x92\xd9\xcf\xc4\xeb\xe9\x4c\x4b\x13\x6a\xea\x44\x9c\x09\x67\xde\x35\x8d\x73\xe3\x97\x84\x9b\xf6\x71\xea\xbb\xd3\x63\xd1\x05\x6d\x4c\x97\x14\x6b\x69\x1e\x1b\xa3\x56\x53\x56\xea\xfa\xde\xab\xeb\xfd\x1d\x70\xcc\x03\xe3\x1c\x93\x9f\x6f\x63\xfd\x6e\xf6\x95\x2a\x98\x19\xf2\x71\x55\x08\x38\x7e\x83\x0a\xc3\x2c\xfb\xcd\x2a\x2c\x99\x7c\x5c\x0d\x06\x86\xdf\xa0\x40\x3f\x26\x9d\xe0\xb7\x77\xce\x1b\xac\x24\xdb\xd1\x35\x48\x13\x8a\xe0\xee\x99\x12\x24\x9a\xc6\x99\xd4\xb4\x2b\x06\xa6\x59\xca\x6c\x1d\x34\x73\xc8\xd0\x7f\x26\x87\x3c\xf9\x6f\x00\x00\x00\xff\xff\xb1\x76\xb9\x0a\x8d\x20\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 8333, mode: os.FileMode(420), modTime: time.Unix(1480984439, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

