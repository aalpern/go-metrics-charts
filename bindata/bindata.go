// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.js
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\x60\x15\xec\x51\xa4\xbd\x24\x5b\x91\xc9\x06\x8a\x34\x05\x06\xac\xd8\xb0\x76\xc3\xfa\x48\x4b\xa7\x8a\x19\x45\x6a\xe4\xc9\xb1\x61\xf8\xbb\x0f\xa4\x24\x5b\x96\x25\x3b\x7f\xdc\x34\x4f\x12\xa9\xfb\xc3\xfb\xf1\xc7\xd3\x1d\xa3\x37\xef\x7f\xbf\xf9\xfc\xe5\x8f\x5b\x92\x61\x2e\xa7\x67\x51\xf5\x20\x84\x90\x28\x03\x9e\x54\xaf\x7e\x88\x02\x25\x4c\x23\x56\x3d\xb7\xf3\x39\x20\x27\x71\xc6\x8d\x05\x9c\x04\x25\xa6\xe1\xdb\x80\xb0\x96\x80\x14\xea\x5f\x92\x19\x48\x27\x41\x86\x58\xd8\x6b\xc6\xe2\x44\xdd\x59\x1a\x4b\x5d\x26\xa9\xe4\x06\x68\xac\x73\xc6\xef\xf8\x82\x49\x31\xb3\x6c\x56\xca\x9c\xb3\x11\xfd\x91\x5e\xb0\xd8\xd6\x63\x9a\x0b\x45\x63\x6b\x03\x62\x40\x4e\x02\x8b\x4b\x09\x36\x03\xc0\x60\x1a\x31\xe7\xe3\x59\x2e\x53\xad\x30\xe4\xf7\x60\x75\x0e\xec\x92\xfe\x4c\x47\xde\x73\x7b\xfa\x31\x0b\xb0\xb1\x11\x05\x12\x6b\xe2\x07\xaf\xe0\xee\xbf\x12\xcc\x92\x5d\xd0\x31\x1d\xd7\x03\xef\xf1\xce\x3a\xfb\x95\xc1\xe7\x79\xc8\xb8\x4a\x24\xcc\xb8\xb1\xf4\xce\xb2\x4b\x3a\xa2\x3f\xb5\xe7\x4e\xeb\x8c\x2f\x84\xb6\x6c\x44\xc7\x57\xf4\xa2\x1a\x9c\xd8\xc1\x0c\xb8\x62\x63\xea\x3c\xf8\xf7\x13\x9b\xff\xeb\xcf\x5f\x1d\x4a\x63\x3a\x7e\x4b\x2f\xfd\xe8\xb4\xf6\x3f\x08\x09\x9f\xf8\x1c\x4c\xe5\xe5\x82\x5e\xb4\xa6\x1e\xef\x8a\x16\x52\x23\x95\x4b\xe6\x9e\x72\x19\x4a\x8e\x60\x71\xc0\x50\xc4\xaa\xb3\x5d\x0d\x66\x3a\x59\xd6\xef\x7e\x9c\x88\x39\x89\x25\xb7\x76\x12\x64\x60\x34\x11\x36\x94\xe2\x6b\x86\xc1\x76\x15\x7d\x72\xa1\xb3\xd3\x91\xe9\xca\xc5\x5a\x21\x17\x0a\x8c\x33\x9a\xca\x52\x24\x3d\x0a\x5e\xe9\x4d\x18\x92\x9b\x8c\x1b\x24\xef\x0c\x70\x12\x86\x03\x72\x2d\xe3\x33\xbd\x18\xb0\xb6\x91\x14\xc9\x24\x70\xa9\xaa\x1b\xcb\x8e\x20\x4b\xc4\x7c\xc0\x5b\xff\xa7\x9e\xe9\xce\x54\x3d\xec\xc5\x78\x83\x49\x70\x36\x80\xc0\x8d\x56\x68\xb4\xb4\x7b\x28\x44\x8a\x6f\xcc\x48\x98\x83\x3c\x02\xbf\x97\x09\x25\xa4\x43\xf1\xef\x0b\x0b\x84\xfc\x10\x58\x45\x3b\x0c\xa3\x25\xc9\xb8\x0d\x79\x92\x68\x65\x0f\xa8\x79\x55\xa1\x8a\x12\xfd\x96\xf8\xb7\x30\x15\x12\xc1\x04\x8d\x41\x3f\x19\x10\x5c\x16\x30\x09\x10\x16\x18\x90\x42\xf2\x18\x32\x2d\x13\x30\x93\xe0\x83\x17\x27\x39\xa0\x11\xb1\xa5\x94\x1e\xf3\xc7\x37\x44\x29\x11\xb5\x0a\xbc\xeb\x19\xaa\x30\x96\xc0\x4d\xe3\xfe\xb0\x11\x6f\xc8\x16\x5c\x6d\x56\x19\x6b\xe5\xc8\x6c\x73\x2e\xfb\xe0\xef\x8f\xbc\xd1\x4e\x39\x49\x79\x18\x4b\x6d\xc1\x9d\x51\xf1\x00\xe7\xcc\x79\x3f\x12\x29\xe3\x87\xe8\x5d\x3c\x8a\xdc\xe4\x49\xb4\xf0\x10\x39\x7c\x2b\x54\x21\x09\x63\x5d\x2a\x0c\xa6\xff\xd4\x01\x10\x9d\xb6\xa4\xea\x4d\x6c\x84\xbe\x1c\x8a\xf2\xe1\x87\xb0\x7f\xe9\xa6\xce\x65\xc7\xf2\x8e\x23\x1e\xa9\xa8\xb2\x7f\xf2\x9e\x8e\xcc\x33\x0e\x4c\x87\xc0\xbe\xe8\xc2\xb0\x1e\x08\x1b\xf2\x18\xc5\x1c\xb6\xbc\x96\x42\x41\x78\x2c\xdd\x6d\xac\x9f\x9a\xd5\x6d\xef\x2f\x43\x6d\x72\x0c\xa4\x2d\x34\xdc\x00\xff\x7e\xd0\xb4\xbd\xbf\x3a\x68\x66\xdc\x7c\x3f\x64\x5a\xce\x5f\x47\x3a\x1c\xce\x12\x9f\x90\x1b\x64\x16\x75\x41\xb8\x4a\x88\x81\xd4\x80\xcd\x48\x01\x46\xe8\xe4\x55\x26\x8c\xed\x1e\x17\xbc\x74\x7f\x9c\x97\xdf\xdf\xda\xf1\x0b\x92\xbe\x5b\x65\x54\xfb\xd3\x5f\x65\xa8\x32\x9f\xb9\x0a\x24\x17\x6a\x12\x8c\x03\x32\xe7\xb2\x84\x49\x70\x75\xb0\x5a\x7c\x2a\x7f\x3e\x0a\x1b\x13\x97\xb2\xbf\xed\xff\xe5\x38\x47\x1a\x52\xc0\xa2\xd0\x06\x83\x0e\x67\x1e\x48\x92\xe9\xad\xd7\x3e\x55\xa2\xda\x2d\xcd\x12\x8e\x7c\x6f\x5d\x37\xee\x13\x79\xcf\x91\x3f\xda\x60\xc7\x96\x23\x75\xc2\xd5\x57\x57\xfd\x55\x56\xdf\x49\x79\xd2\x22\xaa\xb7\x43\x50\x7c\x3e\xad\xa8\x70\xab\x92\xbe\x52\x7f\xbf\x1f\xf8\x58\xd5\x49\xe4\x37\x61\x71\xbf\x1b\x68\x3a\x9c\xba\x9a\x3a\xda\x8b\xc9\x32\x1f\xcc\x21\xfb\x92\xc7\x7a\xab\x07\x75\x61\x3d\xeb\x0c\x91\xcf\xa4\xcf\x09\x83\xf5\xe7\x00\x84\x47\x3e\x0d\xb6\x65\x5b\xd0\xf7\xf0\xec\x76\x6c\x9b\x61\xbb\xed\xce\xf9\x81\xf6\x1c\x97\xed\xdb\x31\x72\xee\xff\x66\x64\xb5\xbb\xba\x7b\x91\x60\x76\x4d\xc6\xa3\xd1\x0f\xbf\xec\x7e\xc9\xc0\x95\xa7\xd7\xe4\x6a\x34\x2a\x16\xad\x6f\xeb\xed\x2b\x1a\x5a\x23\x67\xf4\x3d\x75\x09\x19\x24\xc4\x08\x09\xc1\xa4\xeb\xc8\xdf\x5f\xdd\xd7\x36\x67\x5a\x26\xfd\x26\xcf\xdb\xb9\x71\x60\xb1\x97\x90\xf7\x2a\x47\xac\x15\x73\xc4\x5a\xb7\x09\x1e\xe6\xcf\x90\x17\xfe\x32\x62\xc3\xd7\x06\xcb\x2e\x05\x42\xac\x45\xdb\x4d\x1f\x5b\x84\xdb\x2b\xaa\xad\x44\xfb\x5e\xd2\xe9\x36\xec\xab\x06\x0e\x13\x34\xa2\x80\xee\xf5\x42\x84\xbb\x97\x9a\xdb\x79\x33\x40\x2d\xcc\xa6\x15\x49\x22\x86\xd9\xb0\xcc\x4d\x69\x0c\x28\x24\x7f\xbb\x3f\x46\xbf\x68\xc4\xba\x4e\x9c\xdc\xde\x72\x22\xac\x10\xec\xaa\xaf\x56\xe7\xc0\xe3\x8c\xb8\x5c\xb8\x5e\xf7\x45\xd0\x60\xb0\x25\x87\x53\x12\x29\x69\xf8\xb1\x5e\xb7\xc8\xb2\x5a\x31\x91\xae\xd7\x43\xc7\x1f\x93\xc6\x9c\xe2\x39\x04\xd3\xd5\xca\x3d\xd7\xeb\x88\x61\x0f\x7e\x1d\x15\xff\xdf\x74\x3a\xfe\x65\x48\x69\x1f\x90\x2a\x4e\xe6\xe2\xec\x84\x18\xb1\x1e\x58\x22\x4c\xb5\xc6\x57\xb4\x9b\xbb\xcb\x89\x98\x67\x63\x73\x30\x9a\x54\x71\x16\xb1\xea\x92\xfd\xff\x00\x00\x00\xff\xff\xcc\x3b\x19\x53\x7c\x17\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 6012, mode: os.FileMode(420), modTime: time.Unix(1481044409, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\x5d\x8f\xdb\xb6\xd2\xbe\xae\x7f\xc5\x14\x2d\x22\x69\x63\xcb\x0e\xf0\xbe\x07\x07\xde\x3a\x40\x92\xa6\x68\x81\x16\xed\x49\xd2\xab\xc5\x62\x41\x4b\x63\x8b\x89\x4c\x2a\x24\xb5\x5e\x37\xf1\x7f\x3f\xe0\x97\x44\xca\x72\x76\xdb\xb3\xc9\x45\xa2\x90\xc3\x99\x67\xbe\x38\xc3\xf1\xfc\xe2\x62\x02\x17\xf0\x92\x48\x84\xa2\x26\x52\xc2\x86\x0b\xe0\xeb\xf7\x58\x28\x09\xfb\x8a\x16\x15\x10\x81\x80\xb7\xc8\x14\x48\xde\x8a\x02\x65\x3e\x81\x8b\xf9\xc4\x92\xff\xbe\x96\x28\x6e\xc9\xba\x46\xf8\x34\x01\xe0\x2c\x35\xa4\x53\xa8\x08\x2b\x6b\x14\x99\x59\x06\x58\x23\x61\x39\x67\xa9\xaa\xa8\x9c\xc2\x80\x66\x02\x70\x9c\x4c\x00\x36\x54\xa0\x3f\x9f\xe7\x79\x49\x14\x89\xce\x9b\xfd\x88\x83\xa7\x32\x1c\x8e\x93\x89\xd3\xe7\x37\x54\x82\x16\x6f\x51\x01\xb2\x82\x34\xb2\xad\x89\x42\x09\xaa\x42\x90\xa8\x80\x6f\x40\x62\x8d\x85\xc2\x12\x76\x86\x54\x82\xe2\xb0\x46\xd8\x0a\xd2\x54\x58\x6a\x1e\x84\x95\xe6\x40\xc1\x6b\x47\xaa\x25\x19\xfb\xa8\x8a\x28\x4b\x1a\x9a\x22\x10\x7a\xa7\x90\x95\x27\xc6\x99\x5f\x5c\x40\x43\x84\xb6\x24\x95\x40\xdc\x01\x09\x94\x49\x45\x58\x81\xce\xde\x5a\xc1\x80\x99\x21\x95\xed\xda\x01\xbf\x98\x4f\x00\x0a\xce\xa4\x12\x6d\xa1\xb8\x48\x2d\x47\x6f\x27\xd9\x36\x28\xd2\xcc\x7c\x6b\x46\xb9\x13\xb8\x72\x92\xfb\x0d\xaf\xf8\x0a\x18\xee\xe1\x2d\xaa\xf0\x94\x51\x75\x05\x9f\x8c\x5b\x22\x4e\xda\x89\x49\xdb\x94\x44\x61\x32\x85\x34\x83\xd5\x73\x27\x1a\x60\x3e\x87\x57\xa4\x51\xad\x40\x63\xab\x86\x53\xa6\x6c\x44\x11\x76\x38\x31\xb9\x3b\xa4\xb7\xd3\x1a\x15\x30\xb2\x43\xad\x61\x88\x2e\xeb\x78\x3b\x10\x52\x71\x81\x37\x86\x73\xaa\x0f\x64\x6e\xdb\x01\x75\x54\x26\x50\x7a\x94\x7a\xcd\x12\x1e\xb3\x40\xa1\x31\x4d\x22\x55\x05\xb2\x52\x5b\x13\x8e\xd0\xc5\x28\x29\xcb\xd4\x82\xf3\xd8\xe8\x06\xd2\x6f\xcd\xb1\x8a\x48\xbf\xd7\x03\x0f\xd5\xc9\x83\xd3\x93\x33\x5a\x8d\x6c\x5b\x75\x48\x59\x26\x53\x38\xbb\xed\x34\x71\x7a\x7a\xb8\x02\x77\xfc\x16\x47\x10\x3f\x10\x70\x89\x35\x2a\x1c\x80\xb2\x8b\x7d\xa4\x5c\xd9\xed\xeb\x53\x50\x56\xfc\xdf\x87\xad\xf8\x76\x5b\xff\x03\xd8\xb1\xba\x96\x27\x60\x2d\x31\x26\x1b\xba\xa1\x93\x5b\xd4\x48\xb4\xc3\x3f\x9d\xe4\x49\xee\xb6\xc6\x72\x64\xa0\x92\xa1\x4c\xb2\xe1\x72\xa0\x69\x2f\xeb\x46\x73\xe9\x04\x76\xb9\x60\x85\x9e\xcf\x86\x13\xd3\xc3\x0a\xae\xae\x3b\x5d\xbe\x28\x37\xb0\x9e\xe3\x27\x50\xb5\x82\xc5\xea\x06\x54\xfe\xe0\x48\x94\x3a\x06\x1a\xb2\xcb\xf6\xd5\x08\xb6\xcf\x9f\x3d\x38\x4b\x94\x37\xad\xac\xd2\x4e\x17\xba\x43\xa9\xc8\xae\x59\x46\xc9\xd7\x2d\x4f\x1d\xdd\x2d\xa9\x5b\x8c\x69\x1c\xd8\x28\xfe\x8e\x03\x17\x05\x16\xb2\xd2\xbd\x3a\x4d\xcd\x55\x7d\x88\x1d\xe0\x2c\xf1\xbb\x29\x80\xf9\x07\x3c\xc8\xb4\x63\x94\xe5\x3b\xd2\x98\x4b\x27\xbc\xf3\xb4\xea\x82\xec\x23\xbd\x35\x8d\x4f\x06\xc7\xb1\xbf\xc6\xee\x96\x9a\xde\xf0\x32\x78\x34\x33\xf3\xd1\x6b\x9c\x4d\x3b\xea\xc3\x59\x6a\x63\x8e\x80\x52\x1d\x1a\x5c\x42\x22\x0b\xa2\x14\x8a\xa4\xdf\xd0\x68\x96\xe6\xef\xee\xae\xec\xec\x74\x5a\x34\xe5\xd9\x92\x49\xea\xba\xab\x96\xae\x38\x52\x01\x3b\x2e\x15\x08\x2c\x4c\x6d\xb9\xb0\x4e\x92\x53\xd8\xa0\x2a\x2a\x2c\x61\x23\xf8\xce\x30\x99\x97\xb8\x6e\xb7\xf3\x5d\x27\xa4\xb4\x6a\x9c\x14\x50\x79\xae\x7c\x86\x45\xef\x6c\xb9\xeb\xab\x5a\x98\x97\x5a\x79\xd9\xa7\x88\x59\xeb\xac\xad\x2b\x60\x5b\xd7\x41\xa1\x43\x41\x79\x09\x2b\xf8\xff\xc5\x62\x11\x66\x53\xad\x50\xf4\xd4\x26\x88\x8c\xbe\xf7\xa7\x53\x10\xa1\xe6\x98\xcd\xc9\x4e\x0d\x72\x47\xb9\xcc\xb7\xa8\xd2\x24\xb6\x53\xe2\x6f\xcc\x5c\x55\xc8\xd2\x54\xc8\x26\xaa\xb8\x27\x5a\x0b\xd9\x98\x18\xcc\xe3\x22\x3b\xa6\x33\xee\xe1\x47\x03\xa2\xa3\xe9\xae\x1f\xa9\x88\x71\x79\x98\x07\x01\xe7\x9d\xde\x97\x59\x58\x9c\x6d\x22\x18\x6b\xc4\x28\x2c\xed\x95\xfe\xfb\x3a\xa0\x36\x77\xf9\xa1\x41\xbe\x49\x6d\x20\xc3\x6a\x05\x09\x6b\x77\x6b\x14\x49\xcc\xd8\xb2\xb6\x79\x07\xc9\x96\x77\x4c\xf3\x04\x9e\x1a\xa8\x11\x71\x64\x76\x93\x89\xb0\xb2\xc0\x02\xb2\xe3\xe4\xf4\x2b\x8a\x94\x93\x1b\xc0\x5f\xc1\x3e\x87\x06\x8e\x19\xf3\x8a\x6f\x1f\xe2\xd5\xb3\xbd\x49\x97\x92\xe6\xaa\x25\x42\xf5\x51\xae\x78\x13\x06\x39\x65\x4a\x27\x46\x0d\x2b\xd8\x53\x56\xf2\x7d\x2e\x51\xfd\xe2\x16\x1d\x16\x43\xe8\xc3\x6c\x1a\x06\x76\x78\x9f\x37\xe9\x49\x71\xf5\xcc\x7b\x27\x38\x19\xa6\x5e\x75\x52\x62\xda\xb0\x2c\x05\xe8\xba\xbc\xea\x0a\xac\x44\x75\x63\x61\xa4\x0e\x4d\x58\x6b\xbb\xcc\xb3\x1f\x03\x60\xf2\x46\xb4\x8c\x51\xb6\x4d\x87\x65\x3f\x30\x50\xb7\x62\x0c\x18\x0b\x0f\x39\xc4\xb9\xfa\x92\xf3\x1a\x09\x3b\xd5\xca\x83\xfe\xc9\x24\x7f\x6a\xef\x80\x08\x73\x77\x2d\xd8\x8f\xc9\xb8\xfb\xb5\xde\xad\xa8\xd3\xac\x6f\xcc\x5c\x6f\xd9\x57\x50\x81\x2e\x2d\xdf\xe0\xf6\xf5\x5d\x93\x86\xec\x3f\x7f\x86\x24\xbf\x70\xd7\x41\xdf\x21\x74\xf5\xd6\xc4\xed\x68\x81\x1a\x29\x41\x61\x4d\x98\x06\xab\x61\x85\xb5\x17\x9b\x69\xb1\x43\x12\xdf\xc4\x2f\xf5\xdd\x41\x72\xff\x5f\xd3\x2e\x84\xfd\x78\x9f\x58\xc7\xcc\xe9\xe0\x6e\x49\x8d\x4d\x60\x8e\x77\x58\xb8\x15\x03\x3e\x73\x9d\xf9\xf7\x69\xf2\x9d\xd3\x6d\x56\xf0\x96\xa9\x24\xcb\x15\xde\xa9\x34\x50\xb3\x46\xb6\x55\x55\xd6\xd1\x5b\xfe\x58\xc6\x07\x7c\x27\xe3\xa9\x07\xec\x67\x4a\x57\x96\x24\xcb\x2b\xb5\xab\x53\x85\xbb\xc6\x54\x3c\x97\xe8\x37\x66\xf7\xc6\x2f\x77\xcd\x8a\xbe\xd5\x96\xd1\x0b\xe6\xe8\x91\x6b\xaf\x50\xd6\xb4\xfa\xb1\xa5\xc5\x98\xef\x99\xc5\xe6\x1c\xa7\x63\xd9\x2c\x6b\xf3\xa6\x19\x7c\xbb\x0a\x63\xa8\x0f\xea\x9e\x26\xdc\x0e\x82\xd9\x54\x6d\x98\x3d\xca\x1f\xcd\xf6\x8f\x9a\x2b\x45\xd9\x56\x7f\x3f\x0e\x57\x5d\xd6\x27\x9b\x96\x15\x8a\x72\x66\x7a\xad\x9b\x9a\x32\xbc\x29\xaa\xfe\x66\xd3\x16\x73\x5d\x74\x1c\x4d\x51\x6b\x36\xe9\x22\xf8\x0f\xb3\x9c\x33\xdc\xeb\xaf\x34\x31\xbc\x92\xa9\xe1\x31\x85\x4f\xc7\xa9\x65\xc3\x1b\x2d\x53\x3a\x2e\x99\x36\x56\x0c\x84\x08\x24\x27\x40\xa4\x22\xc5\x07\x2c\x5f\x08\xd4\x78\xfc\x81\x54\x09\x52\xa0\x8c\x6e\x49\xb3\x02\x4f\x9e\x80\xfd\xf2\x01\xd6\x5f\x49\x66\xf9\x6a\x71\xad\x1d\xa7\xaf\xc1\x44\xf1\xbf\x50\xf0\x43\x12\x11\xe4\x1b\x2e\x5e\x93\xa2\x4a\x25\x0a\xaa\x8b\xce\x73\xf8\x64\x3f\xf3\x43\x2e\xf0\x16\x85\xc4\x34\xbb\x04\xb7\x76\xd7\xaf\xe9\x42\xf1\x8d\x29\xd7\xe9\x2d\x11\x40\x57\xcf\x2e\x81\xfe\x10\xa1\xb9\x04\xfa\xf4\x69\xf4\x7a\xb6\xa0\x68\x08\x8a\xe1\x9d\x3a\x24\x9a\x55\xcf\xec\xfd\x6a\x71\x09\xef\x7f\x48\x7f\x23\xaa\xca\x77\xd4\x1b\xe0\x8a\x5e\x5f\x25\x87\xe4\xda\xb1\x9f\x76\xfc\x66\xcf\xa2\x8d\x2c\xbb\x84\xf7\x56\xf2\x37\xdf\x04\x52\x0d\xcd\xd5\xfb\x6b\x78\xba\x3a\x39\x7a\xf5\xfe\xfa\xd2\x82\x38\xea\x7f\x8e\x8f\x68\x25\xc7\xd4\x77\x64\x86\xe3\xe5\xc4\xca\x08\xa2\x2f\xf0\x7d\xfa\x85\x48\xfc\x0a\xa1\xb8\x26\xe2\x9f\xa5\x44\xdf\xab\x59\xbb\xf0\x0d\x84\xf3\x32\x67\x0e\xdd\x62\x69\x5f\xaf\x89\x48\x9c\xda\xff\xb3\x02\x3a\x4a\x0c\xf6\x0d\xd3\x95\x3a\xce\xec\x81\x7e\x4e\x2b\x27\xd3\x9d\x4a\xb3\x47\xbf\xbf\xfe\x7c\xf3\x2b\xfc\x4c\x58\x59\x7f\xc5\x3b\xac\x2b\xe1\x9d\xa3\x5a\x57\xaf\xff\x7c\xf3\x8b\xf1\x49\xeb\xe6\x0f\xff\x69\x51\x1c\xd2\xc4\x56\x89\x64\x64\x27\x28\x0a\xfa\x46\x89\x3d\xed\xeb\x96\xa4\x7f\x21\x3c\x87\x85\x77\x69\x9b\x93\xb2\x8c\x59\x4f\xe1\x85\x10\xe4\x90\xeb\x57\xd6\x19\x2e\xf6\x41\x96\x66\x59\xe6\xfc\xdf\x09\xf4\x14\x71\xf1\x09\xa5\x38\x98\x2e\x14\x06\xf4\x8e\x5d\x45\xa5\xe2\xe2\x60\x9e\xf4\x6f\x95\x29\x95\xc7\x29\x24\xc9\x14\xda\x5c\xf1\xb7\x4a\xd8\x7e\x2d\x8e\x7c\x22\x24\x0e\x6c\xf9\x31\xb4\x65\xfe\xd1\x00\x50\xa2\x45\x6f\xa3\x8f\xf9\xc8\x30\xc8\x3e\x20\xfa\x2d\xfd\x86\x90\x46\x64\xf0\x86\x88\xed\x42\xca\xb2\x3f\x30\x36\x20\x1a\x99\xc1\x0c\x65\x8f\x73\x8d\x47\x5c\xc7\xa0\x5a\x7b\x0d\x62\x4b\x47\x46\xed\x5b\xcc\x8f\x91\x81\x1f\x3b\x51\xde\xa2\x6a\x1b\x78\x02\xaf\xcd\x40\xff\x67\x3b\x80\x97\x5f\x2b\x65\x28\xa3\xfe\x0a\xe8\x1a\x2c\xfd\x34\x37\xfa\x8f\x36\x5a\x4b\x87\x69\x4d\x84\xcc\x0b\xbe\x6b\x68\x8d\xe9\xb0\x69\x9b\x79\x6a\xdf\xbd\x75\xc1\xfd\xa3\x9b\xc9\x19\x01\xee\xee\x5a\x76\x5e\xb3\x97\xd8\x32\xf0\xa2\xac\xf8\xfe\x57\xca\x3e\x2c\x61\x43\x6a\x19\x34\xc3\x3b\x5e\xe2\x4b\x22\x5e\xb6\x4a\x71\x26\xdf\xf1\x37\x26\x7d\x97\x70\x95\x28\xfe\xcb\x8e\x6c\xf5\xd3\x2d\x91\xc8\x4a\x2d\xf1\x1d\x7f\x55\xf3\xb6\x4c\xae\xfb\xf3\x25\x95\x4d\x4d\x0e\x35\xdf\x72\xc7\x3b\x8e\x8b\x69\x60\x02\xb9\x34\x91\xef\xc6\x1f\x69\xa8\x4b\x17\x61\x2e\x3b\xba\x9f\x05\xa2\x14\xce\x86\xd4\xf1\x68\x5b\xab\x7d\x0f\x89\xbb\xdb\x3a\x2a\x1f\x96\xfe\x01\x39\x5c\xf7\xcf\xab\xe3\x64\xf2\x7d\x5a\xf2\xa2\xdd\x21\x53\x59\x2e\x90\x94\x87\xe0\x31\x6c\xfd\xaf\xdb\xe3\xf9\x1c\xde\x99\x99\xae\x4f\x2b\x8b\x43\x07\xc9\xbe\x42\x06\x45\x4d\x8b\x0f\x94\x6d\x81\x33\x50\x15\xee\x80\x9a\x7f\x83\x4e\x7b\x3e\x07\xe3\xfc\x89\x6e\xe2\x7b\x91\x5a\x0d\x73\x58\x3b\x44\x09\x87\x70\x26\xf8\x1e\x54\x69\xde\x0b\xc9\x14\x52\x0c\xde\xe7\xb1\x19\xdc\xa4\x19\x73\x45\xc4\x16\x95\x79\x3a\xbc\xe2\x4c\x69\xe6\x13\xff\x83\xc1\x7c\xae\x13\x27\x04\x04\x35\x95\xaa\x7f\xf2\x0d\x11\x99\x06\x5e\x23\x8a\x5f\x01\x63\x48\x4e\x6f\x00\xcc\x8b\x56\x08\x64\xea\x9d\x85\x64\x07\x24\x63\x60\x04\x6e\x04\xca\xaa\x7f\x2e\xdf\x87\xc3\x12\xde\x87\xc3\xbf\xd0\x47\x81\xc0\x05\x3c\x5b\x2c\x16\x11\x9e\x57\x35\xea\xd6\xb1\x95\x16\x96\xe9\x04\x5c\x27\x51\x23\xb9\xd5\x7e\xed\x6d\x17\xb8\x9e\x32\x45\x0a\xf5\x25\x8f\x7e\xb7\x56\x6c\x66\x26\x0f\x33\xcd\xef\xcb\xbe\x0c\x27\xea\xa7\xf0\x7a\x64\x84\x95\x27\x58\x1e\x06\xe2\x01\xf2\x63\xd1\x2e\xe8\x4d\x4b\xe7\x7e\x49\x7c\x88\xb0\x86\xb4\xf2\x24\x70\xcd\x03\xb3\xe0\xcc\xbd\x2f\x3b\x3a\xa0\xc1\xf3\x32\xf2\xe5\xf8\xc8\x64\x90\xc9\xc1\xe8\x44\x73\x77\x9d\xca\xab\x9a\x48\x99\x26\x1b\xe2\xb0\x44\x24\xa4\x2c\x83\xfd\x9a\x1c\x92\xd1\x52\x3a\x7a\x65\x7c\x49\x52\xcf\x69\x54\x50\x00\xe4\x78\xea\xdf\x9f\xce\x25\xe3\x58\x30\x8d\x27\xe4\xe9\xb3\xdd\x3c\xc2\x13\x27\xf4\x4c\xbe\xb2\xb6\xae\x23\xa7\xbf\xbe\x6b\xb8\x0e\x33\x33\x9c\xa4\x05\x50\x5d\x30\xee\x05\x86\xe6\xd4\x10\x92\xed\xa2\xa3\x61\xe3\xb6\x84\xd5\xf3\x68\xe6\xe9\x9a\x79\x57\x9a\xd2\x6d\x39\x1d\x4c\x50\x4d\x5b\xb3\x23\x6a\x99\x34\x6c\x9b\x4c\x07\x7b\x15\xd2\x6d\xa5\x96\xf0\xaf\xc5\x62\xb8\xb5\xa7\xa5\xaa\x96\xf0\xec\xff\xdc\x24\xdc\xff\x39\x66\x83\x01\xa8\x8e\x70\x53\x42\xe2\xd9\x53\xf0\x9e\x71\x63\x44\xa2\xf8\xba\xa3\xce\x65\x53\x53\x95\x26\xd3\x24\xbb\x7a\x76\x9d\x45\xc7\xd6\xed\x06\x5c\xd9\x33\x5d\xee\xcb\x76\xb3\x41\x61\x8e\x46\x13\x20\x4f\x7f\x4b\x71\xef\x9b\x48\xca\xd4\xbf\xcd\xa1\x74\xdd\x6e\x06\x03\x6e\x9b\x47\xb0\x82\xc5\x25\x50\xf8\x01\x02\x86\xe6\xd5\x0c\xf1\xf8\x59\xb3\xbd\xa2\xd7\xb0\xb2\x84\xfa\x06\x79\xc5\x4b\x7c\xa1\x52\x9a\xc1\x13\x58\xdc\x6d\x36\x23\xc3\x64\xa3\x40\xcd\xd7\x0e\xd0\xcb\x9a\xaf\xd3\x2b\xcd\xea\x7a\x0a\x9f\xcc\x4f\x35\x89\x89\x8a\xb9\xf6\xc7\xb1\x47\xe8\xe7\xb9\xe4\x16\x5f\xc8\x54\x73\x98\x42\xb2\xe5\x33\x1f\x75\x9a\x3c\x1e\x17\x77\x35\x61\x4f\x55\x51\x81\xe2\xa0\x5f\x63\xf6\xa6\xbb\x37\xe6\x34\xe9\xcc\x3f\xfd\x86\xa9\x60\x74\x55\xb3\xb5\xe9\x81\x92\x2c\x4e\x57\x2a\x67\xa4\x50\xf4\xd6\x27\xa4\xbf\x91\x02\x8e\x59\x90\xbe\x43\xf2\xf3\x0f\xc8\x28\xe8\x47\xb4\x23\x02\xc9\x03\xb5\xd3\xa4\x8f\xab\x5d\xc0\xf1\x6f\x68\xd7\xcf\x9b\xee\xd5\x6e\x4d\xc4\x03\x95\x5b\x13\xf1\xb8\xba\xf5\x0c\xff\x86\x6a\xdd\xfc\xe2\x8c\x66\x6f\xb0\x14\x64\x6f\x6a\xaf\xde\xd4\xed\x9d\x0d\x71\x10\xa8\x1f\xb8\x46\x4d\xbb\xa2\x61\xea\xa5\xd4\xf6\xab\x13\x08\xdf\x89\x93\x63\x36\xf9\x6f\x00\x00\x00\xff\xff\xb4\xb0\x05\xf7\xad\x24\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 9389, mode: os.FileMode(420), modTime: time.Unix(1481044767, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

