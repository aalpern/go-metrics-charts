// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.js
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x4b\x8f\xdb\x36\x10\xbe\xef\xaf\x60\x18\xf4\x28\xd2\xdb\x6d\x8a\x62\x4b\x0b\x28\xdc\xf4\xd4\xa2\x3d\x04\x45\x73\xa4\xc4\x51\x44\x97\x22\x55\x72\xb4\x6b\xc3\xd0\x7f\x2f\x28\x59\xb6\x2c\x4b\xde\xbc\x0e\xf1\x45\x7c\x7c\xf3\x0d\xe7\x49\x5a\xbc\xfa\xf5\xcf\xcd\xbb\xf7\x7f\xbd\x25\x25\x56\x26\xbd\x13\xfd\x87\x10\x42\x44\x09\x52\xf5\xc3\x6e\x8a\x1a\x0d\xa4\x82\xf7\xdf\xf3\x7a\x05\x28\x49\x5e\x4a\x1f\x00\xd7\xb4\xc1\x22\xf9\x89\x12\x3e\x02\x18\x6d\xff\x25\xa5\x87\x62\x4d\x4b\xc4\x3a\x3c\x72\x9e\x2b\xbb\x0d\x2c\x37\xae\x51\x85\x91\x1e\x58\xee\x2a\x2e\xb7\x72\xc7\x8d\xce\x02\xcf\x1a\x53\x49\xbe\x62\xdf\xb3\x07\x9e\x87\xe3\x9c\x55\xda\xb2\x3c\x04\x4a\x3c\x98\x35\x0d\xb8\x37\x10\x4a\x00\xa4\xa9\xe0\x51\xc7\x48\x65\xc8\xbd\xae\x91\x04\x9f\x7f\xb4\xce\xed\x7f\x0d\xf8\x3d\x7f\x60\xf7\xec\xfe\x38\xe9\x34\x6e\x43\xe4\xef\x09\xbf\x4c\x43\x29\xad\x32\x90\x49\x1f\xd8\x36\xf0\x1f\xd8\x8a\xfd\x38\x5e\xfb\xba\xca\xe4\x4e\xbb\xc0\x57\xec\xfe\x0d\x7b\xe8\x27\x5f\x59\x41\x06\xd2\xf2\x7b\x16\x35\x74\xe3\xcf\xa0\x67\xb5\x71\xc8\xcc\x9e\xc7\xaf\xd9\x27\x46\x22\x04\x5c\x20\x12\xbc\xcf\xc7\xbb\x7e\x96\x39\xb5\x1f\x69\x50\xfa\x89\xe4\x46\x86\xb0\xa6\x25\x78\x47\x74\x48\x8c\xfe\x50\x22\x3d\x63\xe6\x70\x49\xa4\x99\x60\xa6\xb8\xdc\x59\x94\xda\x82\x8f\xa4\x85\x69\xb4\x9a\x11\xe8\x84\x5e\x25\x09\xd9\x94\xd2\x23\xf9\xc5\x83\x24\x49\xb2\x80\x1b\x91\x67\x6e\xb7\xc0\x76\x42\x6a\xb5\xa6\xb1\xbc\xa6\xb6\x5c\x00\xb9\xd2\x4f\x0b\xda\xe6\xb7\x66\x96\x27\x4b\xd3\xe9\x9c\x4b\xe8\xdd\x82\x03\x36\xce\xa2\x77\x26\x5c\x39\x41\x58\x79\xa2\x31\xf0\x04\xe6\x05\xef\x77\x98\xc4\x40\xb1\x64\xfe\x35\x58\x23\x54\xb7\x7c\x55\x8f\xcd\xf0\xce\x90\x52\x86\x44\x2a\xe5\x6c\xb8\x21\xd6\x89\x6a\x5b\x37\xd8\x45\xa4\xd0\x06\xc1\xd3\x81\xaa\xdb\xa0\x04\xf7\x35\xac\x29\xc2\x0e\x29\xa9\x8d\xcc\xa1\x74\x46\x81\x5f\xd3\xdf\x3a\x38\xa9\x00\xbd\xce\x03\x63\xec\x66\x30\xeb\x4f\x0a\xe5\xe7\x79\x21\xd4\xd2\x8e\x2c\x01\x95\xe4\xae\xb1\x48\xd3\x7f\x04\x8f\x7b\x29\x71\xc5\x08\x75\x3c\xf9\x00\x7a\x7f\x04\x7d\x61\xca\xcd\x1f\xdd\xcf\x54\xee\x09\x5d\xcf\x99\x29\x64\x77\x48\xd8\xd5\xce\xe3\x29\x28\x59\x83\xe8\x2c\x4d\xdf\x76\xcb\x82\xcb\x74\xd9\xb5\xb7\x68\x73\x03\xd2\x4f\x58\x63\x33\x50\xd2\x7e\x00\x4f\xd3\x4d\xdc\x5f\xa4\x9f\xad\x34\x2b\xa7\x4b\xb1\x76\xfe\xe8\x9d\x4c\x7e\xd7\x01\xaf\x2b\x67\x68\x06\xc7\x50\xbc\xd8\xb6\x4c\x53\x2d\x66\xf4\x35\xf2\xa5\x36\xf4\x51\x0d\x6b\xe6\x9c\x09\xca\xcc\x40\xec\xe6\x8b\xc9\xbb\xe0\xa5\x17\xb6\x3e\xbd\x83\x8d\xaf\xa1\x4a\xde\xb8\xae\xe2\xd3\x62\xc4\xfc\xba\x6b\xbf\xe4\x70\x79\x84\x67\xad\xb0\x7c\x24\xf7\xab\xd5\x77\x3f\x5f\xee\x94\x10\x13\xf8\x91\xbc\x59\xad\xea\xdd\x68\xaf\x3d\x0f\xd1\xb3\xa3\x7b\xbc\x7b\x66\x3a\x24\x01\x0c\xe4\x08\x8a\xa0\x9a\x2a\x2a\x9c\xc5\xe4\xf9\xc8\x99\x39\xa3\x66\x29\x05\x1f\x1d\x5b\xf0\xfe\x7e\xec\x27\x31\xb5\xde\x41\x55\x77\xf7\xeb\x29\xaf\x06\x77\x4c\x43\x95\xe0\x11\x3a\x6e\x67\x7c\x97\x9c\x9f\x2a\x67\xc4\xf8\x79\x18\x65\x87\x2c\xe9\x27\xd1\x2c\xf4\xba\x86\xe9\x8d\x29\xf0\xf2\x6d\x79\x5e\xf7\x0b\x29\x80\x65\xda\x17\x87\xe0\x58\x2e\x63\x36\x8d\xf7\x60\x91\xfc\x2d\x4d\x03\xf3\x50\xc1\xa7\x4a\x22\xee\xea\x38\x02\x2f\x5f\x18\xc3\xef\x70\x78\x0d\x32\x2f\x89\x92\x28\xdb\x76\xce\x82\xc1\x07\xe7\xf8\x46\x21\x5d\x90\x21\xc4\x6d\x3b\x8a\xf7\xe1\xc0\x75\xd1\xb6\x4b\x65\x8a\x6a\xa0\xb3\xb2\x02\x9a\x1e\x0e\xf1\xdb\xb6\x82\xe3\x8c\xff\x26\x22\x4f\xd1\x0b\x51\xa6\x1b\x2c\x09\x5d\x3b\xa4\xb7\x93\x47\x3b\x27\x26\x0a\x3e\xe3\x16\x81\x85\x73\xf8\x0d\x45\xf3\xf2\x38\x82\x77\xd9\x38\x14\xc6\x50\xed\x77\x82\xf7\xff\x75\xfe\x0f\x00\x00\xff\xff\xff\xb2\xea\xef\x03\x0d\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 3331, mode: os.FileMode(420), modTime: time.Unix(1480954330, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x57\x4b\x8f\xdb\xb6\x13\xbf\xeb\x53\x4c\x90\x00\x92\x0c\xaf\xbc\x97\xff\xc5\x80\xff\x87\x26\x28\xda\x43\x91\x02\xe9\x2d\x08\x16\xb4\x34\xb6\xd4\x50\xa4\x40\x8e\xd6\xbb\xc8\xfa\xbb\x17\x7c\x8a\xf4\xa3\x8f\xcb\xc2\x3b\x9c\xe7\x6f\x7e\x9c\xa1\x36\xab\x55\x01\x2b\xf8\x89\x69\x84\x96\x33\xad\xe1\x20\x15\xc8\xfd\x9f\xd8\x92\x86\x53\x3f\xb4\x3d\x30\x85\x80\xcf\x28\x08\xb4\x9c\x55\x8b\xba\x29\x60\xb5\x29\x9c\xfa\xe7\xbd\x46\xf5\xcc\xf6\x1c\xe1\x47\x01\x20\x45\x65\x55\xd7\xd0\x33\xd1\x71\x54\xb5\x15\x03\xec\x91\x89\x46\x8a\x8a\xfa\x41\xaf\xe1\x42\xa7\x00\x38\x17\x05\xc0\x61\x50\x18\xec\x9b\xa6\xe9\x18\xb1\xcc\xde\x9e\x67\x1e\x82\x96\xf5\x70\x2e\x0a\x5f\xcf\x6f\x48\x6a\x68\xbf\x20\x01\x8a\x96\x4d\x7a\xe6\x8c\x50\x03\xf5\x08\x1a\x09\xe4\x01\x34\x72\x6c\x09\x3b\x18\xad\xaa\x06\x92\xb0\x47\x38\x2a\x36\xf5\xd8\x19\x1f\x4c\x74\xd6\xa0\x95\xdc\xab\x9a\x48\x16\x1f\xea\x19\x39\xd5\x14\x8a\x24\xe8\x0b\xa1\xe8\xae\xc0\xd9\xac\x56\x30\x31\x65\x90\x1c\x34\x30\x6f\xa0\x61\x10\x9a\x98\x68\xd1\xe3\x6d\x0a\x4c\x9c\x59\x55\x3d\xef\x7d\xe2\xab\x4d\x01\xd0\x4a\xa1\x49\xcd\x2d\x49\x55\x39\x8f\x01\x27\x3d\x4f\xa8\xaa\xda\xfe\x36\x8e\x1a\x1f\x70\xe7\x23\x2f\x07\xa1\xf0\x1d\x08\x3c\xc1\x17\xa4\xd4\xca\x96\xba\x83\x1f\xb6\x2d\x99\x27\xd3\xc4\x72\x9e\x3a\x46\x58\xae\xa1\xaa\x61\xf7\x7f\x1f\x1a\x60\xb3\x81\x8f\x6c\xa2\x59\xa1\xc5\x6a\x92\x83\x20\xc7\x28\x26\x5e\xaf\x20\xf7\x46\xe6\xb8\xe2\x48\x20\xd8\x88\xa6\xc2\x34\xbb\x3a\xfa\xf6\x49\x68\x92\x0a\x9f\xac\xe7\xca\x18\xd4\xfe\xd8\x27\xea\xb5\x2c\x51\x96\x2c\x8d\xcc\x29\x9e\xeb\xa4\xa0\x5b\x95\x64\xa5\x2a\x14\x9d\x41\x13\xce\x10\x39\xca\xba\xae\x72\xc9\x85\xdc\x86\x03\x54\xef\xac\x59\xcf\x74\x38\x5b\x12\x4f\xcb\x69\x12\xeb\xe2\x4e\x55\x37\x8e\x5d\x39\xac\xeb\xca\x35\xdc\x3d\xf6\x95\xf8\x3a\x43\xba\x0a\x47\xf9\x8c\x37\x32\xfe\x97\x09\x77\xc8\x91\xf0\x22\x29\x27\x5c\x98\xf2\xd5\x1d\x7f\xbb\x4e\xca\x85\xff\xef\x69\xb7\x1c\x99\x01\xfe\xc7\x15\x5f\x1b\x7f\x74\x8b\xab\x17\xae\xad\x66\x59\x5f\x8a\x93\x88\x36\x56\x02\x82\x8f\xa7\x90\x66\x25\xf2\xb0\x89\x56\x30\xbc\xd1\x35\xef\xc0\xd0\xd9\xb3\x7f\x77\x0d\x13\xbc\xbd\xc1\x57\x07\x96\x53\x6a\xa6\x59\xf7\x55\xc4\x7f\x18\x51\x13\x1b\xa7\x6d\x46\xc6\x28\x5e\x7b\xbd\x67\xc6\x67\xcc\x75\x7c\xb2\x59\x3f\xce\x17\x50\xc5\x2c\x76\x3e\x7a\x28\x67\xe2\x92\xf8\xeb\x93\xd1\xa9\x2e\x90\xf8\x6c\x17\x42\xf3\x1d\x5f\x75\x15\x1d\xd5\xcd\xc8\x26\x7b\x09\xd3\x19\x60\x4a\x57\xec\x94\xd5\x6d\x74\x02\x39\xbc\xc7\xe5\x5a\xbf\x6c\x8d\xbe\xf5\x65\xf3\x31\xce\xec\x8f\xa5\xe2\x7a\x1d\xb5\x5f\xef\x6a\x5b\x38\x12\xcd\x51\x76\xb8\x85\x92\x0f\x02\x75\xb9\x88\x4d\x2e\x5b\xfb\x37\x4e\x8e\x88\xd2\xf5\x0a\xd1\x77\x17\x08\xe3\x3c\xee\x0e\xbf\x2a\x06\x05\xa3\xd4\x04\x0a\x5b\x3b\x69\x57\xae\x45\x7a\x0d\x07\xa4\xb6\xc7\x0e\x0e\x4a\x8e\xd6\xc9\xa6\xc3\xfd\x7c\xdc\x8c\x31\x48\xe7\x8a\xb8\x5a\x27\xfa\xde\x32\x49\x57\xc0\xdd\xe1\xbf\xcc\xf8\xf4\x76\x98\xe2\x8d\xcc\x73\xd0\xca\x22\xd6\x66\x1f\xcc\x9c\x27\x63\x1f\xd5\x20\x3b\xd8\xc1\xff\x1e\x1f\x1f\xd3\xbb\xc4\x09\xd5\xa2\x6d\x29\x64\xeb\xfd\xe7\xcb\x94\xf0\xd3\x9a\xb9\x1b\x19\xcb\x60\x2f\x83\xd4\xcd\x11\xa9\x2a\x73\x9c\xca\x30\x3f\x1a\xea\x51\x54\x95\xd2\x53\xb6\x7f\xae\xaa\x56\x7a\xb2\x0c\x6c\xf2\x95\x73\x81\xc3\x15\xbb\xc3\xf2\xc9\xd5\x33\x88\xf0\x04\x9f\x6c\xce\x81\x45\x17\xa9\xdd\xca\x2b\xac\x93\x5c\x7a\x77\x57\x45\x52\xda\x51\xc3\x14\x2d\x7d\x26\x39\xa5\x6d\x1e\x04\x19\x6a\x70\xd8\xc1\x69\x10\x9d\x3c\x35\x1a\xe9\x57\x2f\xf4\xb9\x58\xc5\x00\xf4\x3a\x6d\x6d\x3a\xcf\xa6\xea\x6a\x47\x04\xe7\xcb\x82\xf0\x31\xec\x78\x8d\x51\x72\xdd\x7c\x9a\x6b\xa4\x9f\x2d\x5d\x2a\xc7\x9a\x6c\xae\x47\x22\xb9\x1f\xc5\x2d\xb8\xfc\x2a\xf3\xdb\x78\x99\xb1\x4b\xa7\x97\x86\xde\x9c\x4a\x37\xe6\x4e\x3a\x0a\xd6\x89\x34\x1d\xab\x8e\xcf\xf6\x9d\x91\xaa\x84\x97\xcc\xd6\x70\x80\x35\xe1\x5f\xbb\x23\xd2\x47\x49\x18\x2e\xa6\x93\xbe\x4e\x7f\x39\x4c\x6e\xef\xd2\xf2\xdf\xde\x7c\x31\xb6\x88\x66\x10\x2d\x9f\x3b\xf4\x7c\xf4\xa8\xf9\xb7\xcb\x87\xaa\x7c\xef\x0b\x7f\x68\xe5\x2c\xa8\xac\x1b\xc2\x17\xaa\x12\x0c\x38\x8a\x23\xf5\x75\xd4\x77\x1e\xb0\xcb\x0d\xc2\x6e\x0b\xda\x17\xee\x1f\xc8\x4c\x9b\xb2\x6e\x7a\x1a\x79\x45\x38\x4e\x76\x0a\xfa\xeb\xf1\x64\x4f\x9f\x82\x38\xae\x2f\x73\xdf\xb6\xd9\x1b\xef\x5c\xc7\xe1\x7a\x98\x45\x4b\x83\x14\xa0\xb0\x53\xec\x14\x9b\x69\x71\x34\x0b\x28\x6c\xf3\x1c\xd8\x6c\x35\x59\x83\xdf\xad\xa4\xf1\x6e\xa2\x79\x9d\x05\x69\xe5\x38\x0d\x69\x8e\xce\xa1\xf4\x04\xf4\x94\xf8\xc5\x7e\x85\xec\x99\xd2\x8d\x37\xa8\x3e\x2c\x9a\xae\xf8\x3a\x77\x4c\xf2\x78\xe4\xf8\xe4\x8a\x74\x2d\xb7\x1e\x0d\x27\xcd\x7e\xb8\xc8\xbf\x70\xd7\x49\x23\x2d\x14\x89\x77\x19\xcd\x3b\xd3\x3e\xd2\x02\x75\xce\x80\x5c\x63\x72\x6e\x5e\x8d\xf1\x30\x4b\x64\x10\x43\x18\x0b\xb1\x3f\x66\xda\x5b\xd3\x9b\x7d\xda\x5e\xa3\x92\xf7\xfb\x21\xc8\xfd\x0b\xc9\x35\x27\xac\x90\x4f\xc9\x34\xf5\x73\xd0\x2f\x2a\xdb\x98\xac\xec\xec\xdc\x7c\x60\xa4\xc6\xf5\x85\xb3\x38\x9b\x0c\x0b\x7d\x77\x05\x9e\xcc\xaf\xaa\x6c\x7b\xa6\xa8\x5c\xff\x1d\x2b\xa2\x3f\x23\x85\x9d\xa5\xb1\x33\xab\xbf\x3e\x7e\xbb\x4c\x2d\x7f\xfb\x3b\x16\x5d\x65\xe4\x87\xae\x01\xfc\x43\xd5\xc9\x76\x1e\xcd\x87\x56\xa3\x90\x75\xaf\xc9\x84\x77\x3d\x30\x69\xa7\x5a\x26\x40\xcb\x87\xf6\x7b\xb9\x86\x92\x94\x77\xfa\xa0\xe4\x09\xa8\xb3\xb7\xd4\x7c\x74\x20\x4f\x16\x45\xce\x2a\xe4\x0d\x31\x75\x44\xb2\x77\xf5\xa3\x14\x64\xfc\x16\x7e\x2b\xdc\x0d\xf5\xde\xbd\x7a\x2f\x7d\xe7\xd5\x2f\x6f\xe8\x9b\xce\x06\x31\xcd\x64\x9d\xb9\xb9\x71\xdb\x5b\x84\x29\x4e\x77\xe4\x4d\x3b\x2b\xf3\x12\xfd\xc3\x65\xee\xde\x64\x2e\xcc\xb9\x2e\xfe\x0a\x00\x00\xff\xff\xf8\x5f\x2a\xec\x6e\x10\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 4206, mode: os.FileMode(420), modTime: time.Unix(1480954451, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

