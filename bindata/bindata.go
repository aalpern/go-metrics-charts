// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.js
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x51\x8f\xe3\x26\x10\x7e\xdf\x5f\xc1\x71\xea\xa3\x21\xe9\xf6\xaa\x6a\x4b\x22\x55\xe9\xf5\xa9\x55\xfb\x70\xaa\xd4\x47\x62\xc6\x07\x29\x06\x17\xc6\xbb\x89\x22\xff\xf7\x0a\x3b\xde\x38\x8e\xbd\xd9\xf6\xf6\xe1\xf2\x02\x03\xdf\xcc\x30\xdf\xcc\x80\x23\xde\xfd\xfc\xfb\xe6\xd3\x5f\x7f\x7c\x24\x1a\x4b\xbb\xbe\x13\xdd\x40\x08\x21\x42\x83\x54\xdd\xb4\x15\xd1\xa0\x85\xb5\xe0\xdd\x78\x5e\x2f\x01\x25\xc9\xb5\x0c\x11\x70\x45\x6b\x2c\xb2\x1f\x28\xe1\x03\x80\x35\xee\x6f\xa2\x03\x14\x2b\xaa\x11\xab\xf8\xc0\x79\xae\xdc\x2e\xb2\xdc\xfa\x5a\x15\x56\x06\x60\xb9\x2f\xb9\xdc\xc9\x3d\xb7\x66\x1b\xf9\xb6\xb6\xa5\xe4\x0b\xf6\x2d\xbb\xe7\x79\x3c\xc9\xac\x34\x8e\xe5\x31\x52\x12\xc0\xae\x68\xc4\x83\x85\xa8\x01\x90\xae\x05\x4f\x3e\x06\x2e\x63\x1e\x4c\x85\x24\x86\xfc\xd5\x3e\x77\xff\xd4\x10\x0e\xfc\x9e\x2d\xd9\xf2\x24\xb4\x1e\x77\x31\xd9\xef\x0c\x7e\x99\x07\x2d\x9d\xb2\xb0\x95\x21\xb2\x5d\xe4\xdf\xb1\x05\xfb\x7e\xb8\xf6\xb6\xce\xe4\xde\xf8\xc8\x17\x6c\xf9\x81\xdd\x77\xc2\x1b\x3b\xd8\x82\x74\x7c\xc9\x92\x87\x76\xfe\x3f\xcc\xb3\xca\x7a\x64\xf6\xc0\xd3\x68\x0f\x99\x95\x08\x11\x67\x0c\x09\xde\xd5\xe3\x5d\x27\x6d\xbd\x3a\x0c\x3c\x28\xf3\x48\x72\x2b\x63\x5c\x51\x0d\xc1\x13\x13\x33\x6b\x3e\x6b\xa4\x67\xcc\x14\x2e\x4b\x66\x46\x98\x31\x2e\xf7\x0e\xa5\x71\x10\x92\xd1\xc2\xd6\x46\x4d\x28\xb4\x4a\xef\xb2\x8c\x6c\xb4\x0c\x48\x7e\x0a\x20\x49\x96\xcd\xe0\x06\xc6\xb7\x7e\x3f\x63\xed\x19\x69\xd4\x8a\xa6\xf6\x1a\xc7\x72\x01\xe4\xca\x3c\xce\x78\x9b\xde\x9a\x58\x1e\x2d\x8d\xc5\x29\x4a\xe8\xdd\x0c\x01\x1b\xef\x30\x78\x1b\xaf\x48\x10\x4e\x3e\x9b\xb1\xf0\x08\xf6\x06\xfb\x2d\x26\xb3\x50\xcc\x85\x7f\x0d\x36\x08\xe5\x4b\x5c\x55\xc3\x30\x82\xb7\x44\xcb\x98\x49\xa5\xbc\x8b\x2f\xa8\xb5\xaa\xc6\x55\x35\xf6\xea\xad\x40\x09\x1e\x2a\x58\x51\x84\x3d\x52\x52\x59\x99\x83\xf6\x56\x41\x58\xd1\x5f\x8c\x45\x08\xa4\x04\x0c\x26\x8f\x8c\xb1\x17\x13\x58\x7d\x69\xfa\xa6\xc9\x08\x13\x5d\x70\xcd\xc4\x90\x38\x21\x9f\x8b\xb3\x46\xf4\x8e\xae\x3f\xee\x2b\x1f\x50\x70\xb9\x9e\x3f\xe6\xab\x4c\xa5\x0e\x52\xd2\x7d\x86\x40\xd7\x1b\x0b\x32\xcc\xda\x9c\x2c\x4f\x27\xc7\x4b\xa9\xe0\x7e\xeb\xf8\x25\xbf\x9a\x88\xd7\xe5\xd6\x77\xd0\x29\x0b\x37\x7b\xdd\xd6\xe5\x6c\x19\x5c\x23\x6f\xf5\xee\xab\xba\x7c\xe2\x9c\x19\xca\xad\x85\x74\x05\xce\xf6\xf5\x0c\x4b\x37\xb6\xfe\x7b\xdb\x0f\xef\xee\x52\xbe\x70\xc7\xa7\xf7\x78\x60\xf9\x7d\x7b\x67\x91\xe3\xe5\x11\x9e\x8c\x42\xfd\x40\x96\x8b\xc5\x37\x3f\x5e\xee\x68\x48\x95\xfa\x40\x3e\x2c\x16\xd5\x7e\xb0\xd7\x9c\xa7\x18\xd8\x89\x9e\xe0\x9f\x98\x89\x59\x04\x0b\x39\x82\x22\xa8\xc6\x8e\x0a\xef\x30\x7b\x3a\xd9\xdc\x7a\xab\x26\x4d\x0a\x3e\x38\xb6\xe0\xdd\xa3\xd2\x09\xa9\xb4\x3e\x41\x59\xb5\x8f\xd2\x73\x5d\xf5\x74\x8c\x53\x95\xe1\x09\x3a\xbc\x0f\xf8\x3e\x3b\xbf\xef\x67\xc4\xf0\x9b\x2a\xe9\xf6\x55\xd2\x09\x29\x2c\x0c\xa6\x82\xf1\x33\x23\xf0\xf2\x83\xec\xbc\x1e\x66\x4a\x00\xf5\xba\x6b\x0e\xc1\x51\xcf\x63\x36\x75\x08\xe0\x90\xfc\x29\x6d\x0d\xd3\x50\xc1\xc7\x4e\x12\xee\xea\x38\x02\x2f\x9f\xe5\xfe\x77\x3c\xbe\x07\x99\x6b\xa2\x24\xca\xa6\x99\x8a\xa0\xe7\xe0\x9c\xdf\xa4\x64\x0a\xd2\xa7\xb8\x69\x06\xf9\x3e\x1e\xb9\x29\x9a\x66\xae\x4d\x51\xf5\xe6\x9c\x2c\x81\xae\x8f\xc7\x34\x36\x8d\xe0\x38\xc1\xdf\x48\xe5\x31\xb1\x90\x74\xda\xc9\x9c\xd2\x35\x21\x5d\x9c\x3c\xc5\x39\x0a\x51\xf0\x09\x5a\x04\x16\xde\xe3\x57\x94\xcd\xcb\xe3\x08\xde\x56\x63\xdf\x18\x7d\xb7\xdf\x09\xde\xfd\x41\xf8\x37\x00\x00\xff\xff\x77\x03\x3e\x8e\x38\x0c\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 3128, mode: os.FileMode(420), modTime: time.Unix(1480885800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x57\x4b\x8f\xdb\x36\x10\xbe\xeb\x57\x4c\xd1\x00\x92\x5c\xaf\xbc\x97\x5e\x16\x70\x0f\x4d\x0e\xed\xa1\x48\x81\xb4\xa7\x60\xb1\xa0\xa5\x59\x5b\x0d\x4d\x0a\xe4\x68\xbd\x8b\x44\xff\xbd\xe0\x90\x94\x48\x3f\xd2\xe6\x10\x68\x87\xdf\xbc\x9f\xde\xac\x56\x05\xac\xe0\x57\x61\x11\x5a\x29\xac\x85\x67\x6d\x40\xef\xfe\xc1\x96\x2c\x9c\x0e\x7d\x7b\x00\x61\x10\xf0\x05\x15\x81\xd5\xa3\x69\xd1\x36\x05\xac\x36\x85\x87\x7f\xdc\x59\x34\x2f\x62\x27\x11\xbe\x16\x00\x5a\x55\x0c\x5d\xc3\x41\xa8\x4e\xa2\xa9\x99\x0c\xb0\x43\xa1\x1a\xad\x2a\x3a\xf4\x76\x0d\x67\x98\x02\x60\x2a\x0a\x80\xe7\xde\x60\xe4\x6f\x9a\xa6\x13\x24\x32\x7e\x7e\xcf\x24\x44\x14\x4b\x98\x8a\x22\xf8\xf3\x07\x92\xe9\xdb\x4f\x48\x80\xaa\x15\x83\x1d\xa5\x20\xb4\x40\x07\x04\x8b\x04\xfa\x19\x2c\x4a\x6c\x09\x3b\x38\x32\xd4\x02\x69\xd8\x21\xec\x8d\x18\x0e\xd8\x39\x19\x42\x75\xcc\xd0\x6a\x19\xa0\x4e\x13\xc7\x87\x0e\x82\x3c\x34\x0d\x45\xa2\xf4\x95\x50\x75\x17\xc1\xd9\xac\x56\x30\x08\xe3\x22\xd9\x5b\x10\x81\xc1\x42\xaf\x2c\x09\xd5\x62\x88\xb7\x73\x30\x11\xc6\x50\x3b\xee\x82\xe1\xab\x4d\x01\xd0\x6a\x65\xc9\x8c\x2d\x69\x53\x79\x89\x31\x4e\x76\x1c\xd0\x54\x35\x7f\x3b\x41\x4d\x50\xb8\x0d\x9a\x97\x87\xe8\xf8\x16\x14\x9e\xe0\x13\x52\xca\xc5\xae\x6e\xe1\x2b\xa7\x25\x93\xe4\x92\x58\x8e\x43\x27\x08\xcb\x35\x54\x35\x6c\x7f\x09\xaa\x01\x36\x1b\xf8\x9b\x5f\x38\x70\x51\x81\xec\x2d\xf5\x6a\x0f\xe4\x02\x11\x90\xef\xaa\xf2\x47\xff\x7e\xc7\xe4\xb2\x6e\x0e\x74\x94\x15\xe1\x71\xe0\x5c\x05\xf3\x9e\xf8\xf5\x29\x92\xab\xa8\x09\x38\x19\x0f\x99\x61\x4a\x1c\x1d\x9f\x18\x2a\xf7\x95\xda\xe5\xfe\x19\xa4\xd1\xa8\x8c\x04\xe0\x80\x0f\xfc\xff\x3a\xa3\xbf\x08\x39\x62\x2e\x9d\x49\x2c\xb9\xce\xb1\xb1\x92\x1e\xe0\x83\x20\xd1\xc4\x3f\x9b\x83\xb0\x1e\x9e\xa0\xa7\xf9\x7b\x8a\xe4\xa9\xae\x8b\x25\x7c\xef\xc5\x40\xa3\x41\xf6\x6e\xd0\xbd\x22\xdf\x90\x42\xbd\x5d\x54\x6c\x60\x72\xcf\x95\x44\x62\x2f\x5c\x81\xa4\xc9\xad\x13\x7f\x99\x6e\x49\x1b\x7c\x62\xc9\x99\x71\x53\xb4\x81\x51\xdc\x67\x4b\x92\x1d\xcd\x03\xa7\xb9\x55\x45\xd7\x55\x5e\x49\xd4\xd1\x3f\x43\xf5\x03\xb3\x3b\xcf\xc3\xdb\x62\x40\x6a\x56\x93\x70\x17\x37\xac\xbb\xf2\xec\xcd\x12\x5d\x57\xae\x21\x7d\x9e\xa2\x51\x06\x8f\xfa\x05\xaf\xd8\xf5\x3f\xcd\xea\x50\x22\xe1\x6d\xd5\x5e\xfe\x2d\xed\xad\x44\x61\xaa\x28\x3a\x13\x1c\x9e\x8a\x33\x79\x4c\x2e\xe7\x98\x26\x06\x06\x21\xa1\x68\x33\x59\x09\x2a\x32\x5e\x89\x5b\x10\xe0\x0a\x23\xd4\xd1\x76\xe9\xec\xcf\x1e\xf4\x08\xdf\xbe\xc1\xe7\x47\x06\x7a\x50\x33\x8c\xf6\x30\x37\x19\xf5\x47\xb4\x24\x8e\x43\xde\x09\x33\x39\xf6\xc1\x95\x6e\x09\xc6\x46\x45\x45\x52\xf2\x97\x56\x6c\x83\xf6\xe8\xce\x20\x35\xc9\xb7\x27\x87\xa9\xce\x22\xf1\x91\x37\x53\xf3\x05\xdf\x6c\x35\x0b\xaa\xaf\x36\xbd\x73\xdd\x88\x53\xe6\xb7\xc3\x3c\x16\x37\x06\xc2\xeb\x83\xc3\xb3\x2c\xb6\xc7\x09\xe3\x8f\xc5\xe3\xa4\xf5\xdf\x6e\xa2\x39\x1c\x09\xf2\xa8\x3b\x7c\x80\x52\xf6\x0a\x6d\xb9\x90\x97\xd9\x53\xa4\xc3\x61\xba\xbe\xcb\xec\xcd\x4d\x26\xa4\x9c\x47\x6d\xd8\x59\xbd\x81\xa3\xb6\x04\x06\x5b\x1e\xf9\x2b\x9f\x22\xbb\x86\x67\xa4\xf6\x80\x1d\x3c\x1b\x7d\x64\x21\x9b\x0e\x77\xe3\x7e\x73\x9c\x95\x74\xde\x89\x8b\xbd\x66\x6f\x6d\xb5\x74\x17\xdd\xdc\x42\xcb\xb2\xf9\x3a\x2d\x54\x9e\xd8\xb0\x8d\x35\xc8\xb4\x39\xd6\x6e\x31\x8d\x52\x26\xfb\x07\x4d\xaf\x3b\xd8\xc2\xcf\xf7\xf7\xf7\xb1\x56\xfc\x58\xfe\xcf\xae\x49\x0a\x91\xd9\xfc\x6c\x9b\xed\x15\xaf\xbd\xb6\xcd\x1e\xa9\x2a\xf3\x80\x94\x71\x0a\x34\x74\x40\x55\x55\xc6\x0e\x75\xbe\x59\xce\xdc\x33\x76\xe0\x52\x6b\xf2\x29\x7d\xe6\xf0\x45\x19\xc7\x79\x9d\xc3\xb3\x58\xe0\xc9\x2d\x18\xac\x96\xc5\x91\x9b\x76\xcd\xae\x9b\x83\x3c\x1d\xe5\x96\x84\xa1\x25\x75\xa4\x87\x34\x73\xbd\x22\x97\x6d\x09\x5b\x38\xf5\xaa\xd3\xa7\xc6\x22\xfd\x1e\x88\x41\x2b\x03\x63\x48\xd7\x69\xb6\xd2\x11\x35\x54\x17\x23\x39\x0a\x5f\xe6\x71\xd0\xc1\x93\x71\xd6\x92\x63\x93\xa9\x3b\x15\xc5\xf3\xa8\x5a\xea\xb5\x02\x83\x9d\x11\xa7\x59\x07\x2f\x63\x37\x49\xe2\x2d\x93\x6f\xe7\x6c\xc6\x30\xc3\x9f\x4c\x69\x82\x98\x99\xbd\xce\x94\xb4\xfa\x38\xf4\xe9\x41\xe2\x05\xea\x70\xe7\x86\xca\xfb\x8d\xef\xda\x9d\x30\xb6\x09\x0c\xd5\xbb\x05\xe9\x2f\x9d\x3a\x17\x4c\x7a\xbf\x97\xf8\xe4\xeb\xc0\xaf\xe6\xb9\xbb\xb4\xc4\x46\xea\x7d\x55\xfe\xc5\xa0\x3b\x0f\x82\x12\x7e\x82\xb8\xc3\xdd\xb0\x73\xf3\xe0\xcc\xcd\xc2\xc7\xda\x22\x2d\xe7\xc8\x9c\x68\xa4\x26\x2c\xcc\x28\x65\x02\x94\x16\x93\x77\xb7\xa7\xe7\xc7\xcc\xde\x5e\xf5\xb1\x66\xe6\x9b\xcd\x75\x37\xb3\x5e\xbd\xdd\x1e\x2e\x83\x97\xdf\x80\x77\x91\x1e\x36\xa2\xcf\x61\x1c\x19\x1f\x92\xa6\x0a\xed\x10\x06\x13\xe7\x2f\x73\x3b\x7b\x77\x97\x6d\xca\x5c\x9f\x09\x9b\x0b\xd7\x95\x69\x28\x02\x85\x27\xf7\x55\x95\xed\x41\x18\x2a\xd7\xdf\x2b\x9e\x59\x9e\xa3\xc2\x96\x4f\x5b\xcf\x56\x7f\xbe\x7f\x2c\xce\x6d\xcb\xef\x67\x5f\x6d\x17\x0e\x30\xc8\x1f\x3a\xdf\x43\xcc\xf7\xc8\xf7\x40\xfe\xc8\x58\x30\xe7\xee\x87\xf6\x77\xd9\x7d\x57\x75\xba\x1d\x8f\xee\xe7\x44\x63\x50\x74\x6f\xc9\x54\xf1\x09\x77\xdc\x29\xca\x2b\xe8\xdb\x2f\xe5\x1a\x4a\x32\x41\xe8\x9d\xd1\x27\xa0\x8e\xc7\x9d\xfb\x91\x80\x32\x19\x4e\xae\x54\x43\x05\x6f\x01\x65\x43\xc2\xec\x91\x1a\xc2\x57\x7a\xaf\x15\xcd\xbf\x51\xb2\x86\x48\x0e\x9e\xba\x98\xea\xe2\xdf\x00\x00\x00\xff\xff\x87\xc7\x7c\x44\xb8\x0e\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 3768, mode: os.FileMode(420), modTime: time.Unix(1480885830, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

