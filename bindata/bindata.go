// Code generated by go-bindata.
// sources:
// static/index.html
// static/main.js
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5d\x6f\xdb\x36\x17\xbe\xef\xaf\x60\x55\xbc\x97\x22\xed\x37\xe9\x56\x74\xb2\x81\x21\x6b\x81\x01\x2b\x36\xac\xdd\xb0\x5e\xd2\xe2\x51\xc5\x8c\x22\x35\xf2\xc8\xb1\x61\xf8\xbf\x0f\xa4\x24\x5b\x96\x25\x3b\x4d\xbc\x34\x57\x12\xa9\xf3\xf9\xf0\xe1\xd1\x21\x93\x97\x3f\xfd\x7a\xf3\xe9\xf3\x6f\xef\x48\x8e\x85\x9a\xbf\x48\xea\x07\x21\x84\x24\x39\x70\x51\xbf\x86\x21\x4a\x54\x30\x4f\x58\xfd\xdc\xcf\x17\x80\x9c\xa4\x39\xb7\x0e\x70\x16\x55\x98\xc5\x6f\x22\xc2\x3a\x02\x4a\xea\xbf\x49\x6e\x21\x9b\x45\x39\x62\xe9\xde\x32\x96\x0a\x7d\xeb\x68\xaa\x4c\x25\x32\xc5\x2d\xd0\xd4\x14\x8c\xdf\xf2\x15\x53\x72\xe1\xd8\xa2\x52\x05\x67\x13\xfa\x7f\x7a\xc5\x52\xd7\x8c\x69\x21\x35\x4d\x9d\x8b\x88\x05\x35\x8b\x1c\xae\x15\xb8\x1c\x00\xa3\x79\xc2\xbc\x8f\x47\xb9\xcc\x8c\xc6\x98\xdf\x81\x33\x05\xb0\x6b\xfa\x3d\x9d\x04\xcf\xdd\xe9\xaf\x09\xc0\xa5\x56\x96\x48\x9c\x4d\xef\x1d\xc1\xed\x3f\x15\xd8\x35\xbb\xa2\x53\x3a\x6d\x06\xc1\xe3\xad\xf3\xf6\x6b\x83\x8f\xf3\x90\x73\x2d\x14\x2c\xb8\x75\xf4\xd6\xb1\x6b\x3a\xa1\xdf\x75\xe7\x2e\xeb\x8c\xaf\xa4\x71\x6c\x42\xa7\xaf\xe9\x55\x3d\xb8\xb0\x83\x05\x70\xcd\xa6\xd4\x7b\x08\xef\x17\x36\xff\xc7\xef\x3f\x7b\x94\xa6\x74\xfa\x86\x5e\x87\xd1\x65\xed\xbf\x97\x0a\x3e\xf2\x25\xd8\xda\xcb\x15\xbd\xea\x4c\x7d\xbd\x2b\x5a\x2a\x83\x54\xad\x99\x7f\xaa\x75\xac\x38\x82\xc3\x11\x43\x09\xab\xf7\x76\x3d\x58\x18\xb1\x6e\xde\xc3\x58\xc8\x25\x49\x15\x77\x6e\x16\xe5\x60\x0d\x91\x2e\x56\xf2\x4b\x8e\xd1\x3e\x8a\x21\xb9\xd8\xdb\xe9\xc9\xf4\xe5\x52\xa3\x91\x4b\x0d\xd6\x1b\xcd\x54\x25\xc5\x80\x42\x50\x7a\x19\xc7\xe4\x26\xe7\x16\xc9\x8f\x16\x38\x89\xe3\x11\xb9\x8e\xf1\x85\x59\x8d\x58\xdb\x49\x4a\x31\x8b\x7c\xa9\xea\xe7\x72\x20\xc8\x84\x5c\x8e\x78\x1b\xfe\x34\x30\xdd\x9b\x6a\x86\x83\x18\xef\x30\x89\x5e\x8c\x20\x70\x63\x34\x5a\xa3\xdc\x11\x0a\x89\xe6\x3b\x33\x0a\x96\xa0\xce\xc0\x1f\x64\x62\x05\xd9\x58\xfe\xc7\xc2\x12\xa1\x38\x05\x56\xd9\x4d\xc3\x1a\x45\x72\xee\x62\x2e\x84\xd1\xee\x84\x5a\x50\x95\xba\xac\x30\x2c\x49\x78\x8b\x33\xa9\x10\x6c\xd4\x1a\x0c\x93\x11\xc1\x75\x09\xb3\x08\x61\x85\x11\x29\x15\x4f\x21\x37\x4a\x80\x9d\x45\xef\x83\x38\x29\x00\xad\x4c\x1d\xa5\xf4\x9c\x3f\xbe\x23\x4a\x85\x68\x74\x14\x5c\x2f\x50\xc7\xa9\x02\x6e\x5b\xf7\xa7\x8d\x04\x43\xae\xe4\x7a\x17\x65\x6a\xb4\x27\xb3\x2b\xb8\x1a\x82\x7f\x38\xf3\x56\x3b\xe3\x24\xe3\x71\xaa\x8c\x03\xbf\x47\xe5\x3d\x9c\x33\xef\xfd\x4c\xa6\x8c\x9f\xa2\x77\xf9\x55\xe4\x26\x0f\xa2\x45\x80\xc8\xe3\x5b\xa3\x0a\x22\x4e\x4d\xa5\x31\x9a\xff\xd5\x24\x40\x4c\xd6\x91\x6a\x16\xb1\x15\xfa\x7c\x2a\xcb\xfb\x6f\xc2\xe1\xd0\x6d\x53\xcb\xce\xd5\x1d\x4f\x3c\x52\x53\xe5\x78\xe7\x3d\x1c\x99\x47\x6c\x98\x1e\x81\x43\xd3\x85\x71\x33\x90\x2e\xe6\x29\xca\x25\xec\x79\xad\xa4\x86\xf8\x5c\xb9\xdb\x59\xbf\x34\xab\xbb\xde\x9f\x86\xda\xe4\x1c\x48\x7b\x68\xb8\x05\xfe\xed\xa0\xe9\x7a\x7f\x76\xd0\x2c\xb8\xfd\x76\xc8\x74\x9c\x3f\x8f\x72\x38\x5e\x25\x3e\x22\xb7\xc8\x1c\x9a\x92\x70\x2d\x88\x85\xcc\x82\xcb\x49\x09\x56\x1a\xf1\x2c\x0b\xc6\x7e\x8d\x4b\x5e\xf9\x3f\xce\xd3\xaf\x6f\xe3\xf8\x09\x49\xdf\xef\x32\xea\xf5\x19\xee\x32\x74\x55\x2c\x7c\x07\x52\x48\x3d\x8b\xa6\x11\x59\x72\x55\xc1\x2c\x7a\x7d\xb2\x5b\x7c\x28\x7f\x3e\x48\x97\x12\x5f\xb2\xff\xdb\xff\xcb\x79\x8e\xb4\xa4\x80\x55\x69\x2c\x46\x3d\xce\xdc\x93\x24\xf3\x77\x41\xfb\x52\x85\xea\xa0\x35\xeb\x85\xe4\x39\x28\xb8\xfe\xe2\x9b\xb5\x1b\xff\xfd\xa2\xfd\xce\x60\x33\xaf\xf9\x72\x5e\xaf\xda\x3b\x2d\x86\xba\xf2\xe3\xd6\xfd\x43\xdd\xd2\x90\x5f\xa4\xc3\xe3\xc6\xbd\x3d\x8c\x34\x8d\xcf\xd9\x63\x93\xaa\x8a\xd1\xed\x7e\x2c\x79\xee\x18\x74\xaf\x03\xd3\x40\x9c\x31\xf2\x85\x0a\xdb\x77\xb4\x55\x1c\x81\xf0\xcc\xa7\xd1\x13\xd4\x1e\xf4\x23\x3c\xfb\x87\xab\xdd\xb0\x7b\x42\x2e\xf8\x89\x93\x34\xae\xbb\x17\x59\xe4\x55\xf8\xf1\x90\xcd\x61\x74\x77\x52\x60\xfe\x96\x4c\x27\x93\xff\xfd\x70\xf8\x25\x07\xdf\x49\xbe\x25\xaf\x27\x93\x72\xd5\xf9\xb6\xdd\xbf\xa2\xa5\x0d\x72\xd6\xdc\x51\x5f\x3b\x41\x41\x8a\x20\x08\x8a\xbe\xa3\x70\xd5\x74\xd7\xd8\x5c\x18\x25\x86\x4d\xbe\xea\x96\xb1\x91\x60\xaf\xa1\x18\x54\x4e\x58\x27\xe7\x84\x75\x0e\xfe\x01\xe6\x4f\x50\x94\xe1\xde\x60\xc7\xd7\x16\xcb\x3e\x05\x62\x6c\x44\xbb\xe7\x33\xb6\x8a\xf7\xb7\x49\x7b\x89\xee\x15\xa2\xd7\x6d\xd9\x57\x0f\x3c\x26\x68\x65\x09\xfd\x9b\x80\x04\x0f\xef\x1f\xf7\xf3\x76\x84\x5a\x98\xcf\x6b\x92\x24\x0c\xf3\x71\x99\x9b\xca\x5a\xd0\x48\xfe\xf4\xc5\x7d\x58\x34\x61\x7d\x27\x5e\xee\x28\x9c\x04\x6b\x04\xfb\xea\x9b\xcd\x2b\xe0\x69\x4e\x04\x47\xbe\xdd\x0e\x65\xd0\x62\xb0\x27\x87\x57\x92\x19\x69\xf9\xb1\xdd\x76\xc8\xb2\xd9\x30\x99\x6d\xb7\x63\xdb\x1f\x45\x6b\x4e\xf3\x02\xa2\xf9\x66\xe3\x9f\xdb\x6d\xc2\x70\x00\xbf\x9e\x4a\xf8\xc5\x79\x9d\xf0\x32\xa6\x74\x0c\x48\x9d\x27\xf3\x79\xf6\x52\x4c\xd8\x00\x2c\x09\x66\xc6\xe0\x33\x5a\xcd\xc3\x70\x12\x16\xd8\xd8\x6e\x8c\xb6\x54\xbc\x48\x58\x7d\x1f\xfe\x6f\x00\x00\x00\xff\xff\xb1\x6f\x26\xa0\x27\x17\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 5927, mode: os.FileMode(420), modTime: time.Unix(1481041513, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\x6d\x6f\xdb\xb6\xf6\x7f\x5d\x7d\x8a\x33\x6c\x98\xa4\xd4\x96\x5d\xe0\xff\xbf\xb8\x70\xe6\x02\x6d\xd6\x61\x03\x36\x6c\xb7\xed\x5e\x19\x41\x40\x4b\xc7\x16\x53\x99\x54\x49\x2a\x8e\x97\xfa\xbb\x5f\xf0\x41\x12\x29\xcb\x4d\xb7\x9b\xf6\x45\xaa\x90\x87\x87\xbf\xf3\x7c\x78\x32\xbb\xb8\x88\xe0\x02\x5e\x13\x89\x90\x57\x44\x4a\xd8\x70\x01\x7c\x7d\x8b\xb9\x92\xb0\x2f\x69\x5e\x02\x11\x08\x78\x87\x4c\x81\xe4\x8d\xc8\x51\x66\x11\x5c\xcc\x22\x4b\xfe\xfb\x5a\xa2\xb8\x23\xeb\x0a\xe1\x21\x02\xe0\x2c\x31\xa4\x13\x28\x09\x2b\x2a\x14\xa9\x59\x06\x58\x23\x61\x19\x67\x89\x2a\xa9\x9c\xc0\x80\x26\x02\x38\x46\x11\xc0\x86\x0a\x6c\xcf\x67\x59\x56\x10\x45\x82\xf3\x66\x3f\xe0\xd0\x52\x19\x0e\xc7\x28\x72\xf2\xfc\x86\x4a\xd0\xfc\x1d\x2a\x40\x96\x93\x5a\x36\x15\x51\x28\x41\x95\x08\x12\x15\xf0\x0d\x48\xac\x30\x57\x58\xc0\xce\x90\x4a\x50\x1c\xd6\x08\x5b\x41\xea\x12\x0b\xcd\x83\xb0\xc2\x1c\xc8\x79\xe5\x48\xf5\x4d\x46\x3f\xaa\x24\xca\x92\xfa\xaa\xf0\x2e\xbd\x57\xc8\x8a\x13\xe5\xcc\x2e\x2e\xa0\x26\x42\x6b\x92\x4a\x20\xee\x80\x04\xca\xa4\x22\x2c\x47\xa7\x6f\x2d\xa0\xc7\xcc\x90\xca\x66\xed\x80\x5f\xcc\x22\x80\x9c\x33\xa9\x44\x93\x2b\x2e\x12\xcb\xb1\xd5\x93\x6c\x6a\x14\x49\x6a\xbe\x35\xa3\xcc\x5d\xb8\x74\x37\xf7\x1b\xad\xe0\x4b\x60\xb8\x87\x77\xa8\xfc\x53\x46\xd4\x25\x3c\x18\xb3\x04\x9c\xb4\x11\xe3\xa6\x2e\x88\xc2\x78\x02\x49\x0a\xcb\x97\xee\x6a\x80\xd9\x0c\xae\x48\xad\x1a\x81\x46\x57\x35\xa7\x4c\x59\x8f\x22\xec\x70\xa2\x72\x77\x48\x6f\x27\x15\x2a\x60\x64\x87\x5a\x42\x1f\x5d\xda\xf1\x76\x20\xa4\xe2\x02\x6f\x0c\xe7\x44\x1f\x48\xdd\xb6\x03\xea\xa8\x8c\xa3\xf4\x28\xf5\x9a\x25\x3c\xa6\x9e\x40\x63\x92\x04\xa2\x0a\x64\x85\xd6\x26\x1c\xa1\xf3\x51\x52\x14\x89\x05\xd7\x62\xa3\x1b\x48\xbe\x31\xc7\x4a\x22\xdb\xbd\x1e\xb8\x2f\x4e\xe6\x9d\x8e\xce\x48\x35\xb2\x6d\xc5\x21\x45\x11\x4f\xe0\xec\xb6\x93\xc4\xc9\xd9\xc2\x15\xb8\xe3\x77\x38\x82\xf8\x0b\x01\x17\x58\xa1\xc2\x01\x28\xbb\xd8\x7b\xca\xca\x6e\x5f\x9f\x82\xb2\xd7\xff\x7d\xd8\x8a\x6f\xb7\xd5\x3f\x80\x1d\x8a\x6b\x79\x02\x56\x12\x43\xb2\xa1\x19\xba\x7b\xf3\x0a\x89\x36\xf8\xc3\x49\x9c\x64\x6e\x6b\x2c\x46\x06\x22\x19\xca\x38\x1d\x2e\x7b\x92\x9a\xbb\x3c\x29\xdc\x7d\x02\x55\x23\x58\x78\xad\x47\xd5\x1e\x1c\xf1\x16\xc7\x40\x87\x91\x8b\xba\xe5\xa9\x79\xe0\xd3\x27\x58\x59\x23\x59\xa2\xac\x6e\x64\x99\x74\x9a\xa1\x3b\x94\x8a\xec\xea\x45\x10\x04\xdd\xf2\xc4\xd1\xdd\x91\xaa\xc1\x90\xc6\x81\x0d\xfc\xe0\x38\x50\x55\x87\x62\xe9\x6e\x6f\xc5\xa9\x2b\xae\xaa\xc3\x8d\xa6\x49\x06\x9a\xf8\xdd\x14\xa2\xec\x03\x1e\x64\xd2\x31\x4a\xb3\x1d\xa9\x4d\xf0\xfb\xb9\x47\x8b\x2e\xc8\x3e\x90\x5b\xd3\xb4\x4e\xe9\x38\xf6\xe9\xe4\x7e\xa1\xe9\x0d\x2f\x83\x47\x33\x33\x1f\xbd\xc4\xe9\xa4\xa3\x3e\x9c\xa5\x36\xea\xf0\x28\xd5\xa1\xc6\x05\xc4\x32\x27\x4a\xa1\x88\xfb\x0d\x8d\x66\x61\x7e\x76\x39\xab\xd3\xd3\x69\xf1\x92\x67\x4b\x17\xa9\xaa\xae\x6a\xb9\x22\x45\x05\xec\xb8\x54\x20\x30\x37\x39\xfe\xc2\x1a\x49\x4e\x60\x83\x2a\x2f\xb1\x80\x8d\xe0\x3b\xc3\x64\x56\xe0\xba\xd9\xce\x76\xdd\x25\x85\x15\xe3\xa4\x90\xc9\x73\x65\xcc\x2f\x3e\x67\xcb\x4e\x5f\x5d\xfc\xf8\xd0\xc2\xeb\x35\xe7\x85\x66\xad\xd3\xb6\xae\x44\x4d\x55\x79\x05\x07\x05\xe5\x05\x2c\xe1\xff\xe7\xf3\xb9\x1f\x4d\x95\x42\xd1\x53\x1b\x27\x32\xf2\x3e\x1e\x4e\x9e\x87\x9a\x63\x36\x26\x3b\x31\xc8\x3d\xe5\x32\xdb\xa2\x4a\xe2\x50\x4f\x71\x9b\xb9\x32\x55\x22\x4b\x12\x21\xeb\xa0\xf2\x9d\x48\x2d\x64\x6d\x7c\x30\x0b\x8b\xdd\x98\xcc\xb8\x87\x1f\x0d\x88\x8e\xa6\x2b\x89\x52\x11\x63\x72\x3f\x0e\x3c\xce\x3b\xbd\x2f\x53\xbf\x48\xda\x40\x30\xda\x08\x51\x58\xda\x95\xfe\x79\xed\x51\x9b\x9c\x7a\xa8\x91\x6f\x12\xeb\xc8\xb0\x5c\x42\xcc\x9a\xdd\x1a\x45\x1c\x32\xb6\xac\x6d\xdc\x41\xbc\xe5\x1d\xd3\x2c\x86\xe7\x06\x6a\x40\x1c\xa8\xdd\x44\x22\x2c\x2d\x30\x8f\xec\x18\x9d\x7e\x05\x9e\x72\x92\x01\xda\xc6\xa0\x8d\xa1\x81\x61\xc6\xac\xd2\x96\xf1\x70\xf5\x6c\x8f\xd0\x85\xa4\x49\xb5\x44\xa8\xde\xcb\x15\xaf\x7d\x27\xa7\x4c\xe9\xc0\xa8\x60\x09\x7b\xca\x0a\xbe\xcf\x24\xaa\x5f\xdc\xa2\xc3\x62\x08\x5b\x37\x9b\xf8\x8e\xed\xe7\xf3\x3a\x39\x29\x72\x2d\xf3\xde\x08\xee\x0e\x53\x5e\xba\x5b\x42\x5a\xbf\xc8\x79\xe8\xba\xb8\xea\x0a\x9d\x44\x75\x63\x61\x24\x0e\x8d\x5f\xf3\xba\xc8\xb3\x1f\x03\x60\xf2\x46\x34\x8c\x51\xb6\x4d\x86\xe5\xd7\x53\x50\xb7\x62\x14\x18\x5e\xee\x73\x08\x63\xf5\x35\xe7\x15\x12\x76\x2a\x55\x0b\xfa\x27\x13\xfc\x89\xcd\x01\x01\xe6\x2e\x2d\xd8\x8f\x68\xdc\xfc\x5a\xee\x46\x54\x49\xda\x37\x48\xae\xc7\xeb\x2b\xa8\x40\x17\x96\x6f\x71\xfb\xe6\xbe\x4e\x7c\xf6\x9f\x3e\x41\x9c\x5d\xb8\x74\xa0\x89\xfb\x90\xef\xfd\x76\xb4\x40\x8d\x94\x20\xbf\x26\x4c\xbc\x55\xbf\xc2\xda\xc4\x66\x5a\x5d\x9f\xa4\x6d\xa6\x17\x3a\x77\x90\xac\xfd\xd5\xb4\x0b\x7e\x5f\xdc\x07\xd6\x31\x75\x32\xb8\x2c\xa9\xb1\x09\xcc\xf0\x1e\x73\xb7\x62\xc0\xa7\xae\x43\xfe\x2e\x89\xbf\x75\xb2\x4d\x73\xde\x30\x15\xa7\x99\xc2\x7b\x95\x78\x62\x56\xc8\xb6\xaa\x4c\x3b\x7a\xcb\x1f\x8b\xf0\x40\xdb\xc9\xb4\xd4\x03\xf6\x53\xa5\x2b\x4b\x9c\x66\xa5\xda\x55\x89\xc2\x5d\x6d\x2a\x9e\x0b\xf4\x1b\xb3\x7b\xd3\x2e\x77\xcd\x8a\xce\x6a\x8b\xe0\x25\x71\x6c\x91\x6b\xab\x50\x56\x37\xfa\xd1\xa3\xaf\x31\xdf\x53\x8b\xcd\x19\x4e\xfb\xb2\x59\xd6\xea\x4d\x52\xf8\x66\xe9\xfb\x50\xef\xd4\x3d\x8d\xbf\xed\x39\xb3\xa9\xda\x30\x7d\x92\x7f\x9a\xed\x1f\x15\x57\x8a\xb2\xad\xfe\x7e\x1a\xae\xba\xac\x47\x9b\x86\xe5\x8a\x72\x66\x7a\xad\x9b\x8a\x32\xbc\xc9\xcb\x3e\xb3\x69\x8d\xb9\x6e\x36\xf4\xa6\xa0\x35\x8b\x3a\x0f\xfe\xc3\x2c\x67\x0c\xf7\xfa\x2b\x89\x0d\xaf\x78\x62\x78\x4c\xe0\xe1\x38\xb1\x6c\x78\xad\xef\x94\x8e\x4b\xaa\x95\x15\x02\x21\x02\xc9\x09\x10\xa9\x48\xfe\x01\x8b\x57\x02\x35\x9e\xf6\x40\xa2\x04\xc9\xb1\x7b\x0f\xda\xdf\x56\xf3\x6b\x6d\x13\x9d\xe1\x62\xc5\xff\x42\xc1\x0f\xb1\xb7\x9d\x6d\xb8\x78\x43\xf2\x32\x91\x28\xa8\xae\x26\x2f\xe1\xc1\x7e\x66\x87\x4c\xe0\x1d\x0a\x89\x49\x7a\x09\x6e\xed\xbe\x5f\xd3\x15\xe0\xd9\x86\x8b\xe4\x8e\x08\xa0\xcb\x17\x97\x40\x7f\x70\x3c\xad\x17\x5f\x02\x7d\xfe\xdc\x4b\x7e\x16\x0e\xf5\xe1\x30\xbc\x57\x87\x38\x7a\x66\xca\xb9\x61\x74\xbb\x9c\x5f\xc2\xed\x0f\xc9\x6f\x44\x95\xd9\x8e\xb6\x32\xad\xe8\xf5\x2a\x3e\xc4\xd7\x8e\xf5\xa4\xe3\x36\x7d\x11\x6c\xa4\xe9\x25\xdc\xda\x5b\x9f\x3d\x0b\x8f\xae\x6e\xaf\xe1\xf9\xf2\xe4\xe0\xea\xf6\xfa\x52\x03\x38\x46\xcf\x8e\x4f\xa7\x97\xb6\xad\x32\xbc\x2e\x23\x1b\x0a\x9e\x0b\x79\x06\x4c\x3e\xe3\x4e\x5f\xc1\x9f\xd6\x44\xfc\x33\xbf\xee\x1b\x2e\xab\x11\xbe\x01\x7f\xf8\xe4\x14\xa1\xfb\x24\x6d\xdb\x35\x11\xb1\x13\xfb\x7f\x16\x40\xfb\x85\xc1\xbe\x61\xba\xdc\x86\xe1\x39\x90\xcf\x49\xe5\xee\x74\xa7\x92\xf4\xc9\x93\xd0\x9f\x6f\x7f\x85\x9f\x09\x2b\xaa\xaf\x98\x88\xba\x3a\xdc\x19\xaa\x71\x45\xf7\xcf\xb7\xbf\x18\x9b\x34\xee\x31\xff\x9f\x06\xc5\x21\x89\x6d\xaa\x8f\x47\x76\xbc\xcc\xae\xf3\x7a\x68\xe9\xb6\xf8\x48\xfa\x17\xc2\x4b\x98\xb7\x26\x6d\x32\x52\x14\x21\xeb\x09\xbc\x12\x82\x1c\x32\xfd\x54\x3a\xc3\xc5\xbe\xaa\x92\x34\x4d\x9d\xfd\xbb\x0b\x5b\x8a\xb0\x82\xf8\xb7\x38\x98\xce\x15\x06\xf4\x8e\x5d\x49\xf5\xdb\xfe\x60\xde\xe5\xef\x94\xa9\x77\xc7\x09\xc4\xf1\x04\x9a\x4c\xf1\x77\x4a\xd8\xa6\x2b\xf4\x7c\x22\x24\x0e\x74\xf9\xd1\xd7\x65\xf6\xd1\x00\x50\xa2\xc1\x56\x47\x1f\xb3\x91\xc9\x8a\x7d\x05\xf4\x5b\xfa\x21\x20\xcd\x95\xde\x43\x20\xd4\x0b\x29\x8a\xfe\xc0\xd8\xb4\xa5\x0b\x2c\xd7\x73\xf0\x0d\x0c\xef\x1e\xe7\x1a\xce\x8b\x8e\x5e\xc9\x6d\x25\x08\x35\x1d\x28\xb5\xef\x13\x3f\x06\x0a\x7e\xea\x40\x79\x87\xaa\xa9\xe1\x7b\x78\x63\xa6\xe3\x3f\xdb\x69\xb6\xfc\x5a\x21\x43\x19\x6d\x53\x40\xd7\x25\xe9\xf7\xb5\x91\x7f\xb4\x5b\x5a\x38\x4c\x6b\x22\x64\x96\xf3\x5d\x4d\x2b\x4c\x86\x9d\xd7\xb4\xa5\x6e\x5b\xb0\xce\xb9\x7f\x74\x03\x2e\x73\x81\xcb\x5d\x8b\xce\x6a\x36\x89\x2d\x3c\x2b\xca\x92\xef\x7f\xa5\xec\xc3\x02\x36\xa4\x92\x5e\x47\xbb\xe3\x05\xbe\x26\xe2\x75\xa3\x14\x67\xf2\x3d\x7f\x6b\xc2\x77\x01\xab\x58\xf1\x5f\x76\x64\xab\xdf\x5f\xb1\x44\x56\xe8\x1b\xdf\xf3\xab\x8a\x37\x45\x7c\xdd\x9f\x2f\xa8\xac\x2b\x72\xa8\xf8\x96\x3b\xde\xa1\x5f\x4c\x3c\x15\xc8\x85\xf1\x7c\x37\xc3\x48\x7c\x59\x3a\x0f\x73\xd1\xd1\xcd\xd8\x83\x10\x4e\x87\xd4\xe1\x9c\x58\x8b\xfd\x08\x89\xcb\x6d\x1d\x55\xeb\x96\xed\x2b\x70\xb8\xde\xbe\x91\x8e\x51\xf4\x5d\x52\xf0\xbc\xd9\x21\x53\x69\x26\x90\x14\x07\xef\x45\x6b\xed\xaf\x7b\xdc\xd9\x0c\xde\x9b\x01\x69\x1b\x56\x16\x87\x76\x92\x7d\x89\x0c\xf2\x8a\xe6\x1f\x28\xdb\x02\x67\xa0\x4a\xdc\x01\x35\xff\x7b\xed\xf2\x6c\x06\xc6\xf8\x91\xee\xc4\xfb\x2b\xb5\x18\xe6\xb0\x36\x88\x12\x0e\xe1\x54\xf0\x3d\xa8\xc2\x34\xfd\xf1\x04\x12\xf4\x1e\xd9\xa1\x1a\xdc\xd8\x16\x33\x45\xc4\x16\x95\xe9\xff\xaf\x38\x53\x9a\x79\xd4\x4e\xdf\x67\x33\x1d\x38\x3e\x20\xa8\xa8\x54\xfd\xbb\x6d\x88\xc8\x74\xe1\x1a\x51\xd8\xca\x8f\x21\x39\xcd\x00\x98\xe5\x8d\x10\xc8\xd4\x7b\x0b\xc9\x4e\x39\xc6\xc0\x08\xdc\x08\x94\x65\xff\xe6\x7d\x0c\x87\x25\x7c\x0c\x47\xfb\xcc\x1e\x05\x02\x17\xf0\x62\x3e\x9f\x07\x78\xae\xf4\xfb\xde\xfe\xe9\x49\x37\x01\x66\xc6\x37\xb4\xf3\xe7\xec\xf6\xed\x5a\xb1\xa9\x9d\x41\x7f\xd6\x58\xfd\x40\xfb\x38\xf0\x2a\xd3\x33\xb9\xbf\x7b\x7d\xc9\x65\x35\x69\xe4\x89\x67\x98\x67\x58\xce\x99\x7b\x85\x75\x74\x40\xbd\x47\x58\xa0\xac\xf1\xc1\xc2\x20\x54\xbc\x01\x83\xe6\xee\x5a\x81\xab\x8a\x48\x99\xc4\x1b\xe2\xb0\x04\x24\xa4\x28\xbc\xfd\x8a\x1c\xe2\xd1\x5a\x35\x1a\x93\x9f\xbb\xa9\xe7\x34\x7a\x91\x07\xe4\x78\x6a\xdf\x9f\xce\x79\xfb\x88\x1d\xcf\x78\xfc\xe9\xe3\xd6\x3c\x55\x63\x77\xe9\x99\x80\x60\x4d\x55\x05\x46\x7f\x73\x5f\x73\xed\x66\x66\x84\x47\x73\xa0\x3a\x23\x3f\x0a\x0c\xcd\xa9\x21\x24\xdb\xa6\x06\x23\xb9\x6d\x01\xcb\x97\xc1\x64\xd0\x75\xcb\x2e\xf7\x27\xdb\x62\x32\x98\x33\x9a\xbe\x61\x47\xd4\x22\xae\xd9\x36\x9e\x0c\xf6\x4a\xa4\xdb\x52\x2d\xe0\x5f\xf3\xf9\x70\x6b\x4f\x0b\x55\x2e\xe0\xc5\xff\xb9\x79\x71\xfb\xef\x98\x0e\xc6\x84\xda\xc3\x4d\x8e\x0e\x27\x34\xde\x83\xc1\x0d\xdb\x88\xe2\xeb\x8e\x3a\x93\x75\x45\x55\x12\x4f\xe2\x74\xf5\xe2\x3a\x0d\x8e\xad\x9b\x0d\xb8\xba\x62\xda\xc8\xd7\xcd\x66\x83\xc2\x1c\x0d\xe6\x24\x2d\xfd\x1d\xc5\x7d\xdb\xa5\x51\xa6\xfe\x6d\x0e\x25\xeb\x66\x33\x18\x03\xdb\x38\x82\x25\xcc\x2f\x81\xc2\x0f\xe0\x31\x34\x8f\x50\x08\x87\xb4\x9a\xed\x8a\x5e\xc3\xd2\x12\xea\x0c\x72\xc5\x0b\x7c\xa5\x12\x9a\xc2\xf7\x30\xbf\xdf\x6c\x46\x46\xae\x46\x80\x8a\xaf\x1d\xa0\xd7\x15\x5f\x27\x2b\xcd\xea\x7a\x02\x0f\xe6\x0f\x1a\xb1\xf1\x8a\x99\xb6\xc7\xb1\x47\xd8\x4e\x3d\xc9\x1d\xbe\x92\x89\xe6\x30\x81\x78\xcb\xa7\xad\xd7\x69\xf2\x70\xa8\xda\x25\xdd\x3d\x55\x79\x09\x8a\x83\x7e\xee\xd8\x4c\xf7\xa8\xcf\x69\xd2\x69\xfb\xb6\x1a\x86\x82\x91\x55\x4d\xd7\xa6\xc9\x88\xd3\x30\x5c\xa9\x9c\x92\x5c\xd1\xbb\x36\x20\xdb\x8c\xe4\x71\x4c\xbd\xf0\x1d\x92\x9f\x7f\xa1\x05\x4e\x3f\x22\x1d\x11\x48\xbe\x50\x3a\x4d\xfa\xb4\xd2\x79\x1c\xff\x86\x74\xfd\x54\xe6\x51\xe9\xd6\x44\x7c\xa1\x70\x6b\x22\x9e\x56\xb6\x9e\xe1\xdf\x10\xad\x1b\x10\x9c\x91\xec\x2d\x16\x82\xec\x4d\xed\xd5\x9b\xba\x7f\xb2\x2e\x0e\x02\xf5\x0b\xd2\x88\x69\x57\x34\x4c\xbd\x94\xd8\x86\x30\x02\xff\x21\x16\x1d\xd3\xe8\xbf\x01\x00\x00\xff\xff\xfb\xde\x3a\x30\x5b\x23\x00\x00")

func staticMainJsBytes() ([]byte, error) {
	return bindataRead(
		_staticMainJs,
		"static/main.js",
	)
}

func staticMainJs() (*asset, error) {
	bytes, err := staticMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/main.js", size: 9051, mode: os.FileMode(420), modTime: time.Unix(1481044199, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/main.js": staticMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
		"main.js": &bintree{staticMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

